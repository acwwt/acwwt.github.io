<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础</title>
      <link href="/posts/99832f47/"/>
      <url>/posts/99832f47/</url>
      
        <content type="html"><![CDATA[<h1 id="⼀、Python基础"><a href="#⼀、Python基础" class="headerlink" title="⼀、Python基础"></a>⼀、Python基础</h1><p>[TOC]</p><p>Python基础 主要总结Python常⽤内置函数；Python独有的语法特性、关键词 nonlocal, global等；<br>内置数据结构包括：列表(list), 字典(dict), 集合(set), 元组(tuple) 以及相关的⾼级模块 collections中<br>的 Counter, namedtuple, defaultdict， heapq模块。⽬前共有 90个⼩例⼦。</p><h2 id="1-求绝对值"><a href="#1-求绝对值" class="headerlink" title="1 求绝对值"></a>1 求绝对值</h2><p>绝对值或复数的模</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="2-元素都为真"><a href="#2-元素都为真" class="headerlink" title="2 元素都为真"></a>2 元素都为真</h2><p>接受⼀个迭代器，如果迭代器的 所有元素 都为真，那么返回 True，否则返回 False</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>([<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="3-元素⾄少⼀个为真"><a href="#3-元素⾄少⼀个为真" class="headerlink" title="3 元素⾄少⼀个为真"></a>3 元素⾄少⼀个为真</h2><p>接受⼀个迭代器，如果迭代器⾥ ⾄少有⼀个 元素为真，那么返回 True，否则返回 False</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,[]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="4-ascii展⽰对象"><a href="#4-ascii展⽰对象" class="headerlink" title="4 ascii展⽰对象"></a>4 ascii展⽰对象</h2><p>调⽤对象的repr() ⽅法，获得该⽅法的返回值，如下例⼦返回值为字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;id = &#x27;</span>+self.<span class="built_in">id</span> +<span class="string">&#x27;, name = &#x27;</span>+self.name</span><br><span class="line"></span><br><span class="line">xiaoming = Student(<span class="built_in">id</span>=<span class="string">&#x27;001&#x27;</span>,name=<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(xiaoming)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ascii</span>(xiaoming)</span><br></pre></td></tr></table></figure><h2 id="5-⼗转⼆"><a href="#5-⼗转⼆" class="headerlink" title="5 ⼗转⼆"></a>5 ⼗转⼆</h2><p>将 ⼗进制 转换为 ⼆进制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="6-⼗转⼋"><a href="#6-⼗转⼋" class="headerlink" title="6 ⼗转⼋"></a>6 ⼗转⼋</h2><p>将 ⼗进制 转换为 ⼋进制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">oct</span>(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h2 id="7-⼗转⼗六"><a href="#7-⼗转⼗六" class="headerlink" title="7 ⼗转⼗六"></a>7 ⼗转⼗六</h2><p>将 ⼗进制 转换为 ⼗六进制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="number">15</span>)</span><br></pre></td></tr></table></figure><h2 id="8-判断是真是假"><a href="#8-判断是真是假" class="headerlink" title="8 判断是真是假"></a>8 判断是真是假</h2><p>测试⼀个对象是True, 还是False.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="9-字符串转字节"><a href="#9-字符串转字节" class="headerlink" title="9 字符串转字节"></a>9 字符串转字节</h2><p>将⼀个 字符串 转换成 字节 类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="built_in">bytes</span>(s, <span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="10-转为字符串"><a href="#10-转为字符串" class="headerlink" title="10 转为字符串"></a>10 转为字符串</h2><p>将 字符类型 、 数值类型 等转换为 字符串 类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="11-是否可调⽤"><a href="#11-是否可调⽤" class="headerlink" title="11 是否可调⽤"></a>11 是否可调⽤</h2><p>判断对象是否可被调⽤，能被调⽤的对象就是⼀个 callable 对象，⽐如函数 str, int 等都是可被调<br>⽤的，但是例⼦4 中 xiaoming实例是不可被调⽤的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(xiaoming)</span><br></pre></td></tr></table></figure><p>如果想让 xiaoming能被调⽤ xiaoming(), 需要重写 Student类的 __call__⽅法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;id = &#x27;</span>+self.<span class="built_in">id</span> +<span class="string">&#x27;, name = &#x27;</span>+self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I can be called&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;my name is <span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = Student(<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line">t()</span><br></pre></td></tr></table></figure><h2 id="12-⼗转ASCII"><a href="#12-⼗转ASCII" class="headerlink" title="12 ⼗转ASCII"></a>12 ⼗转ASCII</h2><p>查看⼗进制整数对应的 ASCII字符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">65</span>)</span><br></pre></td></tr></table></figure><h2 id="13-ASCII转⼗"><a href="#13-ASCII转⼗" class="headerlink" title="13 ASCII转⼗"></a>13 ASCII转⼗</h2><p>查看某个 ASCII字符 对应的⼗进制数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="14-类⽅法"><a href="#14-类⽅法" class="headerlink" title="14 类⽅法"></a>14 类⽅法</h2><p>classmethod 装饰器对应的函数不需要实例化，不需要 self参数，但第⼀个参数需要是表⽰⾃⾝类<br>的 cls 参数，可以来调⽤类的属性，类的⽅法，实例化对象等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;id = &#x27;</span>+self.<span class="built_in">id</span> +<span class="string">&#x27;, name = &#x27;</span>+self.name</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br></pre></td></tr></table></figure><h2 id="15-执⾏字符串表⽰的代码"><a href="#15-执⾏字符串表⽰的代码" class="headerlink" title="15 执⾏字符串表⽰的代码"></a>15 执⾏字符串表⽰的代码</h2><p>将字符串编译成python能识别或可执⾏的代码，也可以将⽂字读成字符串再编译。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;print(&#x27;Hello world!&#x27;)&quot;</span></span><br><span class="line">r = <span class="built_in">compile</span>(s,<span class="string">&quot;&lt;string&gt;&quot;</span>,<span class="string">&quot;exec&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(r)</span><br></pre></td></tr></table></figure><h2 id="16-创建复数"><a href="#16-创建复数" class="headerlink" title="16 创建复数"></a>16 创建复数</h2><p>创建⼀个复数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="17-动态删除属性"><a href="#17-动态删除属性" class="headerlink" title="17 动态删除属性"></a>17 动态删除属性</h2><p>删除对象的属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delattr</span>(xiaoming,<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(xiaoming,<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="18-转为字典"><a href="#18-转为字典" class="headerlink" title="18 转为字典"></a>18 转为字典</h2><p>创建数据字典</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(a=<span class="string">&#x27;a&#x27;</span>,b=<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],[<span class="number">1</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)])</span><br></pre></td></tr></table></figure><h2 id="19-⼀键查看对象所有⽅法"><a href="#19-⼀键查看对象所有⽅法" class="headerlink" title="19 ⼀键查看对象所有⽅法"></a>19 ⼀键查看对象所有⽅法</h2><p>不带参数时返回 当前范围 内的变量、⽅法和定义的类型列表；带参数时返回 参数 的属性，⽅法列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(xiaoming)</span><br></pre></td></tr></table></figure><h2 id="20-取商和余数"><a href="#20-取商和余数" class="headerlink" title="20 取商和余数"></a>20 取商和余数</h2><p>分别取商和余数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">divmod</span>(<span class="number">10</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="21-枚举对象"><a href="#21-枚举对象" class="headerlink" title="21 枚举对象"></a>21 枚举对象</h2><p>返回⼀个可以枚举的对象，该对象的next()⽅法将返回⼀个元组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(s,<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br></pre></td></tr></table></figure><h2 id="22-计算表达式"><a href="#22-计算表达式" class="headerlink" title="22 计算表达式"></a>22 计算表达式</h2><p>将字符串str 当成有效的表达式来求值并返回计算结果取出字符串中内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;1+3+4+5&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(s)</span><br></pre></td></tr></table></figure><h2 id="23-查看变量所占字节数"><a href="#23-查看变量所占字节数" class="headerlink" title="23 查看变量所占字节数"></a>23 查看变量所占字节数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">sys.getsizeof(s)</span><br></pre></td></tr></table></figure><h2 id="24-过滤器"><a href="#24-过滤器" class="headerlink" title="24 过滤器"></a>24 过滤器</h2><p>在函数中设定过滤条件，迭代元素，保留返回值为 True的元素：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fil = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x : x &gt; <span class="number">10</span>,[<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">13</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(fil))</span><br></pre></td></tr></table></figure><h2 id="25-转为浮点类型"><a href="#25-转为浮点类型" class="headerlink" title="25 转为浮点类型"></a>25 转为浮点类型</h2><p>将⼀个整数或数值型字符串转换为浮点数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如果不能转化为浮点数，则会报 ValueError:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="26-字符串格式化"><a href="#26-字符串格式化" class="headerlink" title="26 字符串格式化"></a>26 字符串格式化</h2><p>格式化输出字符串，format(value, format_spec)实质上是调⽤了value的format(format_spec)⽅法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am &#123;0&#125;,age&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">18</span>))</span><br></pre></td></tr></table></figure><p><img src="/.io//image-20230802164821189.png" alt="image-20230802164821189"></p><h2 id="27-冻结集合"><a href="#27-冻结集合" class="headerlink" title="27 冻结集合"></a>27 冻结集合</h2><p>创建⼀个不可修改的集合。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="28-动态获取对象属性"><a href="#28-动态获取对象属性" class="headerlink" title="28 动态获取对象属性"></a>28 动态获取对象属性</h2><p>获取对象的属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;id = &#x27;</span>+self.<span class="built_in">id</span> +<span class="string">&#x27;, name = &#x27;</span>+self.name</span><br><span class="line">xiaoming = Student(<span class="built_in">id</span>=<span class="string">&#x27;001&#x27;</span>,name=<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="built_in">getattr</span>(xiaoming,<span class="string">&#x27;id&#x27;</span>) <span class="comment"># 获取xiaoming这个实例的name属性值\</span></span><br></pre></td></tr></table></figure><h2 id="29-对象是否有这个属性"><a href="#29-对象是否有这个属性" class="headerlink" title="29 对象是否有这个属性"></a>29 对象是否有这个属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(xiaoming,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(xiaoming,<span class="string">&#x27;address&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="30-返回对象的哈希值"><a href="#30-返回对象的哈希值" class="headerlink" title="30 返回对象的哈希值"></a>30 返回对象的哈希值</h2><p>返回对象的哈希值，值得注意的是⾃定义的实例都是可哈希的， list, dict, set等可变对象都是不<br>可哈希的(unhashable)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(xiaoming)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="31-⼀键帮助"><a href="#31-⼀键帮助" class="headerlink" title="31 ⼀键帮助"></a>31 ⼀键帮助</h2><p>返回对象的帮助⽂档</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(xiaoming)</span><br></pre></td></tr></table></figure><h2 id="32-对象门牌号"><a href="#32-对象门牌号" class="headerlink" title="32 对象门牌号"></a>32 对象门牌号</h2><p>返回对象的内存地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>(xiaoming)</span><br></pre></td></tr></table></figure><h2 id="33-获取⽤户输⼊"><a href="#33-获取⽤户输⼊" class="headerlink" title="33 获取⽤户输⼊"></a>33 获取⽤户输⼊</h2><p>获取⽤户输⼊内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><h2 id="34-转为整型"><a href="#34-转为整型" class="headerlink" title="34 转为整型"></a>34 转为整型</h2><p>int(x, base &#x3D;10) , x可能为字符串或数值，将x 转换为⼀个普通整数。如果参数是字符串，那么它可能包<br>含符号和⼩数点。如果超出了普通整数的表⽰范围，⼀个长整数被返回。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;12&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="35-isinstance"><a href="#35-isinstance" class="headerlink" title="35 isinstance"></a>35 isinstance</h2><p>判断object是否为类classinfo的实例，是返回true</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(xiaoming,Student)</span><br></pre></td></tr></table></figure><h2 id="36-⽗⼦关系鉴定"><a href="#36-⽗⼦关系鉴定" class="headerlink" title="36 ⽗⼦关系鉴定"></a>36 ⽗⼦关系鉴定</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">undergraduate</span>(<span class="title class_ inherited__">Student</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">studyClass</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attendActivity</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(undergraduate,Student)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">object</span>,Student)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(Student,<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><p>如果class是classinfo元组中某个元素的⼦类，也会返回True</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">int</span>,(<span class="built_in">int</span>,<span class="built_in">float</span>))</span><br></pre></td></tr></table></figure><h2 id="37-创建迭代器类型"><a href="#37-创建迭代器类型" class="headerlink" title="37 创建迭代器类型"></a>37 创建迭代器类型</h2><p>使⽤ iter(obj, sentinel), 返回⼀个可迭代对象, sentinel可省略(⼀旦迭代到此元素，⽴即终⽌)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">iter</span>(lst):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestIter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.l=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">        self.i=<span class="built_in">iter</span>(self.l)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>): <span class="comment">#定义了__call__⽅法的类的实例是可调⽤的</span></span><br><span class="line">        item = <span class="built_in">next</span>(self.i)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;__call__ is called,fowhich would return&quot;</span>,item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>): <span class="comment">#⽀持迭代协议(即定义有__iter__()函数)</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;__iter__ is called!!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = TestIter()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> T:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="38-所有对象之根"><a href="#38-所有对象之根" class="headerlink" title="38 所有对象之根"></a>38 所有对象之根</h2><p>object 是所有类的基类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o = <span class="built_in">object</span>()</span><br><span class="line"><span class="built_in">type</span>(o)</span><br></pre></td></tr></table></figure><h2 id="39-打开⽂件"><a href="#39-打开⽂件" class="headerlink" title="39 打开⽂件"></a>39 打开⽂件</h2><p>返回⽂件对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./json.js&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure><p>mode取值表：</p><p><img src="/.io//image-20230802164938454.png" alt="image-20230802164938454"></p><h2 id="40-次幂"><a href="#40-次幂" class="headerlink" title="40 次幂"></a>40 次幂</h2><p>base为底的exp次幂，如果mod给出，取余</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="41-打印"><a href="#41-打印" class="headerlink" title="41 打印"></a>41 打印</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;lst: <span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lst:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(lst))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lst:&#x27;</span>,lst)</span><br></pre></td></tr></table></figure><h2 id="42-创建属性的两种⽅式"><a href="#42-创建属性的两种⽅式" class="headerlink" title="42 创建属性的两种⽅式"></a>42 创建属性的两种⽅式</h2><p>返回 property 属性，典型的⽤法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._x = <span class="literal">None</span>  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setx</span>(<span class="params">self, value</span>):</span><br><span class="line">        self._x = value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"><span class="comment"># 使⽤property类创建 property 属性</span></span><br><span class="line">    x = <span class="built_in">property</span>(getx, setx, delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property.&quot;</span>)</span><br></pre></td></tr></table></figure><p>使⽤python装饰器，实现与上完全⼀样的效果代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self, value</span>):</span><br><span class="line">        self._x = value</span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(C().x)    </span><br></pre></td></tr></table></figure><h2 id="43-创建range序列"><a href="#43-创建range序列" class="headerlink" title="43 创建range序列"></a>43 创建range序列</h2><ol><li>range(stop) 2) range(start, stop[,step])</li></ol><p>⽣成⼀个不可变序列：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="44-反向迭代器"><a href="#44-反向迭代器" class="headerlink" title="44 反向迭代器"></a>44 反向迭代器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rev = <span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rev:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="45-四舍五⼊"><a href="#45-四舍五⼊" class="headerlink" title="45 四舍五⼊"></a>45 四舍五⼊</h2><p>四舍五⼊， ndigits代表⼩数点后保留⼏位：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">10.0222222</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">10.05</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="46-转为集合类型"><a href="#46-转为集合类型" class="headerlink" title="46 转为集合类型"></a>46 转为集合类型</h2><p>返回⼀个set对象，集合内不允许有重复元素：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">set</span>(a)</span><br></pre></td></tr></table></figure><h2 id="47-转为切⽚对象"><a href="#47-转为切⽚对象" class="headerlink" title="47 转为切⽚对象"></a>47 转为切⽚对象</h2><p>class slice(start, stop[, step])</p><p>返回⼀个表⽰由 range(start, stop, step) 所指定索引集的 slice对象，它让代码可读性、可维护性变好。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">my_slice_meaning = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">a[my_slice_meaning]</span><br></pre></td></tr></table></figure><h2 id="48-拿来就⽤的排序函数"><a href="#48-拿来就⽤的排序函数" class="headerlink" title="48 拿来就⽤的排序函数"></a>48 拿来就⽤的排序函数</h2><p>排序：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaohong&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;]</span><br><span class="line"><span class="built_in">sorted</span>(a,key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;age&#x27;</span>],reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h2 id="49-求和函数"><a href="#49-求和函数" class="headerlink" title="49 求和函数"></a>49 求和函数</h2><p>求和：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">sum</span>(a)</span><br><span class="line"><span class="built_in">sum</span>(a,<span class="number">10</span>) <span class="comment"># 求和的初始值为10</span></span><br></pre></td></tr></table></figure><h2 id="50-转元组"><a href="#50-转元组" class="headerlink" title="50 转元组"></a>50 转元组</h2><p>tuple() 将对象转为⼀个不可变的序列类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i_am_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">i_am_tuple = <span class="built_in">tuple</span>(i_am_list)</span><br><span class="line">i_am_tuple</span><br></pre></td></tr></table></figure><h2 id="51-查看对象类型"><a href="#51-查看对象类型" class="headerlink" title="51 查看对象类型"></a>51 查看对象类型</h2><p>class type(name, bases, dict)<br>传⼊⼀个参数时，返回 object 的类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;id = &#x27;</span>+self.<span class="built_in">id</span> +<span class="string">&#x27;, name = &#x27;</span>+self.name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming = Student(<span class="built_in">id</span>=<span class="string">&#x27;001&#x27;</span>,name=<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="built_in">type</span>(xiaoming)</span><br></pre></td></tr></table></figure><h2 id="52-聚合迭代器"><a href="#52-聚合迭代器" class="headerlink" title="52 聚合迭代器"></a>52 聚合迭代器</h2><p>创建⼀个聚合了来⾃每个可迭代对象中的元素的迭代器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">y = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(y,x))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">b = <span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>)</span><br><span class="line">b <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line">[<span class="built_in">str</span>(y) + <span class="built_in">str</span>(x) <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(a,b)] <span class="comment"># [&#x27;a0&#x27;, &#x27;b1&#x27;, &#x27;c2&#x27;, &#x27;d3&#x27;, &#x27;e4&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="53-nonlocal⽤于内嵌函数中"><a href="#53-nonlocal⽤于内嵌函数中" class="headerlink" title="53 nonlocal⽤于内嵌函数中"></a>53 nonlocal⽤于内嵌函数中</h2><p>关键词 nonlocal常⽤于函数嵌套中，声明变量 i 为⾮局部变量； 如果不声明， i+&#x3D;1表明 i 为函数<br>wrapper内的局部变量，因为在 i+&#x3D;1引⽤(reference)时,i未被声明，所以会报 unreferenced<br>variable的错误。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">excepter</span>(<span class="params">f</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">nonlocal</span> i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e.args[<span class="number">0</span>]&#125;</span>: <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">            t2 = time.time()    </span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;spending time:<span class="subst">&#123;<span class="built_in">round</span>(t2-t1,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="54-global-声明全局变量"><a href="#54-global-声明全局变量" class="headerlink" title="54 global 声明全局变量"></a>54 global 声明全局变量</h2><p>先回答为什么要有 global，⼀个变量被多个函数引⽤，想让全局变量被所有函数共享。有的伙伴可能<br>会想这还不简单，这样写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">f()</span><br><span class="line">g()</span><br></pre></td></tr></table></figure><p>f和g两个函数都能共享变量 i ，程序没有报错，所以他们依然不明⽩为什么要⽤ global.</p><p>但是，如果我想要有个函数对 i 递增，这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>():</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">h()</span><br></pre></td></tr></table></figure><p>此时执⾏程序，bang, 出错了！ 抛出异常： UnboundLocalError，原来编译器在解释 i+&#x3D;1时会把 i<br>解析为函数 h()内的局部变量，很显然在此函数内，编译器找不到对变量 i 的定义，所以会报错。</p><p>global就是为解决此问题⽽被提出，在函数h内，显⽰地告诉编译器 i 为全局变量，然后编译器会在<br>函数外⾯寻找 i 的定义，执⾏完 i+&#x3D;1后， i 还为全局变量，值加1：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">h()</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="56-不⽤else和if实现计算器"><a href="#56-不⽤else和if实现计算器" class="headerlink" title="56 不⽤else和if实现计算器"></a>56 不⽤else和if实现计算器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculator</span>(<span class="params">a, b, k</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span>: add,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>: sub,</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span>: mul,</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: truediv,</span><br><span class="line">        <span class="string">&#x27;**&#x27;</span>: <span class="built_in">pow</span></span><br><span class="line">    &#125;[k](a, b)</span><br><span class="line">calculator(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;+&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">calculator(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;**&#x27;</span>) <span class="comment"># 81</span></span><br></pre></td></tr></table></figure><h2 id="57-链式操作"><a href="#57-链式操作" class="headerlink" title="57 链式操作"></a>57 链式操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> (add, sub)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_or_sub</span>(<span class="params">a, b, oper</span>):</span><br><span class="line">    <span class="keyword">return</span> (add <span class="keyword">if</span> oper == <span class="string">&#x27;+&#x27;</span> <span class="keyword">else</span> sub)(a, b)</span><br><span class="line">add_or_sub(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;-&#x27;</span>) <span class="comment"># -1</span></span><br><span class="line">add_or_sub(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;+&#x27;</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="58-交换两元素"><a href="#58-交换两元素" class="headerlink" title="58 交换两元素"></a>58 交换两元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> b, a</span><br><span class="line"><span class="built_in">print</span>(swap(<span class="number">1</span>, <span class="number">0</span>)) <span class="comment"># (0,1)</span></span><br></pre></td></tr></table></figure><h2 id="59-去最求平均"><a href="#59-去最求平均" class="headerlink" title="59 去最求平均"></a>59 去最求平均</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">score_mean</span>(<span class="params">lst</span>):</span><br><span class="line">    lst.sort()</span><br><span class="line">    lst2=lst[<span class="number">1</span>:(<span class="built_in">len</span>(lst)-<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>((<span class="built_in">sum</span>(lst2)/<span class="built_in">len</span>(lst2)),<span class="number">1</span>)</span><br><span class="line">lst=[<span class="number">9.1</span>, <span class="number">9.0</span>,<span class="number">8.1</span>, <span class="number">9.7</span>, <span class="number">19</span>,<span class="number">8.2</span>, <span class="number">8.6</span>,<span class="number">9.8</span>]</span><br><span class="line">score_mean(lst) <span class="comment"># 9.1</span></span><br></pre></td></tr></table></figure><h2 id="60-打印99乘法表"><a href="#60-打印99乘法表" class="headerlink" title="60 打印99乘法表"></a>60 打印99乘法表</h2><p>打印出如下格式的乘法表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span> <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span> <span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span> <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span> <span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span> <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span> <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span> <span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span> <span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span> <span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span> <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span> <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span> <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span> <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span> <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span> <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span> <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span> <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span> <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span> <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span> <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span> <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span> <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span> <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span> <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span> <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span> <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span> <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span> <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span> <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span> <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span> <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span> <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span> <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span> <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span> <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span> <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><p>⼀共有10 ⾏，第 i ⾏的第 j 列等于： j*i，</p><p>其中,</p><p>i 取值范围： 1&lt;&#x3D;i&lt;&#x3D;9</p><p>j 取值范围： 1&lt;&#x3D;j&lt;&#x3D;i</p><p>根据 例⼦分析 的语⾔描述，转化为如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>,end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="61-全展开"><a href="#61-全展开" class="headerlink" title="61 全展开"></a>61 全展开</h2><p>对于如下数组：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]]</span><br></pre></td></tr></table></figure><p>如何完全展开成⼀维的。这个⼩例⼦实现的 flatten是递归版，两个参数分别表⽰带展开的数组，输出<br>数组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatten</span>(<span class="params">lst, out_lst=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> out_lst <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        out_lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(i, Iterable): <span class="comment"># 判断i是否可迭代</span></span><br><span class="line">            flatten(i, out_lst) <span class="comment"># 尾数递归</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out_lst.append(i) <span class="comment"># 产⽣结果</span></span><br><span class="line">    <span class="keyword">return</span> out_lst</span><br></pre></td></tr></table></figure><p>调⽤ flatten:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(flatten([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]))</span><br><span class="line"><span class="built_in">print</span>(flatten([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]], [<span class="number">6</span>,<span class="number">7</span>]))</span><br><span class="line"><span class="built_in">print</span>(flatten([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]]))</span><br></pre></td></tr></table></figure><h2 id="62-列表等分"><a href="#62-列表等分" class="headerlink" title="62 列表等分"></a>62 列表等分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">lst, size</span>):</span><br><span class="line">    <span class="keyword">if</span> size &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [lst]</span><br><span class="line">    <span class="keyword">return</span> [lst[i * size:(i+<span class="number">1</span>)*size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ceil(<span class="built_in">len</span>(lst) / size))]</span><br><span class="line">r = divide([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [[1, 3], [5, 7], [9]]</span></span><br><span class="line">r = divide([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [[1, 3, 5, 7, 9]]</span></span><br><span class="line">r = divide([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], -<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [[1, 3, 5, 7, 9]]</span></span><br></pre></td></tr></table></figure><h2 id="63-列表压缩"><a href="#63-列表压缩" class="headerlink" title="63 列表压缩"></a>63 列表压缩</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_false</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">bool</span>, lst))</span><br><span class="line">lst = [<span class="literal">None</span>, <span class="number">0</span>, <span class="literal">False</span>, <span class="string">&#x27;&#x27;</span>, [], <span class="string">&#x27;ok&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">r = filter_false(lst)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;ok&#x27;, [1, 2]]</span></span><br></pre></td></tr></table></figure><h2 id="64-更长列表"><a href="#64-更长列表" class="headerlink" title="64 更长列表"></a>64 更长列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_length</span>(<span class="params">*lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(*lst, key=<span class="keyword">lambda</span> v: <span class="built_in">len</span>(v))</span><br><span class="line">r = max_length([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;更长的列表是<span class="subst">&#123;r&#125;</span>&#x27;</span>) <span class="comment"># [4, 5, 6, 7]</span></span><br><span class="line">r = max_length([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;更长的列表是<span class="subst">&#123;r&#125;</span>&#x27;</span>) <span class="comment"># [4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><h2 id="65-求众数"><a href="#65-求众数" class="headerlink" title="65 求众数"></a>65 求众数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">top1</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(lst, default=<span class="string">&#x27;列表为空&#x27;</span>, key=<span class="keyword">lambda</span> v: lst.count(v))</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">r = top1(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;lst&#125;</span>中出现次数最多的元素为:<span class="subst">&#123;r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="66-多表之最"><a href="#66-多表之最" class="headerlink" title="66 多表之最"></a>66 多表之最</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_lists</span>(<span class="params">*lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(*lst, key=<span class="keyword">lambda</span> v: <span class="built_in">max</span>(v)))</span><br><span class="line">r = max_lists([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><h2 id="67-列表查重"><a href="#67-列表查重" class="headerlink" title="67 列表查重"></a>67 列表查重</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_duplicates</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(lst) == <span class="built_in">len</span>(<span class="built_in">set</span>(lst))</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">has_duplicates(x) <span class="comment"># False</span></span><br><span class="line">has_duplicates(y) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="68-列表反转"><a href="#68-列表反转" class="headerlink" title="68 列表反转"></a>68 列表反转</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">return</span> lst[::-<span class="number">1</span>]</span><br><span class="line">r = reverse([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [2, 1, 4, 3, -2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="69-浮点数等差数列"><a href="#69-浮点数等差数列" class="headerlink" title="69 浮点数等差数列"></a>69 浮点数等差数列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rang</span>(<span class="params">start, stop, n</span>):</span><br><span class="line">    start,stop,n = <span class="built_in">float</span>(<span class="string">&#x27;%.2f&#x27;</span> % start), <span class="built_in">float</span>(<span class="string">&#x27;%.2f&#x27;</span> % stop),<span class="built_in">int</span>(<span class="string">&#x27;%.d&#x27;</span> % n)</span><br><span class="line">    step = (stop-start)/n</span><br><span class="line">    lst = [start]</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        start,n = start+step,n-<span class="number">1</span></span><br><span class="line">        lst.append(<span class="built_in">round</span>((start), <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line">rang(<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>) <span class="comment"># [1.0, 1.7, 2.4, 3.1, 3.8, 4.5, 5.2, 5.9, 6.6, 7.3, 8.0]</span></span><br></pre></td></tr></table></figure><h2 id="71-map实现向量运算"><a href="#71-map实现向量运算" class="headerlink" title="71 map实现向量运算"></a>71 map实现向量运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多序列运算函数—map(function,iterabel,iterable2)</span></span><br><span class="line">lst1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lst2=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:x*y+<span class="number">1</span>,lst1,lst2))</span><br><span class="line"><span class="comment">### [4, 9, 16, 25, 16, 13]</span></span><br></pre></td></tr></table></figure><h2 id="72-值最⼤的字典"><a href="#72-值最⼤的字典" class="headerlink" title="72 值最⼤的字典"></a>72 值最⼤的字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_pairs</span>(<span class="params">dic</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(dic) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> dic</span><br><span class="line">    max_val = <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> v: v[<span class="number">1</span>], dic.items()))</span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> item <span class="keyword">in</span> dic.items() <span class="keyword">if</span> item[<span class="number">1</span>] == max_val]</span><br><span class="line">r = max_pairs(&#123;<span class="string">&#x27;a&#x27;</span>: -<span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [(&#x27;b&#x27;, 5), (&#x27;d&#x27;, 5)]</span></span><br></pre></td></tr></table></figure><h2 id="73-合并两个字典"><a href="#73-合并两个字典" class="headerlink" title="73 合并两个字典"></a>73 合并两个字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_dict</span>(<span class="params">dic1, dic2</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;**dic1, **dic2&#125; <span class="comment"># python3.5后⽀持的⼀⾏代码实现合并字典</span></span><br><span class="line">merge_dict(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;) <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="74-topn字典"><a href="#74-topn字典" class="headerlink" title="74 topn字典"></a>74 topn字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> nlargest</span><br><span class="line"><span class="comment"># 返回字典d前n个最⼤值对应的键</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topn_dict</span>(<span class="params">d, n</span>):</span><br><span class="line">    <span class="keyword">return</span> nlargest(n, d, key=<span class="keyword">lambda</span> k: d[k])</span><br><span class="line">topn_dict(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">10</span>&#125;, <span class="number">3</span>) <span class="comment"># [&#x27;a&#x27;, &#x27;d&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="75-异位词"><a href="#75-异位词" class="headerlink" title="75 异位词"></a>75 异位词</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 检查两个字符串是否 相同字母异序词，简称：互为变位词</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">anagram</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">return</span> Counter(str1) == Counter(str2)</span><br><span class="line">anagram(<span class="string">&#x27;eleven+two&#x27;</span>, <span class="string">&#x27;twelve+one&#x27;</span>) <span class="comment"># True 这是⼀对神器的变位词</span></span><br><span class="line">anagram(<span class="string">&#x27;eleven&#x27;</span>, <span class="string">&#x27;twelve&#x27;</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="76-逻辑上合并字典"><a href="#76-逻辑上合并字典" class="headerlink" title="76 逻辑上合并字典"></a>76 逻辑上合并字典</h2><p>(1) 两种合并字典⽅法 这是⼀般的字典合并写法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span> &#125;</span><br><span class="line">dic2 = &#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">4</span> &#125;</span><br><span class="line">merged1 = &#123;**dic1, **dic2&#125; <span class="comment"># &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 3, &#x27;z&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure><p>修改merged[‘x’]&#x3D;10，dic1中的x值 不变 ， merged是重新⽣成的⼀个 新字典 。</p><p>但是， ChainMap却不同，它在内部创建了⼀个容纳这些字典的列表。因此使⽤ChainMap合并字典，<br>修改merged[‘x’]&#x3D;10后，dic1中的x值 改变 ，如下所⽰：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">merged2 = ChainMap(dic1,dic2)</span><br><span class="line"><span class="built_in">print</span>(merged2) <span class="comment"># ChainMap(&#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;, &#123;&#x27;y&#x27;: 3, &#x27;z&#x27;: 4&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="77-命名元组提⾼可读性"><a href="#77-命名元组提⾼可读性" class="headerlink" title="77 命名元组提⾼可读性"></a>77 命名元组提⾼可读性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]) <span class="comment"># 定义名字为Point的元祖，字段属性有x,y,z</span></span><br><span class="line">lst = [Point(<span class="number">1.5</span>, <span class="number">2</span>, <span class="number">3.0</span>), Point(-<span class="number">0.3</span>, -<span class="number">1.0</span>, <span class="number">2.1</span>), Point(<span class="number">1.3</span>, <span class="number">2.8</span>, -<span class="number">2.5</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>].y - lst[<span class="number">1</span>].y)</span><br></pre></td></tr></table></figure><p>使⽤命名元组写出来的代码可读性更好，尤其处理上百上千个属性时作⽤更加凸显。</p><h2 id="78-样本抽样"><a href="#78-样本抽样" class="headerlink" title="78 样本抽样"></a>78 样本抽样</h2><p>使⽤ sample抽样，如下例⼦从100个样本中随机抽样10个。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,sample</span><br><span class="line">lst = [randint(<span class="number">0</span>,<span class="number">50</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">5</span>])<span class="comment"># [38, 19, 11, 3, 6]</span></span><br><span class="line">lst_sample = sample(lst,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(lst_sample) <span class="comment"># [33, 40, 35, 49, 24, 15, 48, 29, 37, 24]</span></span><br></pre></td></tr></table></figure><h2 id="79-重洗数据集"><a href="#79-重洗数据集" class="headerlink" title="79 重洗数据集"></a>79 重洗数据集</h2><p>使⽤ shuffle⽤来重洗数据集，值得注意 是对lst就地(in place)洗牌，节省存储空间</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line">lst = [randint(<span class="number">0</span>,<span class="number">50</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst[:<span class="number">5</span>]) <span class="comment"># [50, 3, 48, 1, 26]</span></span><br></pre></td></tr></table></figure><h2 id="80-10个均匀分布的坐标点"><a href="#80-10个均匀分布的坐标点" class="headerlink" title="80 10个均匀分布的坐标点"></a>80 10个均匀分布的坐标点</h2><p>random模块中的 uniform(a,b)⽣成[a,b)内的⼀个随机数，如下⽣成10个均匀分布的⼆维坐标点</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line">[(uniform(<span class="number">0</span>,<span class="number">10</span>),uniform(<span class="number">0</span>,<span class="number">10</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><h2 id="81-10个⾼斯分布的坐标点"><a href="#81-10个⾼斯分布的坐标点" class="headerlink" title="81 10个⾼斯分布的坐标点"></a>81 10个⾼斯分布的坐标点</h2><p>random模块中的 gauss(u,sigma)⽣成均值为u, 标准差为sigma的满⾜⾼斯分布的值，如下⽣成10个<br>⼆维坐标点，样本误差(y-2*x-1)满⾜均值为0，标准差为1的⾼斯分布：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> gauss</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">y = [<span class="number">2</span>*xi+<span class="number">1</span>+gauss(<span class="number">0</span>,<span class="number">1</span>) <span class="keyword">for</span> xi <span class="keyword">in</span> x]</span><br><span class="line">points = <span class="built_in">list</span>(<span class="built_in">zip</span>(x,y))</span><br><span class="line">points</span><br></pre></td></tr></table></figure><h2 id="82-chain⾼效串联多个容器对象"><a href="#82-chain⾼效串联多个容器对象" class="headerlink" title="82 chain⾼效串联多个容器对象"></a>82 chain⾼效串联多个容器对象</h2><p>chain函数串联a和b，兼顾内存效率同时写法更加优雅。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">b = (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain(a,b):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="83-操作函数对象"><a href="#83-操作函数对象" class="headerlink" title="83 操作函数对象"></a>83 操作函数对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i\&#x27;m f&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i\&#x27;m g&quot;</span>)</span><br><span class="line"></span><br><span class="line">[f,g][<span class="number">0</span>]()</span><br></pre></td></tr></table></figure><p>创建函数对象的list，根据想要调⽤的index，⽅便统⼀调⽤。</p><h2 id="84-⽣成逆序序列"><a href="#84-⽣成逆序序列" class="headerlink" title="84 ⽣成逆序序列"></a>84 ⽣成逆序序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>,-<span class="number">1</span>,-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>第三个参数为负时，表⽰从第⼀个参数开始递减，终⽌到第⼆个参数(不包括此边界)</p><h2 id="85-函数的五类参数使⽤例⼦"><a href="#85-函数的五类参数使⽤例⼦" class="headerlink" title="85 函数的五类参数使⽤例⼦"></a>85 函数的五类参数使⽤例⼦</h2><p>python五类参数：位置参数，关键字参数，默认参数，可变位置或关键字参数的使⽤。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,*b,c=<span class="number">10</span>,**d</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>,b:<span class="subst">&#123;b&#125;</span>,c:<span class="subst">&#123;c&#125;</span>,d:<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>默认参数c不能位于可变关键字d后:</p><p>调用f:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,width=<span class="number">10</span>,height=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>可变位置参数 b 实参后被解析为元组 (2,5);⽽c取得默认值10; d被解析为字典.<br>再次调⽤f:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(a=<span class="number">1</span>,c=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>a&#x3D;1传⼊时a就是关键字参数，b,d都未传值，c被传⼊12，⽽⾮默认值。<br>注意观察参数 a , 既可以 f(1),也可以 f(a&#x3D;1) 其可读性⽐第⼀种更好，建议使⽤f(a&#x3D;1)。如果要强制使<br>⽤ f(a&#x3D;1)，需要在前⾯添加⼀个星号:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">*,a,*b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>,b:<span class="subst">&#123;b&#125;</span>&#x27;</span>)   </span><br></pre></td></tr></table></figure><p>此时f(1)调⽤，将会报错： TypeError: f() takes 0 positional arguments but 1 was given<br>只能 f(a&#x3D;1)才能OK.<br>说明前⾯的 * 发挥作⽤，它变为只能传⼊关键字参数，那么如何查看这个参数的类型呢？借助python<br>的 inspect模块：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,val <span class="keyword">in</span> signature(f).parameters.items():</span><br><span class="line">    <span class="built_in">print</span>(name,val.kind)</span><br></pre></td></tr></table></figure><p>可看到参数 a 的类型为 KEYWORD_ONLY，也就是仅仅为关键字参数。</p><p>但是，如果f定义为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,*b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>,b:<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>查看参数类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name,val <span class="keyword">in</span> signature(f).parameters.items():</span><br><span class="line">    <span class="built_in">print</span>(name,val.kind)</span><br></pre></td></tr></table></figure><p>可以看到参数 a 既可以是位置参数也可是关键字参数</p><h2 id="86-使⽤slice对象"><a href="#86-使⽤slice对象" class="headerlink" title="86 使⽤slice对象"></a>86 使⽤slice对象</h2><p>⽣成关于蛋糕的序列cake1：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cake1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>))</span><br><span class="line">b = cake1[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">b <span class="comment"># [4, 2]</span></span><br><span class="line">cake1 <span class="comment"># [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>再⽣成⼀个序列：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">cake2 = [randint(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 同样以间隔为2切前10个元素，得到切⽚d</span></span><br><span class="line">d = cake2[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">d</span><br></pre></td></tr></table></figure><p>你看，我们使⽤同⼀种切法，分别切开两个蛋糕cake1,cake2. 后来发现这种切法 极为经典 ，又拿它去切<br>更多的容器对象。</p><p>那么，为什么不把这种切法封装为⼀个对象呢？于是就有了slice对象。</p><p>定义slice对象极为简单，如把上⾯的切法定义成slice对象：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">perfect_cake_slice_way = <span class="built_in">slice</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#去切cake1</span></span><br><span class="line">cake1_slice = cake1[perfect_cake_slice_way]</span><br><span class="line">cake2_slice = cake2[perfect_cake_slice_way]</span><br><span class="line"></span><br><span class="line">cake1_slice <span class="comment"># [4, 2]</span></span><br><span class="line">cake2_slice <span class="comment"># [5, 99, 16, 3, 17]</span></span><br></pre></td></tr></table></figure><p>与上⾯的结果⼀致。</p><p>对于逆向序列切⽚， slice对象⼀样可⾏：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">a_ = a[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">named_slice = <span class="built_in">slice</span>(<span class="number">5</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">a_slice = a[named_slice]</span><br><span class="line">a_ <span class="comment"># [0, 9, 7, 5]</span></span><br><span class="line">a_slice <span class="comment"># [0, 9, 7, 5]</span></span><br></pre></td></tr></table></figure><p>频繁使⽤同⼀切⽚的操作可使⽤slice对象抽出来，复⽤的同时还能提⾼代码可读性。</p><h2 id="87-lambda-函数的动画演⽰"><a href="#87-lambda-函数的动画演⽰" class="headerlink" title="87 lambda 函数的动画演⽰"></a>87 lambda 函数的动画演⽰</h2><p>有些读者反映， lambda函数不太会⽤，问我能不能解释⼀下。</p><p>⽐如，下⾯求这个 lambda函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_len</span>(<span class="params">*lists</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(*lists, key=<span class="keyword">lambda</span> v: <span class="built_in">len</span>(v))</span><br></pre></td></tr></table></figure><p>有两点疑惑：</p><pre><code>1.参数 v 的取值？2.lambda函数有返回值吗？如果有，返回值是多少？</code></pre><p>调⽤上⾯函数，求出以下三个最长的列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = max_len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;更长的列表是<span class="subst">&#123;r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>程序完整运⾏过程，动画演示如下：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161552959.png"></p><p>结论：</p><p>1.参数v的可能取值为 *lists，也就是 tuple 的⼀个元素。</p><p>2.lambda函数返回值，等于 lambda v 冒号后表达式的返回值。</p><h2 id="88-粘性之禅"><a href="#88-粘性之禅" class="headerlink" title="88 粘性之禅"></a>88 粘性之禅</h2><p>7 ⾏代码够烧脑，不信试试~~</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">*args, repeat=<span class="number">1</span></span>):</span><br><span class="line">    pools = [<span class="built_in">tuple</span>(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(prod)</span><br></pre></td></tr></table></figure><p>调⽤函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rtn = product(<span class="string">&#x27;xyz&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, repeat=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(rtn))</span><br></pre></td></tr></table></figure><p>快去⼿动敲敲，看看输出啥吧~~</p><h2 id="89-元类"><a href="#89-元类" class="headerlink" title="89 元类"></a>89 元类</h2><p>xiaoming, xiaohong, xiaozhang 都是学⽣，这类群体叫做 Student.</p><p>Python 定义类的常见⽅法，使⽤关键字 class</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>xiaoming, xiaohong, xiaozhang 是类的实例，则：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming = Student()</span><br><span class="line">xiaohong = Student()</span><br><span class="line">xiaozhang = Student()</span><br></pre></td></tr></table></figure><p>创建后，xiaoming 的 <strong>class</strong> 属性，返回的便是 Student类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming.__class__</span><br></pre></td></tr></table></figure><p>问题在于， Student 类有 __class__属性，如果有，返回的又是什么？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaoming.__class__.__class__</span><br></pre></td></tr></table></figure><p>哇，程序没报错，返回 type</p><p>那么，我们不妨猜测： Student 类，类型就是 type</p><p>换句话说， Student类就是⼀个对象，它的类型就是 type</p><p>所以，Python 中⼀切皆对象，类也是对象</p><p>Python 中，将描述 Student 类的类被称为：元类。</p><p>按照此逻辑延伸，描述元类的类被称为：元元类 ，开玩笑了~ 描述元类的类也被称为元类。</p><p>聪明的朋友会问了，既然 Student 类可创建实例，那么 type 类可创建实例吗？ 如果能，它创建的实</p><p>例就叫：类 了。 你们真聪明！</p><p>说对了， type 类⼀定能创建实例，⽐如 Student 类了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Student = <span class="built_in">type</span>(<span class="string">&#x27;Student&#x27;</span>,(),&#123;&#125;)</span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p>它与使⽤ class 关键字创建的 Student 类⼀模⼀样。</p><p>Python 的类，因为又是对象，所以和 xiaoming， xiaohong 对象操作相似。⽀持：</p><p>1.赋值</p><p>2.拷贝</p><p>3.添加属性</p><p>4.作为函数参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">StudentMirror = Student <span class="comment"># 类直接赋值 # 类直接赋值</span></span><br><span class="line">Student.class_property = <span class="string">&#x27;class_property&#x27;</span> <span class="comment"># 添加类属性</span></span><br><span class="line"><span class="built_in">hasattr</span>(Student, <span class="string">&#x27;class_property&#x27;</span>)</span><br></pre></td></tr></table></figure><p>元类，确实使⽤不是那么多，也许先了解这些，就能应付⼀些场合。就连 Python 界的领袖 Tim<br>Peters 都说：</p><p>“元类就是深度的魔法，99%的⽤户应该根本不必为此操⼼。”</p><h2 id="90-对象序列化"><a href="#90-对象序列化" class="headerlink" title="90 对象序列化"></a>90 对象序列化</h2><p>对象序列化，是指将内存中的对象转化为可存储或传输的过程。很多场景，直接⼀个类对象，传输不方便。</p><p>但是，当对象序列化后，就会更加⽅便，因为约定俗成的，接⼜间的调⽤或者发起的 web 请求，⼀般<br>使⽤ json 串传输。</p><p>实际使⽤中，⼀般对类对象序列化。先创建⼀个 Student 类型，并创建两个实例。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,**args</span>):</span><br><span class="line">        self.ids = args[<span class="string">&#x27;ids&#x27;</span>]</span><br><span class="line">        self.name = args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        self.address = args[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line">xiaoming = Student(ids = <span class="number">1</span>,name = <span class="string">&#x27;xiaoming&#x27;</span>,address = <span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line">xiaohong = Student(ids = <span class="number">2</span>,name = <span class="string">&#x27;xiaohong&#x27;</span>,address = <span class="string">&#x27;南京&#x27;</span>)</span><br></pre></td></tr></table></figure><p>导⼊ json 模块，调⽤ dump ⽅法，就会将列表对象 [xiaoming,xiaohong]，序列化到⽂件 json.js<br>中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;json.js&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump([xiaoming,xiaohong], f, default=<span class="keyword">lambda</span> obj: obj.__dict__,ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>, sort_keys=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161552843.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python⽂件、⽇期和多线程</title>
      <link href="/posts/2e473f0e/"/>
      <url>/posts/2e473f0e/</url>
      
        <content type="html"><![CDATA[<h1 id="三、Python⽂件、⽇期和多线程"><a href="#三、Python⽂件、⽇期和多线程" class="headerlink" title="三、Python⽂件、⽇期和多线程"></a>三、Python⽂件、⽇期和多线程</h1><p>[TOC]</p><p>Python⽂件IO操作涉及⽂件读写操作，获取⽂件 后缀名 ，修改后缀名，获取⽂件修改时间， 压缩⽂<br>件， 加密⽂件等操作。</p><p>Python⽇期章节，由表⽰⼤⽇期的 calendar, date模块，逐渐过渡到表⽰时间刻度更⼩的模块：<br>datetime, time模块，按照此逻辑展开。</p><p>Python 多线程 希望透过5个⼩例⼦，帮助你对多线程模型编程本质有些更清晰的认识。</p><p>m⼀共总结最常⽤的 26个关于⽂件和时间处理模块的例⼦。</p><h2 id="1-获取后缀名"><a href="#1-获取后缀名" class="headerlink" title="1 获取后缀名"></a>1 获取后缀名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_ext = os.path.splitext(<span class="string">&#x27;./demo1.py&#x27;</span>)</span><br><span class="line">front,ext = file_ext</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">front</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ext</span><br></pre></td></tr></table></figure><h2 id="2-⽂件读操作"><a href="#2-⽂件读操作" class="headerlink" title="2 ⽂件读操作"></a>2 ⽂件读操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建⽂件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    isexists = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isexists:</span><br><span class="line">        os.mkdir(path)</span><br><span class="line"><span class="comment"># 读取⽂件信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">filename</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(filename)</span><br><span class="line">    fllist = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> fllist <span class="comment"># 返回读取内容</span></span><br></pre></td></tr></table></figure><h2 id="3-⽂件写操作"><a href="#3-⽂件写操作" class="headerlink" title="3 ⽂件写操作"></a>3 ⽂件写操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写⼊⽂件信息</span></span><br><span class="line"><span class="comment"># example1</span></span><br><span class="line"><span class="comment"># w写⼊，如果⽂件存在，则清空内容后写⼊，不存在则创建</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;./test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;测试⽂件写⼊&quot;</span>))</span><br><span class="line">f.close</span><br><span class="line"><span class="comment"># example2</span></span><br><span class="line"><span class="comment"># a写⼊，⽂件存在，则在⽂件内容后追加写⼊，不存在则创建</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;./test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.write(<span class="string">&quot;测试⽂件写⼊&quot;</span>))</span><br><span class="line">f.close</span><br><span class="line"><span class="comment"># example3</span></span><br><span class="line"><span class="comment"># with关键字系统会⾃动关闭⽂件和处理异常</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;./test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello world!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-路径中的⽂件名"><a href="#4-路径中的⽂件名" class="headerlink" title="4 路径中的⽂件名"></a>4 路径中的⽂件名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_ext = os.path.split(<span class="string">&#x27;./demo1.py&#x27;</span>)</span><br><span class="line">ipath,ifile = file_ext</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ipath</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ifile</span><br></pre></td></tr></table></figure><h2 id="5-批量修改⽂件后缀"><a href="#5-批量修改⽂件后缀" class="headerlink" title="5 批量修改⽂件后缀"></a>5 批量修改⽂件后缀</h2><p>批量修改⽂件后缀</p><p>本例⼦使⽤Python的 os模块和 argparse模块，将⼯作⽬录 work_dir下所有后缀名为 old_ext的⽂<br>件修改为后缀名为 new_ext</p><p>通过本例⼦，⼤家将会⼤概清楚 argparse模块的主要⽤法。</p><p>导⼊模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><p>定义脚本参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_parser</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;⼯作⽬录中⽂件后缀名修改&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;work_dir&#x27;</span>, metavar=<span class="string">&#x27;WORK_DIR&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, nargs=<span class="number">1</span>,<span class="built_in">help</span>=<span class="string">&#x27;修改后缀名的⽂件⽬录&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;old_ext&#x27;</span>, metavar=<span class="string">&#x27;OLD_EXT&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>, nargs=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;原来的后缀&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;new_ext&#x27;</span>, metavar=<span class="string">&#x27;NEW_EXT&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>, nargs=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;新的后缀&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br></pre></td></tr></table></figure><p>后缀名批量修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">batch_rename</span>(<span class="params">work_dir, old_ext, new_ext</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传递当前⽬录，原来后缀名，新的后缀名后，批量重命名后缀</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(work_dir):</span><br><span class="line">    <span class="comment"># 获取得到⽂件后缀</span></span><br><span class="line">        split_file = os.path.splitext(filename)</span><br><span class="line">        file_ext = split_file[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 定位后缀名为old_ext 的⽂件</span></span><br><span class="line">    <span class="keyword">if</span> old_ext == file_ext:</span><br><span class="line">    <span class="comment"># 修改后⽂件的完整名称</span></span><br><span class="line">        newfile = split_file[<span class="number">0</span>] + new_ext</span><br><span class="line">    <span class="comment"># 实现重命名操作</span></span><br><span class="line">        os.rename(os.path.join(work_dir, filename),os.path.join(work_dir, newfile))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完成重命名&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(os.listdir(work_dir))</span><br></pre></td></tr></table></figure><p>实现Main</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    main函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 命令⾏参数</span></span><br><span class="line">    parser = get_parser()</span><br><span class="line">    args = <span class="built_in">vars</span>(parser.parse_args())</span><br><span class="line">    <span class="comment"># 从命令⾏参数中依次解析出参数</span></span><br><span class="line">    work_dir = args[<span class="string">&#x27;work_dir&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    old_ext = args[<span class="string">&#x27;old_ext&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> old_ext[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">        old_ext = <span class="string">&#x27;.&#x27;</span> + old_ext</span><br><span class="line">    new_ext = args[<span class="string">&#x27;new_ext&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> new_ext[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">        new_ext = <span class="string">&#x27;.&#x27;</span> + new_ext</span><br><span class="line">    batch_rename(work_dir, old_ext, new_ext)</span><br></pre></td></tr></table></figure><h2 id="6-xls批量转换成xlsx"><a href="#6-xls批量转换成xlsx" class="headerlink" title="6 xls批量转换成xlsx"></a>6 xls批量转换成xlsx</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xls_to_xlsx</span>(<span class="params">work_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    传递当前⽬录，原来后缀名，新的后缀名后，批量重命名后缀</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    old_ext, new_ext = <span class="string">&#x27;.xls&#x27;</span>, <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(work_dir):</span><br><span class="line">    <span class="comment"># 获取得到⽂件后缀</span></span><br><span class="line">        split_file = os.path.splitext(filename)</span><br><span class="line">        file_ext = split_file[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 定位后缀名为old_ext 的⽂件</span></span><br><span class="line">    <span class="keyword">if</span> old_ext == file_ext:</span><br><span class="line">    <span class="comment"># 修改后⽂件的完整名称</span></span><br><span class="line">        newfile = split_file[<span class="number">0</span>] + new_ext</span><br><span class="line">    <span class="comment"># 实现重命名操作</span></span><br><span class="line">        os.rename(os.path.join(work_dir, filename),os.path.join(work_dir, newfile))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完成重命名&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(os.listdir(work_dir))</span><br><span class="line">xls_to_xlsx(<span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-定制⽂件不同⾏"><a href="#7-定制⽂件不同⾏" class="headerlink" title="7 定制⽂件不同⾏"></a>7 定制⽂件不同⾏</h2><p>⽐较两个⽂件在哪些⾏内容不同，返回这些⾏的编号，⾏号编号从1开始。</p><p>定义统计⽂件⾏数的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计⽂件个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">statLineCnt</span>(<span class="params">statfile</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;⽂件名：&#x27;</span>+statfile)</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(statfile, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> f.readline():</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><p>统计⽂件不同之处的⼦函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># more表⽰含有更多⾏数的⽂件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff</span>(<span class="params">more, cnt, less</span>):</span><br><span class="line">    difflist = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(less, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> l:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(more, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> m:</span><br><span class="line">            lines = l.readlines()</span><br><span class="line">            <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines):</span><br><span class="line">                <span class="keyword">if</span> line.strip() != m.readline().strip():</span><br><span class="line">                    difflist.append(i)</span><br><span class="line">    <span class="keyword">if</span> cnt - i &gt; <span class="number">1</span>:</span><br><span class="line">        difflist.extend(<span class="built_in">range</span>(i + <span class="number">1</span>, cnt))</span><br><span class="line">    <span class="keyword">return</span> [no+<span class="number">1</span> <span class="keyword">for</span> no <span class="keyword">in</span> difflist]</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回的结果⾏号从1开始</span></span><br><span class="line"><span class="comment"># list表⽰fileA和fileB不同的⾏的编号</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_diff_line_nos</span>(<span class="params">fileA, fileB</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cntA = statLineCnt(fileA)</span><br><span class="line">        cntB = statLineCnt(fileB)</span><br><span class="line">        <span class="keyword">if</span> cntA &gt; cntB:</span><br><span class="line">            <span class="keyword">return</span> diff(fileA, cntA, fileB)</span><br><span class="line">        <span class="keyword">return</span> diff(fileB, cntB, fileA)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>⽐较两个⽂件A和B，拿相对较短的⽂件去⽐较，过滤⾏后的换⾏符 \n和空格。</p><p>暂未考虑某个⽂件最后可能有的多⾏空⾏等特殊情况</p><p>使⽤ file_diff_line_nos 函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="built_in">print</span>(os.getcwd())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    例⼦：</span></span><br><span class="line"><span class="string">    fileA = &quot;&#x27;hello world!!!!&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;nice to meet you&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;yes&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;no1&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;jack&#x27;&quot;</span></span><br><span class="line"><span class="string">    fileB = &quot;&#x27;hello world!!!!&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;nice to meet you&#x27;\</span></span><br><span class="line"><span class="string">            &#x27;yes&#x27; &quot;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    diff = file_diff_line_nos(<span class="string">&#x27;./data/a.txt&#x27;</span>, <span class="string">&#x27;./data/b.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(diff) <span class="comment"># [4, 5]</span></span><br></pre></td></tr></table></figure><p>关于⽂件⽐较的，实际上，在Python中有对应模块 difflib , 提供更多其他格式的⽂件更详细的⽐<br>较，⼤家可参考：</p><p><a href="https://docs.python.org/zh-cn/3.10/library/difflib.html">https://docs.python.org/zh-cn/3.10/library/difflib.html</a></p><h2 id="8-获取指定后缀名的⽂件"><a href="#8-获取指定后缀名的⽂件" class="headerlink" title="8 获取指定后缀名的⽂件"></a>8 获取指定后缀名的⽂件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_file</span>(<span class="params">work_dir,extension=<span class="string">&#x27;jpg&#x27;</span></span>):</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(work_dir):</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line">        splits = os.path.splitext(filename)</span><br><span class="line">        ext = splits[<span class="number">1</span>] <span class="comment"># 拿到扩展名</span></span><br><span class="line">        <span class="keyword">if</span> ext == <span class="string">&#x27;.&#x27;</span>+extension:</span><br><span class="line">            lst.append(filename)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line">r = find_file(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;py&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># 返回所有⽬录下的py⽂件</span></span><br></pre></td></tr></table></figure><h2 id="9-批量获取⽂件修改时间"><a href="#9-批量获取⽂件修改时间" class="headerlink" title="9 批量获取⽂件修改时间"></a>9 批量获取⽂件修改时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取⽬录下⽂件的修改时间</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前时间：<span class="subst">&#123;datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_modify_time</span>(<span class="params">indir</span>):</span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(indir): <span class="comment"># 循环⽬录和⼦⽬录</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            absfile = os.path.join(root, file)</span><br><span class="line">            modtime = datetime.fromtimestamp(os.path.getmtime(absfile))</span><br><span class="line">            now = datetime.now()</span><br><span class="line">            difftime = now-modtime</span><br><span class="line">        <span class="keyword">if</span> difftime.days &lt; <span class="number">20</span>: <span class="comment"># 条件筛选超过指定时间的⽂件</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;<span class="subst">&#123;absfile&#125;</span>修改时间</span></span><br><span class="line"><span class="string">                  [<span class="subst">&#123;modtime.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>]</span></span><br><span class="line"><span class="string">                  距今[<span class="subst">&#123;difftime.days:3d&#125;</span>天<span class="subst">&#123;difftime.seconds//<span class="number">3600</span>:2d&#125;</span>时</span></span><br><span class="line"><span class="string">                  <span class="subst">&#123;difftime.seconds%<span class="number">3600</span>//<span class="number">60</span>:2d&#125;</span>分]&quot;&quot;&quot;</span></span><br><span class="line">                  ) <span class="comment"># 打印相关信息</span></span><br><span class="line">get_modify_time(<span class="string">&#x27;./&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="10-批量压缩⽂件"><a href="#10-批量压缩⽂件" class="headerlink" title="10 批量压缩⽂件"></a>10 批量压缩⽂件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile  <span class="comment"># 导⼊zipfile,这个是⽤来做压缩和解压的Python模块；</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_zip</span>(<span class="params">start_dir</span>):</span><br><span class="line">    start_dir = start_dir  <span class="comment"># 要压缩的⽂件夹路径</span></span><br><span class="line">    file_news = start_dir + <span class="string">&#x27;.zip&#x27;</span>  <span class="comment"># 压缩后⽂件夹的名字</span></span><br><span class="line">    z = zipfile.ZipFile(file_news, <span class="string">&#x27;w&#x27;</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">    <span class="keyword">for</span> dir_path, dir_names, file_names <span class="keyword">in</span> os.walk(start_dir):</span><br><span class="line">        <span class="comment"># 这⼀句很重要，不replace的话，就从根⽬录开始复制</span></span><br><span class="line">        f_path = dir_path.replace(start_dir, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        f_path = f_path <span class="keyword">and</span> f_path + os.sep  <span class="comment"># 实现当前⽂件夹以及包含的所有⽂件的压缩</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> file_names:</span><br><span class="line">            z.write(os.path.join(dir_path, filename), f_path + filename)</span><br><span class="line">    z.close()</span><br><span class="line">    <span class="keyword">return</span> file_news</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_zip(<span class="string">&#x27;./data&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-32位加密"><a href="#11-32位加密" class="headerlink" title="11 32位加密"></a>11 32位加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 对字符串s实现32位加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_cry32</span>(<span class="params">s</span>):</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update((<span class="built_in">str</span>(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(hash_cry32(<span class="number">1</span>)) <span class="comment"># c4ca4238a0b923820dcc509a6f75849b</span></span><br><span class="line"><span class="built_in">print</span>(hash_cry32(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment"># 5d41402abc4b2a76b9719d911017c592</span></span><br></pre></td></tr></table></figure><h2 id="12-年的⽇历图"><a href="#12-年的⽇历图" class="headerlink" title="12 年的⽇历图"></a>12 年的⽇历图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">mydate = date.today()</span><br><span class="line">year_calendar_str = calendar.calendar(<span class="number">2023</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;mydate.year&#125;</span>年的⽇历图：\n<span class="subst">&#123;year_calendar_str&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="13-判断是否为闰年"><a href="#13-判断是否为闰年" class="headerlink" title="13 判断是否为闰年"></a>13 判断是否为闰年</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">mydate = date.today()</span><br><span class="line">is_leap = calendar.isleap(mydate.year)</span><br><span class="line">print_leap_str = <span class="string">&quot;%s年是闰年&quot;</span> <span class="keyword">if</span> is_leap <span class="keyword">else</span> <span class="string">&quot;%s年不是闰年\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(print_leap_str % mydate.year)</span><br></pre></td></tr></table></figure><h2 id="3-⽉的⽇历图"><a href="#3-⽉的⽇历图" class="headerlink" title="3 ⽉的⽇历图"></a>3 ⽉的⽇历图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">mydate = date.today()</span><br><span class="line">month_calendar_str = calendar.month(mydate.year, mydate.month)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;mydate.year&#125;</span>年-<span class="subst">&#123;mydate.month&#125;</span>⽉的⽇历图：\n<span class="subst">&#123;month_calendar_str&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="14-⽉有⼏天"><a href="#14-⽉有⼏天" class="headerlink" title="14 ⽉有⼏天"></a>14 ⽉有⼏天</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line">mydate = date.today()</span><br><span class="line">weekday, days = calendar.monthrange(mydate.year, mydate.month)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;mydate.year&#125;</span>年-<span class="subst">&#123;mydate.month&#125;</span>⽉的第⼀天是那⼀周的第<span class="subst">&#123;weekday&#125;</span>天\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;mydate.year&#125;</span>年-<span class="subst">&#123;mydate.month&#125;</span>⽉共有<span class="subst">&#123;days&#125;</span>天\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="15-⽉第⼀天"><a href="#15-⽉第⼀天" class="headerlink" title="15 ⽉第⼀天"></a>15 ⽉第⼀天</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line">mydate = date.today()</span><br><span class="line">month_first_day = date(mydate.year, mydate.month, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当⽉第⼀天:<span class="subst">&#123;month_first_day&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="16-⽉最后⼀天"><a href="#16-⽉最后⼀天" class="headerlink" title="16 ⽉最后⼀天"></a>16 ⽉最后⼀天</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line">mydate = date.today()</span><br><span class="line">_, days = calendar.monthrange(mydate.year, mydate.month)</span><br><span class="line">month_last_day = date(mydate.year, mydate.month, days)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当月的最后一天:<span class="subst">&#123;month_last_day&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="17-获取当前时间"><a href="#17-获取当前时间" class="headerlink" title="17 获取当前时间"></a>17 获取当前时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime</span><br><span class="line"></span><br><span class="line">today_date = date.today()</span><br><span class="line"><span class="built_in">print</span>(today_date) <span class="comment"># 2019-12-22</span></span><br><span class="line"></span><br><span class="line">today_time = datetime.today()</span><br><span class="line"><span class="built_in">print</span>(today_time) <span class="comment"># 2019-12-22 18:02:33.398894</span></span><br><span class="line"></span><br><span class="line">local_time = localtime()</span><br><span class="line"><span class="built_in">print</span>(strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, local_time)) </span><br></pre></td></tr></table></figure><h2 id="18-字符时间转时间"><a href="#18-字符时间转时间" class="headerlink" title="18 字符时间转时间"></a>18 字符时间转时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strptime</span><br><span class="line"></span><br><span class="line"><span class="comment"># parse str time to struct time</span></span><br><span class="line">struct_time = strptime(<span class="string">&#x27;2023-08-03 17:42:08&#x27;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(struct_time) <span class="comment"># struct_time类型就是time中的⼀个类</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="19-时间转字符时间"><a href="#19-时间转字符时间" class="headerlink" title="19 时间转字符时间"></a>19 时间转字符时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime, strptime, localtime</span><br><span class="line"><span class="built_in">print</span>(localtime()) <span class="comment">#这是输⼊的时间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(strftime(<span class="string">&quot;转化后的时间: %Y-%m-%d %H:%M:%S&quot;</span>, localtime()))</span><br></pre></td></tr></table></figure><h2 id="20-默认启动主线程"><a href="#20-默认启动主线程" class="headerlink" title="20 默认启动主线程"></a>20 默认启动主线程</h2><p>⼀般的，程序默认执⾏只在⼀个线程，这个线程称为主线程，例⼦演⽰如下：</p><p>导⼊线程相关的模块 threading:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><p>threading的类⽅法 current_thread()返回当前线程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = threading.current_thread()</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>所以，验证了程序默认是在 MainThead中执⾏。</p><p>t.getName()获得这个线程的名字，其他常⽤⽅法， getName()获得线程 id, is_alive()判断线程是<br>否存活等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(t.getName()) </span><br><span class="line"><span class="built_in">print</span>(t.ident) </span><br><span class="line"><span class="built_in">print</span>(t.is_alive())</span><br></pre></td></tr></table></figure><p>以上这些仅是介绍多线程的 背景知识 ，因为到⽬前为⽌，我们有且仅有⼀个”⼲活”的主线程</p><h2 id="21-创建线程"><a href="#21-创建线程" class="headerlink" title="21 创建线程"></a>21 创建线程</h2><p>创建⼀个线程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_thread = threading.Thread()</span><br></pre></td></tr></table></figure><p>创建⼀个名称为 my_thread的线程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_thread = threading.Thread(name=<span class="string">&#x27;my_thread&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建线程的⽬的是告诉它帮助我们做些什么，做些什么通过参数 target传⼊，参数类型为<br>callable，函数就是可调⽤的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_i</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打印i:%d&#x27;</span>%(i,))</span><br><span class="line">my_thread = threading.Thread(target=print_i,args=(<span class="number">1</span>,))</span><br></pre></td></tr></table></figure><p>my_thread线程已经全副武装，但是我们得按下发射按钮，启动start()，它才开始真正起飞。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_thread.start()</span><br></pre></td></tr></table></figure><p>打印结果如下，其中 args指定函数 print_i需要的参数i，类型为元祖。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">打印i:<span class="number">1</span></span><br></pre></td></tr></table></figure><p>⾄此，多线程相关的核⼼知识点，已经总结完毕。但是，仅仅知道这些，还不够！光纸上谈兵，当然远<br>远不够。</p><p>接下来，聊聊应⽤多线程编程，最本质的⼀些东西。</p><h3 id="21-1-交替获得CPU时间⽚"><a href="#21-1-交替获得CPU时间⽚" class="headerlink" title="21.1 交替获得CPU时间⽚"></a>21.1 交替获得CPU时间⽚</h3><p>为了更好解释，假定计算机是单核的，尽管对于 cpython，这个假定有些多余。<br>开辟3个线程，装到 threads中:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_time</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 在每个线程中打印5次</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)  <span class="comment"># 模拟打印前的相关处理逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前线程%s,打印结束时间为:%s&#x27;</span> %(threading.current_thread().getName(), datetime.today()))</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(name=<span class="string">&#x27;t%d&#x27;</span> % (i,), target=print_time) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><p>启动3个线程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[t.start() <span class="keyword">for</span> t <span class="keyword">in</span> threads]</span><br></pre></td></tr></table></figure><p>打印结果如下， t0, t1, t2三个线程，根据操作系统的调度算法，轮询获得CPU时间⽚，注意观察，<br>t2线程可能被连续调度，从⽽获得时间⽚。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当前线程t2,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">11.951443</span></span><br><span class="line">当前线程t0,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">11.951443</span></span><br><span class="line">当前线程t1,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">11.951443</span></span><br><span class="line">当前线程t0,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.057807</span></span><br><span class="line">当前线程t1,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.057807</span></span><br><span class="line">当前线程t2,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.057807</span></span><br><span class="line">当前线程t2,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.168408</span></span><br><span class="line">当前线程t0,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.168408</span></span><br><span class="line">当前线程t1,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.168408</span></span><br><span class="line">当前线程t2,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.277193</span></span><br><span class="line">当前线程t0,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.277193</span></span><br><span class="line">当前线程t1,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.277193</span></span><br><span class="line">当前线程t2,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.386099</span></span><br><span class="line">当前线程t1,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.386099</span></span><br><span class="line">当前线程t0,打印结束时间为:<span class="number">2023</span>-08-03 <span class="number">18</span>:05:<span class="number">12.386099</span></span><br></pre></td></tr></table></figure><h2 id="22-多线程抢夺同⼀个变量"><a href="#22-多线程抢夺同⼀个变量" class="headerlink" title="22 多线程抢夺同⼀个变量"></a>22 多线程抢夺同⼀个变量</h2><p>多线程编程，存在抢夺同⼀个变量的问题。</p><p>⽐如下⾯例⼦，创建的10个线程同时竞争全局变量 a :</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s adds a to 1: %d&#x27;</span>%(threading.current_thread().getName(),a))</span><br><span class="line">threads = [threading.Thread(name=<span class="string">&#x27;t%d&#x27;</span>%(i,),target=add1) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">[t.start() <span class="keyword">for</span> t <span class="keyword">in</span> threads]</span><br></pre></td></tr></table></figure><p>执⾏结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t0 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t1 adds a to <span class="number">1</span>: <span class="number">2</span></span><br><span class="line">t2 adds a to <span class="number">1</span>: <span class="number">3</span></span><br><span class="line">t3 adds a to <span class="number">1</span>: <span class="number">4</span></span><br><span class="line">t4 adds a to <span class="number">1</span>: <span class="number">5</span></span><br><span class="line">t5 adds a to <span class="number">1</span>: <span class="number">6</span></span><br><span class="line">t6 adds a to <span class="number">1</span>: <span class="number">7</span></span><br><span class="line">t7 adds a to <span class="number">1</span>: <span class="number">8</span></span><br><span class="line">t8 adds a to <span class="number">1</span>: <span class="number">9</span></span><br><span class="line">t9 adds a to <span class="number">1</span>: <span class="number">10</span></span><br></pre></td></tr></table></figure><p>结果⼀切正常，每个线程执⾏⼀次，把 a 的值加1，最后 a 变为10，⼀切正常。</p><p>运⾏上⾯代码⼗⼏遍，⼀切也都正常。</p><p>所以，我们能下结论：这段代码是线程安全的吗？</p><p>NO！</p><p>多线程中，只要存在同时读取和修改⼀个全局变量的情况，如果不采取其他措施，就⼀定不是安全的线程。</p><p>尽管，有时，某些情况的资源竞争，暴露出问题的概率 极低极低 ：</p><p>本例中，如果线程0 在修改a后，其他某些线程还是get到的是没有修改前的值，就会暴露问题。</p><p>但是在本例中， a &#x3D; a + 1 这种修改操作，花费的时间太短了，短到我们⽆法想象。所以，线程间轮询执⾏时，都能get到最新的a值。所以，暴露问题的概率就变得微乎其微。</p><h2 id="23-代码稍作改动，叫问题暴露出来"><a href="#23-代码稍作改动，叫问题暴露出来" class="headerlink" title="23 代码稍作改动，叫问题暴露出来"></a>23 代码稍作改动，叫问题暴露出来</h2><p>只要弄明⽩问题暴露的原因，叫问题出现还是不困难的。</p><p>想象数据库的写⼊操作，⼀般需要耗费我们可以感知的时间。</p><p>为了模拟这个写⼊动作，简化期间，我们只需要延长修改变量 a 的时间，问题很容易就会还原出来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    tmp = a + <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>) <span class="comment"># 延时0.2秒，模拟写⼊所需时间</span></span><br><span class="line">    a = tmp</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s adds a to 1: %d&#x27;</span>%(threading.current_thread().getName(),a))</span><br><span class="line">threads = [threading.Thread(name=<span class="string">&#x27;t%d&#x27;</span>%(i,),target=add1) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">[t.start() <span class="keyword">for</span> t <span class="keyword">in</span> threads]</span><br></pre></td></tr></table></figure><p>重新运⾏代码，只需⼀次，问题⽴马完全暴露，结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t6 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t2 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t9 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t1 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t8 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t0 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t3 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t4 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t7 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t5 adds a to <span class="number">1</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>看到，10个线程全部运⾏后， a 的值只相当于⼀个线程执⾏的结果。</p><p>下⾯分析，为什么会出现上⾯的结果：</p><p>这是⼀个很有说服⼒的例⼦，因为在修改a前，有0.2秒的休眠时间，某个线程延时后，CPU⽴即分配计</p><p>算资源给其他线程。直到分配给所有线程后，根据结果反映出，0.2秒的休眠时长还没耗尽，这样每个线程get到的a值都是0，所以才出现上⾯的结果。</p><p>以上最核⼼的三⾏代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = a + <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">0.2</span>) <span class="comment"># 延时0.2秒，模拟写⼊所需时间</span></span><br><span class="line">a = tmp</span><br></pre></td></tr></table></figure><h2 id="24-加上⼀把锁，避免以上情况出现"><a href="#24-加上⼀把锁，避免以上情况出现" class="headerlink" title="24 加上⼀把锁，避免以上情况出现"></a>24 加上⼀把锁，避免以上情况出现</h2><p>知道问题出现的原因后，要想修复问题，也没那么复杂。</p><p>通过python中提供的锁机制，某段代码只能单线程执⾏时，上锁，其他线程等待，直到释放锁后，其他</p><p>线程再争锁，执⾏代码，释放锁，重复以上。</p><p>创建⼀把锁 locka:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">locka = threading.Lock()</span><br></pre></td></tr></table></figure><p>通过 locka.acquire() 获得锁，通过 locka.release()释放锁，它们之间的这些代码，只能单线程<br>执⾏。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        locka.acquire() <span class="comment"># 获得锁</span></span><br><span class="line">        tmp = a + <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>) <span class="comment"># 延时0.2秒，模拟写⼊所需时间</span></span><br><span class="line">        a = tmp</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        locka.release() <span class="comment"># 释放锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s adds a to 1: %d&#x27;</span>%(threading.current_thread().getName(),a))</span><br><span class="line">threads = [threading.Thread(name=<span class="string">&#x27;t%d&#x27;</span>%(i,),target=add1) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">[t.start() <span class="keyword">for</span> t <span class="keyword">in</span> threads]</span><br></pre></td></tr></table></figure><p>执⾏结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t0 adds a to <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">t1 adds a to <span class="number">1</span>: <span class="number">2</span></span><br><span class="line">t2 adds a to <span class="number">1</span>: <span class="number">3</span></span><br><span class="line">t3 adds a to <span class="number">1</span>: <span class="number">4</span></span><br><span class="line">t4 adds a to <span class="number">1</span>: <span class="number">5</span></span><br><span class="line">t5 adds a to <span class="number">1</span>: <span class="number">6</span></span><br><span class="line">t6 adds a to <span class="number">1</span>: <span class="number">7</span></span><br><span class="line">t7 adds a to <span class="number">1</span>: <span class="number">8</span></span><br><span class="line">t8 adds a to <span class="number">1</span>: <span class="number">9</span></span><br><span class="line">t9 adds a to <span class="number">1</span>: <span class="number">10</span></span><br></pre></td></tr></table></figure><p>⼀起正常，其实这已经是单线程顺序执⾏了，就本例⼦⽽⾔，已经失去多线程的价值，并且还带来了因为线程创建开销，浪费时间的副作⽤。</p><p>程序中只有⼀把锁，通过 try…finally还能确保不发⽣死锁。但是，当程序中启⽤多把锁，还是很容易发⽣死锁。</p><p>注意使⽤场合，避免死锁，是我们在使⽤多线程开发时需要注意的⼀些问题。</p><h2 id="25-1-分钟掌握-time-模块"><a href="#25-1-分钟掌握-time-模块" class="headerlink" title="25 1 分钟掌握 time 模块"></a>25 1 分钟掌握 time 模块</h2><p>time 模块提供时间相关的类和函数</p><p>记住⼀个类： struct_time，9 个整数组成的元组</p><p>记住下⾯ 5 个最常⽤函数</p><p>⾸先导⼊ time模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><h3 id="1-此时此刻时间浮点数"><a href="#1-此时此刻时间浮点数" class="headerlink" title="1 此时此刻时间浮点数"></a>1 此时此刻时间浮点数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seconds = time.time()</span><br><span class="line">seconds</span><br></pre></td></tr></table></figure><h3 id="2-时间数组"><a href="#2-时间数组" class="headerlink" title="2 时间数组"></a>2 时间数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">local_time = time.localtime(seconds)</span><br><span class="line">local_time</span><br></pre></td></tr></table></figure><h3 id="3-时间字符串"><a href="#3-时间字符串" class="headerlink" title="3 时间字符串"></a>3 时间字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_time = time.asctime(local_time)</span><br><span class="line">str_time</span><br></pre></td></tr></table></figure><h3 id="4-格式化时间字符串"><a href="#4-格式化时间字符串" class="headerlink" title="4 格式化时间字符串"></a>4 格式化时间字符串</h3><p>time.strftime 语义： string format time</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">format_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,local_time)</span><br><span class="line">format_time</span><br></pre></td></tr></table></figure><h3 id="5-字符时间转时间数组"><a href="#5-字符时间转时间数组" class="headerlink" title="5 字符时间转时间数组"></a>5 字符时间转时间数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_to_struct = time.strptime(format_time,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">str_to_struct</span><br></pre></td></tr></table></figure><p>最后再记住常⽤字符串格式</p><p>常⽤字符串格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%Y Year <span class="keyword">with</span> century <span class="keyword">as</span> a decimal number.</span><br><span class="line">%m Month <span class="keyword">as</span> a decimal number [01,<span class="number">12</span>].</span><br><span class="line">%d Day of the month <span class="keyword">as</span> a decimal number [01,<span class="number">31</span>].</span><br><span class="line">%H Hour (<span class="number">24</span>-hour clock) <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">23</span>].</span><br><span class="line">%M Minute <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">59</span>].</span><br><span class="line">%S Second <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">61</span>].</span><br><span class="line">%z Time zone offset <span class="keyword">from</span> UTC.</span><br><span class="line">%a Locale<span class="string">&#x27;s abbreviated weekday name.</span></span><br><span class="line"><span class="string">%A Locale&#x27;</span>s full weekday name.</span><br><span class="line">%b Locale<span class="string">&#x27;s abbreviated month name.</span></span><br></pre></td></tr></table></figure><h2 id="26-4G-内存处理-10G-⼤⼩的⽂件"><a href="#26-4G-内存处理-10G-⼤⼩的⽂件" class="headerlink" title="26 4G 内存处理 10G ⼤⼩的⽂件"></a>26 4G 内存处理 10G ⼤⼩的⽂件</h2><p>4G 内存处理 10G ⼤⼩的⽂件，单机怎么做？</p><p>下⾯的讨论基于的假定：可以单独处理⼀⾏数据，⾏间数据相关性为零。</p><p>⽅法⼀：</p><p>仅使⽤ Python 内置模板，逐⾏读取到内存。</p><p>使⽤ yield，好处是解耦读取操作和处理操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">python_read</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">yield</span> line  </span><br></pre></td></tr></table></figure><p>以上每次读取⼀⾏，逐⾏迭代，逐⾏处理数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g = python_read(<span class="string">&#x27;./data/clean.dat&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> g:</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="comment"># process c</span></span><br></pre></td></tr></table></figure><p>⽅法⼆：</p><p>⽅法⼀有缺点，逐⾏读⼊，频繁的 IO 操作拖累处理效率。是否有⼀次 IO ，读取多⾏的⽅法？</p><p>pandas 包 read_csv 函数，参数有 38 个之多，功能⾮常强⼤。</p><p>关于单机处理⼤⽂件， read_csv 的 chunksize 参数能做到，设置为 5 ， 意味着⼀次读取 5 ⾏。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pandas_read</span>(<span class="params">filename,sep=<span class="string">&#x27;,&#x27;</span>,chunksize=<span class="number">5</span></span>):</span><br><span class="line">    reader = pd.read_csv(filename,sep,chunksize=chunksize)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span> reader.get_chunk()</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---Done---&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>使⽤如同⽅法⼀：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g = pandas_read(<span class="string">&#x27;./data/clean.dat&#x27;</span>,sep=<span class="string">&quot;::&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> g:</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="comment"># process c</span></span><br></pre></td></tr></table></figure><p>以上就是单机处理⼤⽂件的两个⽅法，推荐使⽤⽅法⼆，更加灵活。除了⼯作中会⽤到，⾯试中也有时<br>被问到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串和正则</title>
      <link href="/posts/5cfc884b/"/>
      <url>/posts/5cfc884b/</url>
      
        <content type="html"><![CDATA[<h1 id="二-python字符串和正则"><a href="#二-python字符串和正则" class="headerlink" title="二.python字符串和正则"></a>二.python字符串和正则</h1><p>[TOC]</p><p>字符串无所不在，字符串的处理也是最常见的操作。本章节将总结和字符串处理相关的⼀切操作。主要<br>包括基本的字符串操作；⾼级字符串操作之正则。⽬前共有 25个小例⼦</p><h2 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="1 反转字符串"></a>1 反转字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(s))</span><br></pre></td></tr></table></figure><h2 id="2-字符串切⽚操作"><a href="#2-字符串切⽚操作" class="headerlink" title="2 字符串切⽚操作"></a>2 字符串切⽚操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串切⽚操作——查找替换3或5的倍数</span></span><br><span class="line">[<span class="built_in">str</span>(<span class="string">&quot;java&quot;</span>[i%<span class="number">3</span>*<span class="number">4</span>:]+<span class="string">&quot;python&quot;</span>[i%<span class="number">5</span>*<span class="number">6</span>:] <span class="keyword">or</span> i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>)]</span><br></pre></td></tr></table></figure><h2 id="3-join串联字符串"><a href="#3-join串联字符串" class="headerlink" title="3 join串联字符串"></a>3 join串联字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = [<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;13&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;14&#x27;</span>]</span><br><span class="line"><span class="string">&quot;,&quot;</span>.join(mystr)</span><br></pre></td></tr></table></figure><h2 id="4-字符串的字节长度"><a href="#4-字符串的字节长度" class="headerlink" title="4 字符串的字节长度"></a>4 字符串的字节长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">str_byte_len</span>(<span class="params">mystr</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">len</span>(mystr.encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">str_byte_len(<span class="string">&#x27;i love python&#x27;</span>) <span class="comment"># 13(个字节)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_byte_len(<span class="string">&#x27;字符&#x27;</span>) <span class="comment"># 6(个字节)</span></span><br></pre></td></tr></table></figure><p>以下是正则部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h2 id="5-查找第⼀个匹配串"><a href="#5-查找第⼀个匹配串" class="headerlink" title="5 查找第⼀个匹配串"></a>5 查找第⼀个匹配串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;i love python very much&#x27;</span></span><br><span class="line">pat = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">r = re.search(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r.span()) <span class="comment">#(7,13)</span></span><br></pre></td></tr></table></figure><h2 id="6-查找所有1的索引"><a href="#6-查找所有1的索引" class="headerlink" title="6 查找所有1的索引"></a>6 查找所有1的索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;昌吉学院信息工程学院B2101班&#x27;</span></span><br><span class="line">pat = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">r = re.finditer(pat,s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="7-d-匹配数字-0-9"><a href="#7-d-匹配数字-0-9" class="headerlink" title="7 \d 匹配数字[0-9]"></a>7 \d 匹配数字[0-9]</h2><p>findall找出全部位置的所有匹配</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;⼀共20⾏代码运⾏时间13.59s&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;\d+&#x27;</span> <span class="comment"># +表⽰匹配数字(\d表⽰数字的通⽤字符)1次或多次</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># [&#x27;20&#x27;, &#x27;13&#x27;, &#x27;59&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="8-匹配浮点数和整数"><a href="#8-匹配浮点数和整数" class="headerlink" title="8 匹配浮点数和整数"></a>8 匹配浮点数和整数</h2><p>?表⽰前⼀个字符匹配0或1次</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;⼀共20⾏代码运⾏时间13.59s&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;\d+\.?\d+&#x27;</span> <span class="comment"># ?表⽰匹配⼩数点(\.)0次或1次，这种写法有个⼩bug，不能匹配到个位数的整数</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># [&#x27;20&#x27;, &#x27;13.59&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更好的写法：</span></span><br><span class="line">pat = <span class="string">r&#x27;\d+\.\d+|\d+&#x27;</span> <span class="comment"># A|B，匹配A失败才匹配B</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="9-匹配字符串的开头"><a href="#9-匹配字符串的开头" class="headerlink" title="9 ^匹配字符串的开头"></a>9 ^匹配字符串的开头</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;This module provides regular expression matching operations similar to those found in Perl&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;^[emrt]&#x27;</span> <span class="comment"># 查找以字符e,m,r或t开始的字符串</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># [],因为字符串的开头是字符`T`，不在emrt匹配范围内，所以返回为空</span></span><br><span class="line">s2 = <span class="string">&#x27;email for me is guozhennianhua@163.com&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;^[emrt].*&#x27;</span>,s2)<span class="comment"># 匹配以e,m,r,t开始的字符串，后⾯是多个任意字符</span></span><br></pre></td></tr></table></figure><h2 id="10-re-I-忽略⼤⼩写"><a href="#10-re-I-忽略⼤⼩写" class="headerlink" title="10 re.I 忽略⼤⼩写"></a>10 re.I 忽略⼤⼩写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;That&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;t&#x27;</span></span><br><span class="line">r = re.findall(pat,s,re.I)</span><br><span class="line">r</span><br></pre></td></tr></table></figure><h2 id="11-理解compile的作⽤"><a href="#11-理解compile的作⽤" class="headerlink" title="11 理解compile的作⽤"></a>11 理解compile的作⽤</h2><p>如果要做很多次匹配，可以先编译匹配串：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;\W+&#x27;</span>) <span class="comment"># \W 匹配不是数字和字母的字符</span></span><br><span class="line">has_special_chars = pat.search(<span class="string">&#x27;ed#2@edc&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> has_special_chars:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;str contains special characters:<span class="subst">&#123;has_special_chars.group(<span class="number">0</span>)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">###输出结果:</span></span><br><span class="line"><span class="comment"># str contains special characters:#</span></span><br><span class="line"><span class="comment">### 再次使⽤pat正则编译对象 做匹配</span></span><br><span class="line">again_pattern = pat.findall(<span class="string">&#x27;guozhennianhua@163.com&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;@&#x27;</span> <span class="keyword">in</span> again_pattern:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;possibly it is an email&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="12-使⽤-捕获单词，不想带空格"><a href="#12-使⽤-捕获单词，不想带空格" class="headerlink" title="12 使⽤()捕获单词，不想带空格"></a>12 使⽤()捕获单词，不想带空格</h2><p>使⽤ ()捕获</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;This module provides regular expression matching operations similar to those found in Perl&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;\s([a-zA-Z]+)&#x27;</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r) </span><br></pre></td></tr></table></figure><p>看到提取单词中未包括第⼀个单词，使⽤ ? 表⽰前⾯字符出现0次或1次，但是此字符还有表⽰贪⼼或⾮<br>贪⼼匹配含义，使⽤时要谨慎。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat = <span class="string">r&#x27;\s?([a-zA-Z]+)&#x27;</span></span><br><span class="line">r = re.findall(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="13-split分割单词"><a href="#13-split分割单词" class="headerlink" title="13 split分割单词"></a>13 split分割单词</h2><p>使⽤以上⽅法分割单词不是简洁的，仅仅是为了演⽰。分割单词最简单还是使⽤ split函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;This module provides regular expression matching operations similar to those found in Perl&#x27;</span></span><br><span class="line">pat = <span class="string">r&#x27;\s+&#x27;</span></span><br><span class="line">r = re.split(pat,s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 上⾯这句话也可直接使⽤str⾃带的split函数：</span></span><br><span class="line">s.split(<span class="string">&#x27; &#x27;</span>) <span class="comment">#使⽤空格分隔</span></span><br></pre></td></tr></table></figure><p>但是，对于风格符更加复杂的情况，split⽆能为⼒，只能使⽤正则</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;This,,, module ; \t provides|| regular ; &#x27;</span></span><br><span class="line">words = re.split(<span class="string">&#x27;[,\s;|]+&#x27;</span>,s) <span class="comment">#这样分隔出来，最后会有⼀个空字符串</span></span><br><span class="line">words = [i <span class="keyword">for</span> i <span class="keyword">in</span> words <span class="keyword">if</span> <span class="built_in">len</span>(i)&gt;<span class="number">0</span>]</span><br><span class="line">words</span><br></pre></td></tr></table></figure><h2 id="14-match从字符串开始位置匹配"><a href="#14-match从字符串开始位置匹配" class="headerlink" title="14 match从字符串开始位置匹配"></a>14 match从字符串开始位置匹配</h2><p>注意 match, search等的不同： 1. match函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">### match</span></span><br><span class="line">mystr = <span class="string">&#x27;This&#x27;</span></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">pat.<span class="keyword">match</span>(mystr) <span class="comment"># None</span></span><br><span class="line">pat.<span class="keyword">match</span>(mystr,<span class="number">1</span>) <span class="comment"># 从位置1处开始匹配</span></span><br></pre></td></tr></table></figure><ol start="2"><li>search函数 search是从字符串的任意位置开始匹配</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;This&#x27;</span></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">pat.search(mystr)</span><br></pre></td></tr></table></figure><h2 id="15-替换匹配的⼦串"><a href="#15-替换匹配的⼦串" class="headerlink" title="15 替换匹配的⼦串"></a>15 替换匹配的⼦串</h2><p>sub函数实现对匹配⼦串的替换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content=<span class="string">&quot;hello 12345, hello 456321&quot;</span></span><br><span class="line">pat=re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>) <span class="comment">#要替换的部分</span></span><br><span class="line">m=pat.sub(<span class="string">&quot;666&quot;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(m) <span class="comment"># hello 666, hello 666</span></span><br></pre></td></tr></table></figure><h2 id="16-贪⼼捕获"><a href="#16-贪⼼捕获" class="headerlink" title="16 贪⼼捕获"></a>16 贪⼼捕获</h2><p>(.*)表⽰捕获任意多个字符，尽可能多的匹配字符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content=<span class="string">&#x27;&lt;h&gt;ddedadsad&lt;/h&gt;&lt;div&gt;graph&lt;/div&gt;bb&lt;div&gt;math&lt;/div&gt;cc&#x27;</span></span><br><span class="line">pat=re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div&gt;(.*)&lt;/div&gt;&quot;</span>) <span class="comment">#贪婪模式</span></span><br><span class="line">m=pat.findall(content)</span><br><span class="line"><span class="built_in">print</span>(m) <span class="comment">#匹配结果为： [&#x27;graph&lt;/div&gt;bb&lt;div&gt;math&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="17-⾮贪⼼捕获"><a href="#17-⾮贪⼼捕获" class="headerlink" title="17 ⾮贪⼼捕获"></a>17 ⾮贪⼼捕获</h2><p>仅添加⼀个问号( ? )，得到结果完全不同，这是⾮贪⼼匹配，通过这个例⼦体会贪⼼和⾮贪⼼的匹配的<br>不同。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content=<span class="string">&#x27;&lt;h&gt;ddedadsad&lt;/h&gt;&lt;div&gt;graph&lt;/div&gt;bb&lt;div&gt;math&lt;/div&gt;cc&#x27;</span></span><br><span class="line">pat=re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div&gt;(.*?)&lt;/div&gt;&quot;</span>)</span><br><span class="line">m=pat.findall(content)</span><br><span class="line"><span class="built_in">print</span>(m) <span class="comment"># [&#x27;graph&#x27;, &#x27;math&#x27;]</span></span><br></pre></td></tr></table></figure><p>非贪⼼捕获，见好就收。</p><h2 id="18-常⽤元字符总结"><a href="#18-常⽤元字符总结" class="headerlink" title="18 常⽤元字符总结"></a>18 常⽤元字符总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. 匹配任意字符</span><br><span class="line">^ 匹配字符串开始位置</span><br><span class="line">$ 匹配字符串中结束的位置</span><br><span class="line">* 前⾯的原⼦重复0次、1次、多次</span><br><span class="line">? 前⾯的原⼦重复0次或者1次</span><br><span class="line">+ 前⾯的原⼦重复1次或多次</span><br><span class="line">&#123;n&#125; 前⾯的原⼦出现了 n 次</span><br><span class="line">&#123;n,&#125; 前⾯的原⼦⾄少出现 n 次</span><br><span class="line">&#123;n,m&#125; 前⾯的原⼦出现次数介于 n-m 之间</span><br><span class="line">( ) 分组,需要输出的部分</span><br></pre></td></tr></table></figure><h2 id="19-常⽤通⽤字符总结"><a href="#19-常⽤通⽤字符总结" class="headerlink" title="19 常⽤通⽤字符总结"></a>19 常⽤通⽤字符总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\s 匹配空⽩字符</span><br><span class="line">\w 匹配任意字母/数字/下划线</span><br><span class="line">\W 和⼩写 w 相反，匹配任意字母/数字/下划线以外的字符</span><br><span class="line">\d 匹配⼗进制数字</span><br><span class="line">\D 匹配除了⼗进制数以外的值</span><br><span class="line">[0-9] 匹配⼀个0-9之间的数字</span><br><span class="line">[a-z] 匹配⼩写英⽂字母</span><br><span class="line">[A-Z] 匹配⼤写英⽂字母</span><br></pre></td></tr></table></figure><h2 id="20-密码安全检查"><a href="#20-密码安全检查" class="headerlink" title="20 密码安全检查"></a>20 密码安全检查</h2><p>密码安全要求：1)要求密码为6到20位; 2)密码只包含英⽂字母和数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\w&#123;6,20&#125;&#x27;</span>) <span class="comment"># 这是错误的，因为\w通配符匹配的是字母，数字和下划线，题⽬要求不能含有下划线</span></span><br><span class="line"><span class="comment"># 使⽤最稳的⽅法：\da-zA-Z满⾜`密码只包含英⽂字母和数字`</span></span><br><span class="line">pat = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\da-zA-Z]&#123;6,20&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>选⽤最保险的 fullmatch⽅法，查看是否整个字符串都匹配：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat.fullmatch(<span class="string">&#x27;qaz12&#x27;</span>) <span class="comment"># 返回 None, 长度⼩于6</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat.fullmatch(<span class="string">&#x27;qaz12wsxedcrfvtgb67890942234343434&#x27;</span>) <span class="comment"># None 长度⼤于22</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat.fullmatch(<span class="string">&#x27;qaz_231&#x27;</span>) <span class="comment"># None 含有下划线</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pat.fullmatch(<span class="string">&#x27;n0passw0Rd&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="21-爬取百度⾸页标题"><a href="#21-爬取百度⾸页标题" class="headerlink" title="21 爬取百度⾸页标题"></a>21 爬取百度⾸页标题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="comment">#爬⾍爬取百度⾸页内容</span></span><br><span class="line">data=request.urlopen(<span class="string">&quot;http://www.baidu.com/&quot;</span>).read().decode()</span><br><span class="line"><span class="comment">#分析⽹页,确定正则表达式</span></span><br><span class="line">pat=<span class="string">r&#x27;&lt;title&gt;(.*?)&lt;/title&gt;&#x27;</span></span><br><span class="line">result=re.search(pat,data)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result.group() <span class="comment"># 百度⼀下，你就知道</span></span><br></pre></td></tr></table></figure><h2 id="22-批量转化为驼峰格式-Camel"><a href="#22-批量转化为驼峰格式-Camel" class="headerlink" title="22 批量转化为驼峰格式(Camel)"></a>22 批量转化为驼峰格式(Camel)</h2><p>数据库字段名批量转化为驼峰格式</p><p>分析过程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ⽤到的正则串讲解</span></span><br><span class="line"><span class="comment"># \s 指匹配： [ \t\n\r\f\v]</span></span><br><span class="line"><span class="comment"># A|B：表⽰匹配A串或B串</span></span><br><span class="line"><span class="comment"># re.sub(pattern, newchar, string):</span></span><br><span class="line"><span class="comment"># substitue代替，⽤newchar字符替代与pattern匹配的字符所有.</span></span><br><span class="line"><span class="comment"># title(): 转化为⼤写，例⼦：</span></span><br><span class="line"><span class="comment"># &#x27;Hello world&#x27;.title() # &#x27;Hello World&#x27;</span></span><br><span class="line"><span class="comment"># print(re.sub(r&quot;\s|_|&quot;, &quot;&quot;, &quot;He llo_worl\td&quot;))</span></span><br><span class="line">s = re.sub(<span class="string">r&quot;(\s|_|-)+&quot;</span>, <span class="string">&quot; &quot;</span>,<span class="string">&#x27;some_database_field_name&#x27;</span>).title().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#结果： SomeDatabaseFieldName</span></span><br><span class="line"><span class="comment"># 可以看到此时的第⼀个字符为⼤写，需要转化为⼩写</span></span><br><span class="line">s = s[<span class="number">0</span>].lower()+s[<span class="number">1</span>:] <span class="comment"># 最终结果</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure><p>整理以上分析得到如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">camel</span>(<span class="params">s</span>):</span><br><span class="line">    s = re.sub(<span class="string">r&quot;(\s|_|-)+&quot;</span>, <span class="string">&quot; &quot;</span>, s).title().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>].lower() + s[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># 批量转化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_camel</span>(<span class="params">slist</span>):</span><br><span class="line">    <span class="keyword">return</span> [camel(s) <span class="keyword">for</span> s <span class="keyword">in</span> slist]</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = batch_camel([<span class="string">&#x27;student_id&#x27;</span>, <span class="string">&#x27;student\tname&#x27;</span>, <span class="string">&#x27;student-add&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h2 id="23-str1是否为str2的permutation"><a href="#23-str1是否为str2的permutation" class="headerlink" title="23 str1是否为str2的permutation"></a>23 str1是否为str2的permutation</h2><p>排序词(permutation)：两个字符串含有相同字符，但字符顺序不同。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_permutation</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">if</span> str1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> str2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(str1) != <span class="built_in">len</span>(str2):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    unq_s1 = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    unq_s2 = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> c1 <span class="keyword">in</span> str1:</span><br><span class="line">        unq_s1[c1] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c2 <span class="keyword">in</span> str2:</span><br><span class="line">        unq_s2[c2] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> unq_s1 == unq_s2</span><br></pre></td></tr></table></figure><p>这个⼩例⼦，使⽤python内置的 defaultdict，默认类型初始化为 int，计数默次数都为0. 这个解法<br>本质是 hash map lookup</p><p>统计出的两个defaultdict：unq_s1，unq_s2，如果相等，就表明str1、 str2互为排序词。<br>下⾯测试：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = is_permutation(<span class="string">&#x27;nice&#x27;</span>, <span class="string">&#x27;cine&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># True</span></span><br><span class="line">r = is_permutation(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># True</span></span><br><span class="line">r = is_permutation(<span class="string">&#x27;&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># False</span></span><br><span class="line">r = is_permutation(<span class="string">&#x27;work&#x27;</span>, <span class="string">&#x27;woo&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>以上就是使⽤defaultdict的⼩例⼦</p><h2 id="24-str1是否由str2旋转⽽来"><a href="#24-str1是否由str2旋转⽽来" class="headerlink" title="24 str1是否由str2旋转⽽来"></a>24 str1是否由str2旋转⽽来</h2><p>stringbook旋转后得到 bookstring,写⼀段代码验证 str1是否为 str2旋转得到。</p><p>思路</p><p>转化为判断： str1是否为 str2+str2的⼦串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_rotation</span>(<span class="params">s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">if</span> s1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> s2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s1) != <span class="built_in">len</span>(s2):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_substring</span>(<span class="params">s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> s1 <span class="keyword">in</span> s2</span><br><span class="line">    <span class="keyword">return</span> is_substring(s1, s2 + s2)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = is_rotation(<span class="string">&#x27;stringbook&#x27;</span>, <span class="string">&#x27;bookstring&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># True</span></span><br><span class="line">r = is_rotation(<span class="string">&#x27;greatman&#x27;</span>, <span class="string">&#x27;maneatgr&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="25-正浮点数"><a href="#25-正浮点数" class="headerlink" title="25 正浮点数"></a>25 正浮点数</h2><p>从⼀系列字符串中，挑选出所有正浮点数。</p><p>该怎么办？</p><p>玩玩正则表达式，⽤正则搞它！</p><p>关键是，正则表达式该怎么写呢？</p><p>有了！</p><p>^[1-9]\d<em>.\d</em>$</p><p>^ 表⽰字符串开始</p><p>[1-9] 表⽰数字1,2,3,4,5,6,7,8,9</p><p>^[1-9] 连起来表⽰以数字 1-9 作为开头</p><p>\d 表⽰⼀位 0-9 的数字</p><p>‘*’ 表⽰前⼀位字符出现 0 次，1 次或多次</p><p>\d* 表⽰数字出现 0 次，1 次或多次</p><p>. 表⽰⼩数点</p><p>$ 表⽰字符串以前⼀位的字符结束</p><p>^[1-9]\d<em>.\d</em>$ 连起来就求出所有⼤于 1.0 的正浮点数。</p><p>那 0.0 到 1.0 之间的正浮点数，怎么求，⼲嘛不直接汇总到上⾯的正则表达式中呢？</p><p>这样写不⾏吗： ^[0-9]\d<em>.\d</em>$</p><p>OK!</p><p>那我们⽴即测试下呗</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">recom = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[0-9]\d*\.\d*$&#x27;</span>)</span><br><span class="line">recom.<span class="keyword">match</span>(<span class="string">&#x27;000.2&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果显⽰，正则表达式 ^[0-9]\d<em>.\d</em>$ 竟然匹配到 000.2，认为它是⼀个正浮点数~~~！！！！</p><p>晕！！！！！！</p><p>所以知道为啥要先匹配⼤于 1.0 的浮点数了吧！</p><p>如果能写出这个正则表达式，再写另⼀部分就不困难了！</p><p>0.0 到 1.0 间的浮点数： ^0.\d*[1-9]\d*$</p><p>两个式⼦连接起来就是最终的结果：</p><p>^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$</p><p>如果还是看不懂，看看下⾯的正则分布剖析图吧：</p><p><img src="/.io//image-20230803115506407.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python绘图</title>
      <link href="/posts/d7d7781/"/>
      <url>/posts/d7d7781/</url>
      
        <content type="html"><![CDATA[<h1 id="五-python绘图"><a href="#五-python绘图" class="headerlink" title="五.python绘图"></a>五.python绘图</h1><p>Python常⽤的绘图⼯具包括： matplotlib, seaborn, plotly等，以及⼀些其他专⽤于绘制某类图如<br>词云图等的包，描绘绘图轨迹的 turtle包等。本章节将会使⽤⼀些例⼦由易到难的阐述绘图的经典⼩<br>例⼦，⽬前共收录 26个</p><h2 id="1-turtle绘制奥运五环图"><a href="#1-turtle绘制奥运五环图" class="headerlink" title="1 turtle绘制奥运五环图"></a>1 turtle绘制奥运五环图</h2><p>turtle绘图的函数⾮常好⽤，基本看到函数名字，就能知道它的含义，下⾯使⽤turtle，仅⽤15⾏代码来<br>绘制奥运五环图。</p><h3 id="1-导⼊库"><a href="#1-导⼊库" class="headerlink" title="1 导⼊库"></a>1 导⼊库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> p</span><br></pre></td></tr></table></figure><h3 id="2-定义画圆函数"><a href="#2-定义画圆函数" class="headerlink" title="2 定义画圆函数"></a>2 定义画圆函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drawCircle</span>(<span class="params">x,y,c=<span class="string">&#x27;red&#x27;</span></span>):</span><br><span class="line">    p.pu()<span class="comment"># 抬起画笔</span></span><br><span class="line">    p.goto(x,y) <span class="comment"># 绘制圆的起始位置</span></span><br><span class="line">    p.pd()<span class="comment"># 放下画笔</span></span><br><span class="line">    p.color(c)<span class="comment"># 绘制c⾊圆环</span></span><br><span class="line">    p.circle(<span class="number">30</span>,<span class="number">360</span>) <span class="comment">#绘制圆：半径，⾓度</span></span><br></pre></td></tr></table></figure><h3 id="3-画笔基本设置"><a href="#3-画笔基本设置" class="headerlink" title="3 画笔基本设置"></a>3 画笔基本设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.pensize(<span class="number">3</span>) <span class="comment"># 画笔尺⼨设置3</span></span><br></pre></td></tr></table></figure><h3 id="4-绘制五环图"><a href="#4-绘制五环图" class="headerlink" title="4 绘制五环图"></a>4 绘制五环图</h3><p>调⽤画圆函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">drawCircle(<span class="number">60</span>,<span class="number">0</span>,<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">drawCircle(<span class="number">120</span>,<span class="number">0</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">drawCircle(<span class="number">90</span>,-<span class="number">30</span>,<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">drawCircle(<span class="number">30</span>,-<span class="number">30</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.done()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161552791.png"></p><h2 id="2-turtle绘制漫天雪花"><a href="#2-turtle绘制漫天雪花" class="headerlink" title="2 turtle绘制漫天雪花"></a>2 turtle绘制漫天雪花</h2><p>导⼊模块</p><p>导⼊ turtle库和 python的 random</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><p>绘制雪花</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">snow</span>(<span class="params">snow_count</span>):</span><br><span class="line">    p.hideturtle()</span><br><span class="line">    p.speed(<span class="number">500</span>)</span><br><span class="line">    p.pensize(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(snow_count):</span><br><span class="line">        r = random.random()</span><br><span class="line">        g = random.random()</span><br><span class="line">        b = random.random()</span><br><span class="line">        p.pencolor(r, g, b)</span><br><span class="line">        p.pu()</span><br><span class="line">        p.goto(random.randint(-<span class="number">350</span>, <span class="number">350</span>), random.randint(<span class="number">1</span>, <span class="number">270</span>))</span><br><span class="line">        p.pd()</span><br><span class="line">        dens = random.randint(<span class="number">8</span>, <span class="number">12</span>)</span><br><span class="line">        snowsize = random.randint(<span class="number">10</span>, <span class="number">14</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(dens):</span><br><span class="line">            p.forward(snowsize) <span class="comment"># 向当前画笔⽅向移动snowsize像素长度</span></span><br><span class="line">            p.backward(snowsize) <span class="comment"># 向当前画笔相反⽅向移动snowsize像素长度</span></span><br><span class="line">            p.right(<span class="number">360</span> / dens) <span class="comment"># 顺时针移动360 / dens度</span></span><br></pre></td></tr></table></figure><p>绘制地⾯</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ground</span>(<span class="params">ground_line_count</span>):</span><br><span class="line">    p.hideturtle()</span><br><span class="line">    p.speed(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ground_line_count):</span><br><span class="line">        p.pensize(random.randint(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">        x = random.randint(-<span class="number">400</span>, <span class="number">350</span>)</span><br><span class="line">        y = random.randint(-<span class="number">280</span>, -<span class="number">1</span>)</span><br><span class="line">        r = -y / <span class="number">280</span></span><br><span class="line">        g = -y / <span class="number">280</span></span><br><span class="line">        b = -y / <span class="number">280</span></span><br><span class="line">        p.pencolor(r, g, b)</span><br><span class="line">        p.penup() <span class="comment"># 抬起画笔</span></span><br><span class="line">        p.goto(x, y) <span class="comment"># 让画笔移动到此位置</span></span><br><span class="line">        p.pendown() <span class="comment"># 放下画笔</span></span><br><span class="line">        p.forward(random.randint(<span class="number">40</span>, <span class="number">100</span>)) <span class="comment"># 眼当前画笔⽅向向前移动40~100距离</span></span><br></pre></td></tr></table></figure><p>主函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p.setup(<span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># p.tracer(False)</span></span><br><span class="line">    p.bgcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    snow(<span class="number">30</span>)</span><br><span class="line">    ground(<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># p.tracer(True)</span></span><br><span class="line">    p.mainloop()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>效果图:</p><p><img src="https://oss.lingkongstudy.com.cn/202311161552493.png"></p><h2 id="3-plotly画柱状图和折线图"><a href="#3-plotly画柱状图和折线图" class="headerlink" title="3 plotly画柱状图和折线图"></a>3 plotly画柱状图和折线图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#柱状图+折线图</span></span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"></span><br><span class="line">fig = go.Figure()</span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Scatter(</span><br><span class="line">    x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    y=[<span class="number">1.5</span>, <span class="number">1</span>, <span class="number">1.3</span>, <span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]</span><br><span class="line">))</span><br><span class="line">fig.add_trace(</span><br><span class="line">go.Bar(</span><br><span class="line">    x=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    y=[<span class="number">2</span>, <span class="number">0.5</span>, <span class="number">0.7</span>, -<span class="number">1.2</span>, <span class="number">0.3</span>, <span class="number">0.4</span>]</span><br><span class="line">))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161553041.png"></p><h2 id="4-seaborn热⼒图"><a href="#4-seaborn热⼒图" class="headerlink" title="4 seaborn热⼒图"></a>4 seaborn热⼒图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导⼊库</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># ⽣成数据集</span></span><br><span class="line">data = np.random.random((<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line">np.fill_diagonal(data,np.ones(<span class="number">6</span>))</span><br><span class="line">features = [<span class="string">&quot;prop1&quot;</span>,<span class="string">&quot;prop2&quot;</span>,<span class="string">&quot;prop3&quot;</span>,<span class="string">&quot;prop4&quot;</span>,<span class="string">&quot;prop5&quot;</span>, <span class="string">&quot;prop6&quot;</span>]</span><br><span class="line">data = pd.DataFrame(data, index = features, columns=features)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># 绘制热⼒图</span></span><br><span class="line">heatmap_plot = sns.heatmap(data, center=<span class="number">0</span>, cmap=<span class="string">&#x27;gist_rainbow&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161553781.png"></p><h2 id="5-matplotlib折线图"><a href="#5-matplotlib折线图" class="headerlink" title="5 matplotlib折线图"></a>5 matplotlib折线图</h2><p>模块名称：example_utils.py，⾥⾯包括三个函数，各⾃功能如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 创建画图fig和axes</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_axes</span>():</span><br><span class="line">    fig, axes = plt.subplots(ncols=<span class="number">3</span>, figsize=(<span class="number">6.5</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">for</span> ax <span class="keyword">in</span> fig.axes:</span><br><span class="line">        ax.<span class="built_in">set</span>(xticks=[], yticks=[])</span><br><span class="line">        fig.subplots_adjust(wspace=<span class="number">0</span>, left=<span class="number">0</span>, right=<span class="number">0.93</span>)</span><br><span class="line">    <span class="keyword">return</span> fig, axes</span><br><span class="line"><span class="comment"># 图⽚标题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">fig, text, y=<span class="number">0.9</span></span>):</span><br><span class="line">    fig.suptitle(text, size=<span class="number">14</span>, y=y, weight=<span class="string">&#x27;semibold&#x27;</span>, x=<span class="number">0.98</span>, ha=<span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    bbox=<span class="built_in">dict</span>(boxstyle=<span class="string">&#x27;round&#x27;</span>, fc=<span class="string">&#x27;floralwhite&#x27;</span>, ec=<span class="string">&#x27;#8B7E66&#x27;</span>,</span><br><span class="line">    lw=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 为数据添加⽂本注释</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">ax, text, y=<span class="number">0</span></span>):</span><br><span class="line">    ax.annotate(text, xy=(<span class="number">0.5</span>, <span class="number">0.00</span>), xycoords=<span class="string">&#x27;axes fraction&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    style=<span class="string">&#x27;italic&#x27;</span>,</span><br><span class="line">    bbox=<span class="built_in">dict</span>(boxstyle=<span class="string">&#x27;round&#x27;</span>, facecolor=<span class="string">&#x27;floralwhite&#x27;</span>,</span><br><span class="line">    ec=<span class="string">&#x27;#8B7E66&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> example_utils</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">fig, axes = example_utils.setup_axes()</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> axes:</span><br><span class="line">    ax.margins(y=<span class="number">0.10</span>)</span><br><span class="line"><span class="comment"># ⼦图1 默认plot多条线，颜⾊系统分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    axes[<span class="number">0</span>].plot(x, i * x)</span><br><span class="line"><span class="comment"># ⼦图2 展⽰线的不同linestyle</span></span><br><span class="line"><span class="keyword">for</span> i, ls <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;-.&#x27;</span>]):</span><br><span class="line">    axes[<span class="number">1</span>].plot(x, np.cos(x) + i, linestyle=ls)</span><br><span class="line"><span class="comment"># ⼦图3 展⽰线的不同linestyle和marker</span></span><br><span class="line"><span class="keyword">for</span> i, (ls, mk) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;:&#x27;</span>], [<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;s&#x27;</span>])):</span><br><span class="line">    axes[<span class="number">2</span>].plot(x, np.cos(x) + i * x, linestyle=ls, marker=mk, markevery=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置标题</span></span><br><span class="line"><span class="comment"># example_utils.title(fig, &#x27;&quot;ax.plot(x, y, ...)&quot;: Lines and/or markers&#x27;, y=0.95)</span></span><br><span class="line"><span class="comment"># 保存图⽚</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;plot_example.png&#x27;</span>, facecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 展⽰图⽚</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161553619.png"></p><h2 id="6-matplotlib散点图"><a href="#6-matplotlib散点图" class="headerlink" title="6 matplotlib散点图"></a>6 matplotlib散点图</h2><p>对应代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">散点图的基本⽤法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> example_utils</span><br><span class="line"><span class="comment"># 随机⽣成数据</span></span><br><span class="line">np.random.seed(<span class="number">1874</span>)</span><br><span class="line">x, y, z = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">100</span>))</span><br><span class="line">t = np.arctan2(y, x)</span><br><span class="line">size = <span class="number">50</span> * np.cos(<span class="number">2</span> * t)**<span class="number">2</span> + <span class="number">10</span></span><br><span class="line">fig, axes = example_utils.setup_axes()</span><br><span class="line"><span class="comment"># ⼦图1</span></span><br><span class="line">axes[<span class="number">0</span>].scatter(x, y, marker=<span class="string">&#x27;o&#x27;</span>, color=<span class="string">&#x27;darkblue&#x27;</span>, facecolor=<span class="string">&#x27;white&#x27;</span>, s=<span class="number">80</span>)</span><br><span class="line">example_utils.label(axes[<span class="number">0</span>], <span class="string">&#x27;scatter(x, y)&#x27;</span>)</span><br><span class="line"><span class="comment"># ⼦图2</span></span><br><span class="line">axes[<span class="number">1</span>].scatter(x, y, marker=<span class="string">&#x27;s&#x27;</span>, color=<span class="string">&#x27;darkblue&#x27;</span>, s=size)</span><br><span class="line">example_utils.label(axes[<span class="number">1</span>], <span class="string">&#x27;scatter(x, y, s)&#x27;</span>)</span><br><span class="line"><span class="comment"># ⼦图3</span></span><br><span class="line">axes[<span class="number">2</span>].scatter(x, y, s=size, c=z, cmap=<span class="string">&#x27;gist_ncar&#x27;</span>)</span><br><span class="line">example_utils.label(axes[<span class="number">2</span>], <span class="string">&#x27;scatter(x, y, s, c)&#x27;</span>)</span><br><span class="line"><span class="comment"># example_utils.title(fig, &#x27;&quot;ax.scatter(...)&quot;: Colored/scaled markers&#x27;,</span></span><br><span class="line"><span class="comment"># y=0.95)</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;scatter_example.png&#x27;</span>, facecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161553593.png"></p><h2 id="7-matplotlib柱状图"><a href="#7-matplotlib柱状图" class="headerlink" title="7 matplotlib柱状图"></a>7 matplotlib柱状图</h2><p>对应代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> example_utils</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fig, axes = example_utils.setup_axes()</span><br><span class="line">    basic_bar(axes[<span class="number">0</span>])</span><br><span class="line">    tornado(axes[<span class="number">1</span>])</span><br><span class="line">    general(axes[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># example_utils.title(fig, &#x27;&quot;ax.bar(...)&quot;: Plot rectangles&#x27;)</span></span><br><span class="line">    fig.savefig(<span class="string">&#x27;bar_example.png&#x27;</span>, facecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="comment"># ⼦图1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_bar</span>(<span class="params">ax</span>):</span><br><span class="line">    y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5.5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    err = [<span class="number">0.2</span>, <span class="number">1</span>, <span class="number">2.5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0.5</span>]</span><br><span class="line">    x = np.arange(<span class="built_in">len</span>(y))</span><br><span class="line">    ax.bar(x, y, yerr=err, color=<span class="string">&#x27;lightblue&#x27;</span>, ecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    ax.margins(<span class="number">0.05</span>)</span><br><span class="line">    ax.set_ylim(bottom=<span class="number">0</span>)</span><br><span class="line">    example_utils.label(ax, <span class="string">&#x27;bar(x, y, yerr=e)&#x27;</span>)</span><br><span class="line"><span class="comment"># ⼦图2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tornado</span>(<span class="params">ax</span>):</span><br><span class="line">    y = np.arange(<span class="number">8</span>)</span><br><span class="line">    x1 = y + np.random.random(<span class="number">8</span>) + <span class="number">1</span></span><br><span class="line">    x2 = y + <span class="number">3</span> * np.random.random(<span class="number">8</span>) + <span class="number">1</span></span><br><span class="line">    ax.barh(y, x1, color=<span class="string">&#x27;lightblue&#x27;</span>)</span><br><span class="line">    ax.barh(y, -x2, color=<span class="string">&#x27;salmon&#x27;</span>)</span><br><span class="line">    ax.margins(<span class="number">0.15</span>)</span><br><span class="line">    example_utils.label(ax, <span class="string">&#x27;barh(x, y)&#x27;</span>)</span><br><span class="line"><span class="comment"># ⼦图3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">general</span>(<span class="params">ax</span>):</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    left = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, num)</span><br><span class="line">    bottom = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, num)</span><br><span class="line">    width = np.random.random(num) + <span class="number">0.5</span></span><br><span class="line">    height = np.random.random(num) + <span class="number">0.5</span></span><br><span class="line">    ax.bar(left, height, width, bottom, color=<span class="string">&#x27;salmon&#x27;</span>)</span><br><span class="line">    ax.margins(<span class="number">0.15</span>)</span><br><span class="line">    example_utils.label(ax, <span class="string">&#x27;bar(l, h, w, b)&#x27;</span>)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161553664.png"></p><h2 id="8-matplotlib等⾼线图"><a href="#8-matplotlib等⾼线图" class="headerlink" title="8 matplotlib等⾼线图"></a>8 matplotlib等⾼线图</h2><p>对应代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.cbook <span class="keyword">import</span> get_sample_data</span><br><span class="line"><span class="keyword">import</span> example_utils</span><br><span class="line">z = np.load(get_sample_data(<span class="string">&#x27;bivariate_normal.npy&#x27;</span>))</span><br><span class="line">fig, axes = example_utils.setup_axes()</span><br><span class="line">axes[<span class="number">0</span>].contour(z, cmap=<span class="string">&#x27;gist_earth&#x27;</span>)</span><br><span class="line">example_utils.label(axes[<span class="number">0</span>], <span class="string">&#x27;contour&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>].contourf(z, cmap=<span class="string">&#x27;gist_earth&#x27;</span>)</span><br><span class="line">example_utils.label(axes[<span class="number">1</span>], <span class="string">&#x27;contourf&#x27;</span>)</span><br><span class="line">axes[<span class="number">2</span>].contourf(z, cmap=<span class="string">&#x27;gist_earth&#x27;</span>)</span><br><span class="line">cont = axes[<span class="number">2</span>].contour(z, colors=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">axes[<span class="number">2</span>].clabel(cont, fontsize=<span class="number">6</span>)</span><br><span class="line">example_utils.label(axes[<span class="number">2</span>], <span class="string">&#x27;contourf + contour\n + clabel&#x27;</span>)</span><br><span class="line"><span class="comment"># example_utils.title(fig, &#x27;&quot;contour, contourf, clabel&quot;: Contour/label 2D data&#x27;,</span></span><br><span class="line"><span class="comment"># y=0.96)</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;contour_example.png&#x27;</span>, facecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>C:\Users\gzh\AppData\Local\Temp\ipykernel_13008\931651818.py:5: MatplotlibDeprecationWarning:In a future release, get_sample_data will automatically load numpy arrays.  Set np_load to True to get the array and suppress this warning.  Set asfileobj to False to get the path to the data file and suppress this warning.</code></pre><p>​    </p><p><img src="https://oss.lingkongstudy.com.cn/202311161553992.png"></p><h2 id="9-imshow图"><a href="#9-imshow图" class="headerlink" title="9 imshow图"></a>9 imshow图</h2><p>对应代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib.cbook <span class="keyword">import</span> get_sample_data</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> axes_grid1</span><br><span class="line"><span class="keyword">import</span> example_utils</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fig, axes = setup_axes()</span><br><span class="line">    plot(axes, *load_data())</span><br><span class="line">    <span class="comment"># example_utils.title(fig, &#x27;&quot;ax.imshow(data, ...)&quot;: Colormapped or RGBarrays&#x27;)</span></span><br><span class="line">    fig.savefig(<span class="string">&#x27;imshow_example.png&#x27;</span>, facecolor=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">axes, img_data, scalar_data, ny</span>):</span><br><span class="line">    <span class="comment"># 默认线性插值</span></span><br><span class="line">    axes[<span class="number">0</span>].imshow(scalar_data, cmap=<span class="string">&#x27;gist_earth&#x27;</span>, extent=[<span class="number">0</span>, ny, ny, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 最近邻插值</span></span><br><span class="line">    axes[<span class="number">1</span>].imshow(scalar_data, cmap=<span class="string">&#x27;gist_earth&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>,</span><br><span class="line">    extent=[<span class="number">0</span>, ny, ny, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 展⽰RGB/RGBA数据</span></span><br><span class="line">    axes[<span class="number">2</span>].imshow(img_data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    img_data = plt.imread(get_sample_data(<span class="string">&#x27;5.png&#x27;</span>))</span><br><span class="line">    ny, nx, nbands = img_data.shape</span><br><span class="line">    scalar_data = np.load(get_sample_data(<span class="string">&#x27;bivariate_normal.npy&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> img_data, scalar_data, ny</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_axes</span>():</span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">3</span>))</span><br><span class="line">    axes = axes_grid1.ImageGrid(fig, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">.93</span>, <span class="number">1</span>], (<span class="number">1</span>, <span class="number">3</span>), axes_pad=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> ax <span class="keyword">in</span> axes:</span><br><span class="line">        ax.<span class="built_in">set</span>(xticks=[], yticks=[])</span><br><span class="line">    <span class="keyword">return</span> fig, axes</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><pre><code>C:\Users\gzh\AppData\Local\Temp\ipykernel_13008\952908628.py:23: MatplotlibDeprecationWarning:In a future release, get_sample_data will automatically load numpy arrays.  Set np_load to True to get the array and suppress this warning.  Set asfileobj to False to get the path to the data file and suppress this warning.</code></pre><p>​    </p><p><img src="https://oss.lingkongstudy.com.cn/202311161553756.png"></p><h2 id="pyecharts绘制仪表盘"><a href="#pyecharts绘制仪表盘" class="headerlink" title="pyecharts绘制仪表盘"></a>pyecharts绘制仪表盘</h2><p>使⽤pip install pyecharts 安装，pyecharts绘制仪表盘，只需要⼏⾏代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> charts</span><br><span class="line"><span class="comment"># 仪表盘</span></span><br><span class="line">gauge = charts.Gauge()</span><br><span class="line">gauge.add(<span class="string">&#x27;Python⼩例⼦&#x27;</span>, [(<span class="string">&#x27;Python机器学习&#x27;</span>, <span class="number">30</span>), (<span class="string">&#x27;Python基础&#x27;</span>, <span class="number">70</span>),(<span class="string">&#x27;Python正则&#x27;</span>, <span class="number">90</span>)])</span><br><span class="line">gauge.render(path=<span class="string">&quot;./data/仪表盘.html&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>ok</code></pre><p>仪表盘中共展⽰三项，每项的⽐例为30%,70%,90%，如下图默认名称显⽰第⼀项：Python机器学习，<br>完成⽐例为30%</p><p><img src="https://oss.lingkongstudy.com.cn/202311161554413.png"></p><h2 id="11-pyecharts漏⽃图"><a href="#11-pyecharts漏⽃图" class="headerlink" title="11 pyecharts漏⽃图"></a>11 pyecharts漏⽃图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Funnel, Page</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funnel_base</span>() -&gt; Funnel:</span><br><span class="line">    c = (</span><br><span class="line">        Funnel().add(<span class="string">&quot;豪车&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;法拉利&#x27;</span>, <span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;奥迪&#x27;</span>, <span class="string">&#x27;⼤众&#x27;</span>, <span class="string">&#x27;丰⽥&#x27;</span>, <span class="string">&#x27;特斯拉&#x27;</span>],</span><br><span class="line">        [randint(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])]).set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;豪车漏⽃图&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">funnel_base().render(<span class="string">&#x27;./data/car_fnnel.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以7种车型及某个属性值绘制的漏⽃图，属性值⼤越靠近漏⽃的⼤端。</p><p><img src="https://oss.lingkongstudy.com.cn/202311161554069.png"></p><h2 id="12-pyecharts⽇历图"><a href="#12-pyecharts⽇历图" class="headerlink" title="12 pyecharts⽇历图"></a>12 pyecharts⽇历图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Calendar</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calendar_interval_1</span>() -&gt; Calendar:</span><br><span class="line">    begin = datetime.date(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    end = datetime.date(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line">    data = [</span><br><span class="line">    [<span class="built_in">str</span>(begin + datetime.timedelta(days=i)), random.randint(<span class="number">1000</span>, <span class="number">25000</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, (end - begin).days + <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 隔天统计</span></span><br><span class="line">    ]</span><br><span class="line">    calendar = (</span><br><span class="line">        Calendar(init_opts=opts.InitOpts(width=<span class="string">&quot;1200px&quot;</span>)).add(</span><br><span class="line">        <span class="string">&quot;&quot;</span>, data, calendar_opts=opts.CalendarOpts(range_=<span class="string">&quot;2023&quot;</span>))</span><br><span class="line">        .set_global_opts(</span><br><span class="line">                title_opts=opts.TitleOpts(title=<span class="string">&quot;Calendar-2023年步数统计&quot;</span>),</span><br><span class="line">                visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">                max_=<span class="number">25000</span>,</span><br><span class="line">                min_=<span class="number">1000</span>,</span><br><span class="line">                orient=<span class="string">&quot;horizontal&quot;</span>,</span><br><span class="line">                is_piecewise=<span class="literal">True</span>,</span><br><span class="line">                pos_top=<span class="string">&quot;230px&quot;</span>,</span><br><span class="line">                pos_left=<span class="string">&quot;100px&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> calendar</span><br><span class="line">calendar_interval_1().render(<span class="string">&#x27;./data/calendar.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>绘制20123年1⽉1⽇到12⽉31⽇的步⾏数，官⽅给出的图形宽度 900px不够，只能显⽰到9⽉份，本例<br>使⽤ opts.InitOpts(width&#x3D;”1200px”)做出微调，并且 visualmap显⽰所有步数，每隔⼀天显⽰⼀<br>次：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161554809.png"></p><h2 id="13-pyecharts绘制graph图"><a href="#13-pyecharts绘制graph图" class="headerlink" title="13 pyecharts绘制graph图"></a>13 pyecharts绘制graph图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Graph, Page</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">graph_base</span>() -&gt; Graph:</span><br><span class="line">    nodes = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cus1&quot;</span>, <span class="string">&quot;symbolSize&quot;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cus2&quot;</span>, <span class="string">&quot;symbolSize&quot;</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cus3&quot;</span>, <span class="string">&quot;symbolSize&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nodes:</span><br><span class="line">        <span class="keyword">if</span> i.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;cus1&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> j.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;cus1&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            links.append(&#123;<span class="string">&quot;source&quot;</span>: i.get(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;target&quot;</span>: j.get(<span class="string">&quot;name&quot;</span>)&#125;)</span><br><span class="line">    c = (</span><br><span class="line">        Graph()</span><br><span class="line">        .add(<span class="string">&quot;&quot;</span>, nodes, links, repulsion=<span class="number">8000</span>)</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;customer-influence&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">graph_base().render(<span class="string">&quot;./data/graph.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>构建图，其中客户点1与其他两个客户都没有关系( link)，也就是不存在有效边：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161554962.png"></p><h2 id="14-pyecharts⽔球图"><a href="#14-pyecharts⽔球图" class="headerlink" title="14 pyecharts⽔球图"></a>14 pyecharts⽔球图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Liquid, Page</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> SymbolType</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">liquid</span>() -&gt; Liquid:</span><br><span class="line">    c = (</span><br><span class="line">        Liquid()</span><br><span class="line">        .add(<span class="string">&quot;lq&quot;</span>, [<span class="number">0.67</span>, <span class="number">0.30</span>, <span class="number">0.15</span>])</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Liquid&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">liquid().render(<span class="string">&#x27;./data/liquid.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>⽔球图的取值 [0.67, 0.30, 0.15]表⽰下图中的 三个波浪线 ，⼀般代表三个百分⽐:</p><p><img src="https://oss.lingkongstudy.com.cn/202311161555541.png"></p><h2 id="15-pyecharts饼图"><a href="#15-pyecharts饼图" class="headerlink" title="15 pyecharts饼图"></a>15 pyecharts饼图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pie_base</span>() -&gt; Pie:</span><br><span class="line">    c = (</span><br><span class="line">    Pie()</span><br><span class="line">        .add(<span class="string">&quot;&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;法拉利&#x27;</span>, <span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;奥迪&#x27;</span>, <span class="string">&#x27;⼤众&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;丰⽥&#x27;</span>, <span class="string">&#x27;特斯拉&#x27;</span>],</span><br><span class="line">        [randint(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])])</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Pie-基本⽰例&quot;</span>))</span><br><span class="line">        .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;: &#123;c&#125;&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">pie_base().render(<span class="string">&#x27;./data/pie_pyecharts.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161555185.png"></p><h2 id="16-pyecharts极坐标图"><a href="#16-pyecharts极坐标图" class="headerlink" title="16 pyecharts极坐标图"></a>16 pyecharts极坐标图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Page, Polar</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">polar_scatter0</span>() -&gt; Polar:</span><br><span class="line">    data = [(alpha, random.randint(<span class="number">1</span>, <span class="number">100</span>)) <span class="keyword">for</span> alpha <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)] <span class="comment"># r =</span></span><br><span class="line">    random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    c = (</span><br><span class="line">        Polar()</span><br><span class="line">        .add(<span class="string">&quot;&quot;</span>, data, type_=<span class="string">&quot;bar&quot;</span>, label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Polar&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">polar_scatter0().render(<span class="string">&#x27;./data/polar.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>极坐标表⽰为 (夹角,半径) ，如(6,94)表⽰夹⾓为6，半径94的点：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161555617.png"></p><h2 id="17-pyecharts词云图"><a href="#17-pyecharts词云图" class="headerlink" title="17 pyecharts词云图"></a>17 pyecharts词云图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Page, WordCloud</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> SymbolType</span><br><span class="line">words = [</span><br><span class="line">    (<span class="string">&quot;Python&quot;</span>, <span class="number">100</span>),</span><br><span class="line">    (<span class="string">&quot;C++&quot;</span>, <span class="number">80</span>),</span><br><span class="line">    (<span class="string">&quot;Java&quot;</span>, <span class="number">95</span>),</span><br><span class="line">    (<span class="string">&quot;R&quot;</span>, <span class="number">50</span>),</span><br><span class="line">    (<span class="string">&quot;JavaScript&quot;</span>, <span class="number">79</span>),</span><br><span class="line">    (<span class="string">&quot;C&quot;</span>, <span class="number">65</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wordcloud</span>() -&gt; WordCloud:</span><br><span class="line">    c = (</span><br><span class="line">        WordCloud()</span><br><span class="line">        <span class="comment"># word_size_range: 单词字体⼤⼩范围</span></span><br><span class="line">        .add(<span class="string">&quot;&quot;</span>, words, word_size_range=[<span class="number">20</span>, <span class="number">100</span>], shape=<span class="string">&#x27;cardioid&#x27;</span>)</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;WordCloud&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">wordcloud().render(<span class="string">&#x27;./data/wordcloud.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(“C”,65)表⽰在本次统计中C语⾔出现65次</p><p><img src="https://oss.lingkongstudy.com.cn/202311161555756.png"></p><h2 id="18-pyecharts系列柱状图"><a href="#18-pyecharts系列柱状图" class="headerlink" title="18 pyecharts系列柱状图"></a>18 pyecharts系列柱状图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_series</span>() -&gt; Bar:</span><br><span class="line">    c = (</span><br><span class="line">        Bar()</span><br><span class="line">        .add_xaxis([<span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;法拉利&#x27;</span>, <span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;奥迪&#x27;</span>, <span class="string">&#x27;⼤众&#x27;</span>, <span class="string">&#x27;丰⽥&#x27;</span>, <span class="string">&#x27;特斯拉&#x27;</span>])</span><br><span class="line">        .add_yaxis(<span class="string">&quot;销量&quot;</span>, [randint(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])</span><br><span class="line">        .add_yaxis(<span class="string">&quot;产量&quot;</span>, [randint(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar的主标题&quot;</span>,</span><br><span class="line">        subtitle=<span class="string">&quot;Bar的副标题&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">bar_series().render(<span class="string">&#x27;./data/bar_series.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161555372.png"></p><h2 id="19-pyecharts热⼒图"><a href="#19-pyecharts热⼒图" class="headerlink" title="19 pyecharts热⼒图"></a>19 pyecharts热⼒图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> HeatMap</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heatmap_car</span>() -&gt; HeatMap:</span><br><span class="line">    x = [<span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;法拉利&#x27;</span>, <span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;奥迪&#x27;</span>, <span class="string">&#x27;⼤众&#x27;</span>, <span class="string">&#x27;丰⽥&#x27;</span>, <span class="string">&#x27;特斯拉&#x27;</span>]</span><br><span class="line">    y = [<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;⽇本&#x27;</span>,<span class="string">&#x27;南⾮&#x27;</span>,<span class="string">&#x27;澳⼤利亚&#x27;</span>,<span class="string">&#x27;阿根廷&#x27;</span>,<span class="string">&#x27;阿尔及利亚&#x27;</span>,<span class="string">&#x27;法国&#x27;</span>,<span class="string">&#x27;意⼤利&#x27;</span>,<span class="string">&#x27;加拿⼤&#x27;</span>]</span><br><span class="line">    value = [[i, j, random.randint(<span class="number">0</span>, <span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y))]</span><br><span class="line">    c = (</span><br><span class="line">        HeatMap()</span><br><span class="line">        .add_xaxis(x)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;销量&quot;</span>, y, value)</span><br><span class="line">        .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;HeatMap&quot;</span>),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(),</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">heatmap_car().render(<span class="string">&#x27;./data/heatmap_pyecharts.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>热⼒图描述的实际是三维关系，x轴表⽰车型，y轴表⽰国家，每个⾊块的颜⾊值代表销量，颜⾊刻度尺<br>显⽰在左下⾓，颜⾊越红表⽰销量越⼤。</p><p><img src="https://oss.lingkongstudy.com.cn/202311161555219.png"></p><h2 id="20-matplotlib绘制动画"><a href="#20-matplotlib绘制动画" class="headerlink" title="20 matplotlib绘制动画"></a>20 matplotlib绘制动画</h2><p>matplotlib是python中最经典的绘图包，⾥⾯ animation模块能绘制动画。</p><p>⾸先导⼊⼩例⼦使⽤的模块：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, random</span><br></pre></td></tr></table></figure><p>⽣成数据， frames_count是帧的个数， data_count每个帧的柱⼦个数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>:</span><br><span class="line">    data_count = <span class="number">32</span></span><br><span class="line">    frames_count = <span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.color = (<span class="number">0.5</span>, random(), random()) <span class="comment">#rgb</span></span><br><span class="line">    <span class="comment"># 造数据</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> [[Data(randint(<span class="number">1</span>, cls.data_count)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(cls.data_count)]<span class="keyword">for</span> frame_i <span class="keyword">in</span> <span class="built_in">range</span>(cls.frames_count)]</span><br></pre></td></tr></table></figure><p>绘制动画： animation.FuncAnimation函数的回调函数的参数 fi表⽰第⼏帧，注意要调⽤<br>axs.cla()清除上⼀帧。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_chart</span>():</span><br><span class="line">    fig = plt.figure(<span class="number">1</span>, figsize=(<span class="number">16</span>, <span class="number">9</span>))</span><br><span class="line">    axs = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    axs.set_xticks([])</span><br><span class="line">    axs.set_yticks([])</span><br><span class="line">    <span class="comment"># ⽣成数据</span></span><br><span class="line">    frames = Data.create()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">animate</span>(<span class="params">fi</span>):</span><br><span class="line">        axs.cla() <span class="comment"># clear last frame</span></span><br><span class="line">        axs.set_xticks([])</span><br><span class="line">        axs.set_yticks([])</span><br><span class="line">        <span class="keyword">return</span> axs.bar(<span class="built_in">list</span>(<span class="built_in">range</span>(Data.data_count)), <span class="comment"># X</span></span><br><span class="line">        [d.value <span class="keyword">for</span> d <span class="keyword">in</span> frames[fi]], <span class="comment"># Y</span></span><br><span class="line">        <span class="number">1</span>, <span class="comment"># width</span></span><br><span class="line">        color=[d.color <span class="keyword">for</span> d <span class="keyword">in</span> frames[fi]] <span class="comment"># color</span></span><br><span class="line">        )</span><br><span class="line">    <span class="comment"># 动画展⽰</span></span><br><span class="line">    anim = animation.FuncAnimation(fig, animate, frames=<span class="built_in">len</span>(frames))</span><br><span class="line">    plt.show()</span><br><span class="line">draw_chart()</span><br></pre></td></tr></table></figure><h2 id="21-pyecharts绘图属性设置⽅法"><a href="#21-pyecharts绘图属性设置⽅法" class="headerlink" title="21 pyecharts绘图属性设置⽅法"></a>21 pyecharts绘图属性设置⽅法</h2><p>这是pyecharts中⼀般的绘图步骤：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.commons.utils <span class="keyword">import</span> JsCode</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_base</span>() -&gt; Bar:</span><br><span class="line">    c = (</span><br><span class="line">        Bar()</span><br><span class="line">        .add_xaxis(Faker.choose())</span><br><span class="line">        .add_yaxis(<span class="string">&quot;商家A&quot;</span>, Faker.values())</span><br><span class="line">        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本⽰例&quot;</span>,</span><br><span class="line">        subtitle=<span class="string">&quot;我是副标题&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">bar_base().render(<span class="string">&#x27;./data/bar.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那么，如何设置y轴显⽰在右侧，添加⼀⾏代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.set_global_opts(yaxis_opts=opts.AxisOpts(position=<span class="string">&#x27;right&#x27;</span>))</span><br></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(Faker.choose())</span><br><span class="line">    .add_yaxis(<span class="string">&quot;商家A&quot;</span>, Faker.values())</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-基本⽰例&quot;</span>,</span><br><span class="line">    subtitle=<span class="string">&quot;我是副标题&quot;</span>))</span><br><span class="line">    .set_global_opts(yaxis_opts=opts.AxisOpts(position=<span class="string">&#x27;right&#x27;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如何锁定这个属性，⾸先应该在set_global_opts函数的参数中找，它⼀共有以下 11个设置参数，它们<br>位于模块 charts.py:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title_opts: types.Title = opts.TitleOpts(),</span><br><span class="line">legend_opts: types.Legend = opts.LegendOpts(),</span><br><span class="line">tooltip_opts: types.Tooltip = <span class="literal">None</span>,</span><br><span class="line">toolbox_opts: types.Toolbox = <span class="literal">None</span>,</span><br><span class="line">brush_opts: types.Brush = <span class="literal">None</span>,</span><br><span class="line">xaxis_opts: types.Axis = <span class="literal">None</span>,</span><br><span class="line">yaxis_opts: types.Axis = <span class="literal">None</span>,</span><br><span class="line">visualmap_opts: types.VisualMap = <span class="literal">None</span>,</span><br><span class="line">datazoom_opts: types.DataZoom = <span class="literal">None</span>,</span><br><span class="line">graphic_opts: types.Graphic = <span class="literal">None</span>,</span><br><span class="line">axispointer_opts: types.AxisPointer = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>因为是设置y轴显⽰在右侧，⾃然想到设置参数 yaxis_opts，因为其类型为 types.Axis，所以再进<br>⼊ types.py，同时定位到 Axis：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Axis = <span class="type">Union</span>[opts.AxisOpts, <span class="built_in">dict</span>, <span class="literal">None</span>]</span><br></pre></td></tr></table></figure><p>Union是pyecharts中可容纳多个类型的并集列表，也就是Axis可能为 opts.AxisOpt, dict, 或 None<br>三种类型。查看第⼀个 opts.AxisOpt类，它共定义以下 25个参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type_: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span><br><span class="line">name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span><br><span class="line">is_show: <span class="built_in">bool</span> = <span class="literal">True</span>,</span><br><span class="line">is_scale: <span class="built_in">bool</span> = <span class="literal">False</span>,</span><br><span class="line">is_inverse: <span class="built_in">bool</span> = <span class="literal">False</span>,</span><br><span class="line">name_location: <span class="built_in">str</span> = <span class="string">&quot;end&quot;</span>,</span><br><span class="line">name_gap: Numeric = <span class="number">15</span>,</span><br><span class="line">name_rotate: <span class="type">Optional</span>[Numeric] = <span class="literal">None</span>,</span><br><span class="line">interval: <span class="type">Optional</span>[Numeric] = <span class="literal">None</span>,</span><br><span class="line">grid_index: Numeric = <span class="number">0</span>, position: <span class="type">Optional</span>[<span class="built_in">str</span>] =</span><br><span class="line"><span class="literal">None</span>,</span><br><span class="line">offset: Numeric = <span class="number">0</span>,</span><br><span class="line">split_number: Numeric = <span class="number">5</span>,</span><br><span class="line">boundary_gap: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">bool</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">min_: <span class="type">Union</span>[Numeric, <span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">max_: <span class="type">Union</span>[Numeric, <span class="built_in">str</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">min_interval: Numeric = <span class="number">0</span>, max_interval: <span class="type">Optional</span>[Numeric]</span><br><span class="line">= <span class="literal">None</span>,</span><br><span class="line">axisline_opts: <span class="type">Union</span>[AxisLineOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">axistick_opts: <span class="type">Union</span>[AxisTickOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">axislabel_opts: <span class="type">Union</span>[LabelOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">axispointer_opts: <span class="type">Union</span>[AxisPointerOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">name_textstyle_opts: <span class="type">Union</span>[TextStyleOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">splitarea_opts: <span class="type">Union</span>[SplitAreaOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span><br><span class="line">splitline_opts: <span class="type">Union</span>[SplitLineOpts, <span class="built_in">dict</span>] = SplitLineOpts()</span><br></pre></td></tr></table></figure><p>观察后尝试参数 position，结合官档： <a href="https://pyecharts.org/#/zh-cn/global_options?id=axisopts%ef%bc%9a%e5%9d%90%e6%a0%87%e8%bd%b4%e9%85%8d%e7%bd%ae%e9%a1%b9%EF%BC%8C%E4%BB%8B%E7%BB%8Dx%E8%BD%B4">https://pyecharts.org/#/zh-cn/global_options?id=axisopts%ef%bc%9a%e5%9d%90%e6%a0%87%e8%bd%b4%e9%85%8d%e7%bd%ae%e9%a1%b9，介绍x轴</a><br>设置position时有bottom, top, 所以y轴设置很可能就是left,right.</p><p>OK！</p><h2 id="22-pyecharts绘图属性设置⽅法-下"><a href="#22-pyecharts绘图属性设置⽅法-下" class="headerlink" title="22 pyecharts绘图属性设置⽅法(下)"></a>22 pyecharts绘图属性设置⽅法(下)</h2><p><img src="https://oss.lingkongstudy.com.cn/202311161555620.png"></p><p>分步讲解如何配置为上图</p><p>1)柱状图显⽰效果动画对应控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animation_opts=opts.AnimationOpts(</span><br><span class="line">animation_delay=<span class="number">500</span>, animation_easing=<span class="string">&quot;cubicOut&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2)柱状图显⽰主题对应控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theme=ThemeType.MACARONS</span><br></pre></td></tr></table></figure><p>3)添加x轴对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_xaxis( [<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;西⽠&quot;</span>, <span class="string">&quot;柠檬&quot;</span>, <span class="string">&quot;车厘⼦&quot;</span>]</span><br></pre></td></tr></table></figure><p>4)添加y轴对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_yaxis(<span class="string">&quot;A&quot;</span>, Faker.values(),</span><br></pre></td></tr></table></figure><p>5)修改柱间距对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">category_gap=<span class="string">&quot;50%&quot;</span></span><br></pre></td></tr></table></figure><p>6)A系列柱⼦是否显⽰对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_selected=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>7)A系列柱⼦颜⾊渐变对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">itemstyle_opts=&#123;</span><br><span class="line">    <span class="string">&quot;normal&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;color&quot;</span>: JsCode(<span class="string">&quot;&quot;&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;offset: 0,color: &#x27;rgba(0, 244, 255, 1)&#x27;&#125;, </span></span><br><span class="line"><span class="string">        &#123;offset: 1,color: &#x27;rgba(0, 77, 167, 1)&#x27;&#125;], false)&quot;&quot;&quot;</span>),</span><br><span class="line">        <span class="string">&quot;barBorderRadius&quot;</span>: [<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>],</span><br><span class="line">        <span class="string">&quot;shadowColor&quot;</span>: <span class="string">&#x27;rgb(0, 160, 221)&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>8)A系列柱⼦最⼤和最⼩值 标记点 对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">    data=[</span><br><span class="line">        opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最⼤值&quot;</span>),</span><br><span class="line">        opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最⼩值&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>9)A系列柱⼦最⼤和最⼩值 标记线 对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">markline_opts=opts.MarkLineOpts(</span><br><span class="line">    data=[</span><br><span class="line">        opts.MarkLineItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最⼩值&quot;</span>),</span><br><span class="line">        opts.MarkLineItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最⼤值&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>10)柱状图标题对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-参数使⽤例⼦&quot;</span></span><br></pre></td></tr></table></figure><p>11)柱状图⾮常有⽤的toolbox显⽰对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">toolbox_opts=opts.ToolboxOpts()</span><br></pre></td></tr></table></figure><p>12)Y轴显⽰在右侧对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaxis_opts=opts.AxisOpts(position=<span class="string">&quot;right&quot;</span>)</span><br></pre></td></tr></table></figure><p>13)Y轴名称对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaxis_opts=opts.AxisOpts(,name=<span class="string">&quot;Y轴&quot;</span>)</span><br></pre></td></tr></table></figure><p>14)数据轴区域放⼤缩⼩设置对应的控制代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datazoom_opts=opts.DataZoomOpts()</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_border_radius</span>():</span><br><span class="line">    c = (</span><br><span class="line">    Bar(init_opts=opts.InitOpts(animation_opts=opts</span><br><span class="line">    .AnimationOpts(animation_delay=<span class="number">500</span>, animation_easing=<span class="string">&quot;cubicOut&quot;</span>),theme=ThemeType.MACARONS))</span><br><span class="line">    .add_xaxis( [<span class="string">&quot;草莓&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;西⽠&quot;</span>, <span class="string">&quot;柠檬&quot;</span>, <span class="string">&quot;车厘⼦&quot;</span>])</span><br><span class="line">    .add_yaxis(<span class="string">&quot;A&quot;</span>,Faker.values(),category_gap=<span class="string">&quot;50%&quot;</span>,markpoint_opts=opts.MarkPointOpts(),is_selected=<span class="literal">True</span>)</span><br><span class="line">    .set_series_opts(itemstyle_opts=&#123;</span><br><span class="line">        <span class="string">&quot;normal&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: JsCode(<span class="string">&quot;&quot;&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;offset: 0, color: &#x27;rgba(0, 244, 255, 1)&#x27;&#125;, &#123;offset: 1, color: &#x27;rgba(0, 77, 167, 1)&#x27;&#125;], false)&quot;&quot;&quot;</span>),</span><br><span class="line">            <span class="string">&quot;barBorderRadius&quot;</span>: [<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>],</span><br><span class="line">            <span class="string">&quot;shadowColor&quot;</span>: <span class="string">&#x27;rgb(0, 160, 221)&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkPointItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最⼤值&quot;</span>),</span><br><span class="line">                opts.MarkPointItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最⼩值&quot;</span>),</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        markline_opts=opts.MarkLineOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkLineItem(type_=<span class="string">&quot;min&quot;</span>, name=<span class="string">&quot;最⼩值&quot;</span>),</span><br><span class="line">                opts.MarkLineItem(type_=<span class="string">&quot;max&quot;</span>, name=<span class="string">&quot;最⼤值&quot;</span>)</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    ).set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Bar-参数使⽤例⼦&quot;</span>),</span><br><span class="line">    toolbox_opts=opts.ToolboxOpts(),yaxis_opts=opts.AxisOpts(position=<span class="string">&quot;right&quot;</span>,name=<span class="string">&quot;Y轴&quot;</span>),datazoom_opts=opts.DataZoomOpts(),))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">bar_border_radius().render(<span class="string">&quot;./data/lizi.html&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="23-pyecharts原来可以这样快速⼊门-上"><a href="#23-pyecharts原来可以这样快速⼊门-上" class="headerlink" title="23 pyecharts原来可以这样快速⼊门(上)"></a>23 pyecharts原来可以这样快速⼊门(上)</h2><p>最近两天，翻看下 pyecharts的源码，感叹这个框架写的真棒，思路清晰，设计简洁，通俗易懂，推荐读者们有空也阅读下。</p><p>pyecharts官档介绍-五个特性写的非常好：</p><pre><code>1)简洁的 API 设计，使⽤如丝滑般流畅，⽀持链式调⽤;2)囊括了 30+ 种常见图表，应有尽有;3)⽀持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab;4)可轻松集成⾄ Flask，Django 等主流 Web 框架;5)⾼度灵活的配置项，可轻松搭配出精美的图表</code></pre><p>pyecharts 确实也如上⾯五个特性介绍那样，使⽤起来⾮常⽅便。那么，有些读者不禁好奇会问，</p><p>pyecharts 是如何做到的？</p><p>我们不妨从pyecharts官档 5分钟⼊门pyecharts章节开始，由表(最⾼层函数)及⾥(底层函数也就是所谓的源码)，⼀探究竟。</p><h3 id="官⽅第⼀个例⼦"><a href="#官⽅第⼀个例⼦" class="headerlink" title="官⽅第⼀个例⼦"></a>官⽅第⼀个例⼦</h3><p>不妨从官档给出的第⼀个例⼦说起，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line">bar = Bar()</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;⽺⽑衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤⼦&quot;</span>, <span class="string">&quot;⾼跟鞋&quot;</span>, <span class="string">&quot;袜⼦&quot;</span>])</span><br><span class="line">bar.add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line"><span class="comment"># render 会⽣成本地 HTML ⽂件，默认会在当前⽬录⽣成 render.html ⽂件</span></span><br><span class="line"><span class="comment"># 也可以传⼊路径参数，如 bar.render(&quot;mycharts.html&quot;)</span></span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p>第⼀⾏代码： from pyecharts.charts import Bar，先上⼀张源码中包的结构图 ：</p><p><img src="https://oss.lingkongstudy.com.cn/202311161555525.png"></p><p>bar.py模块中定义了类 Bar(RectChart)，如下所⽰：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">RectChart</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;&lt;&lt; Bar Chart &gt;&gt;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Bar chart presents categorical data with rectangular bars</span></span><br><span class="line"><span class="string">    with heights or lengths proportional to the values that they represent.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>1)为什么根据图1中的包结构，为什么不这么写： from pyecharts.charts.basic_charts import<br>Bar</p><p><img src="https://oss.lingkongstudy.com.cn/202311161556074.png"></p><p>答：请看图2中 <strong>init</strong>.py模块，⽂件内容如下，看到导⼊ charts包，⽽⾮ charts.basic_charts</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> charts, commons, components, datasets, options, render, scaffold</span><br><span class="line"><span class="keyword">from</span> pyecharts._version <span class="keyword">import</span> __author__, __version__</span><br></pre></td></tr></table></figure><ol start="2"><li>Bar(RectChart)是什么意思</li></ol><p>答：RectChart是Bar的⼦类</p><p>下⾯4⾏代码，很好理解，没有特殊性。</p><p>pyecharts主要两个⼤版本,0.5基版本和1.0基版本，从1.0基版本开始全⾯⽀持链式调⽤：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;⽺⽑衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤⼦&quot;</span>, <span class="string">&quot;⾼跟鞋&quot;</span>, <span class="string">&quot;袜⼦&quot;</span>])</span><br><span class="line">    .add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">)</span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p>实现 链式调⽤ 也没有多难，保证返回类本⾝ self即可，如果⾮要有其他返回对象，那么要提到类内以便被全局共享，</p><p>add_xaxis函数返回 self</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_xaxis</span>(<span class="params">self, xaxis_data: <span class="type">Sequence</span></span>):</span><br><span class="line">    self.options[<span class="string">&quot;xAxis&quot;</span>][<span class="number">0</span>].update(data=xaxis_data)</span><br><span class="line">    self._xaxis_data = xaxis_data</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>add_yaxis函数同样返回 self.</p><h2 id="24-pyecharts原来可以这样快速⼊门-中"><a href="#24-pyecharts原来可以这样快速⼊门-中" class="headerlink" title="24 pyecharts原来可以这样快速⼊门(中)"></a>24 pyecharts原来可以这样快速⼊门(中)</h2><p>⼀切皆options</p><p>pyecharts⽤起来很爽的另⼀个重要原因， 参数配置项 封装的⾮常nice，通过定义⼀些列基础的配置组件，⽐如 global_options.py模块中定义的配置对象有以下 27个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AngleAxisItem,</span><br><span class="line">AngleAxisOpts,</span><br><span class="line">AnimationOpts,</span><br><span class="line">Axis3DOpts, </span><br><span class="line">AxisLineOpts,</span><br><span class="line">AxisOpts, </span><br><span class="line">AxisPointerOpts,</span><br><span class="line">AxisTickOpts,</span><br><span class="line">BrushOpts, </span><br><span class="line">CalendarOpts,</span><br><span class="line">DataZoomOpts,</span><br><span class="line">Grid3DOpts, </span><br><span class="line">GridOpts, </span><br><span class="line">InitOpts, </span><br><span class="line">LegendOpts, </span><br><span class="line">ParallelAxisOpts,</span><br><span class="line">ParallelOpts,</span><br><span class="line">PolarOpts, </span><br><span class="line">RadarIndicatorItem,</span><br><span class="line">RadiusAxisItem,</span><br><span class="line">RadiusAxisOpts,</span><br><span class="line">SingleAxisOpts,</span><br><span class="line">TitleOpts, </span><br><span class="line">ToolBoxFeatureOpts,</span><br><span class="line">ToolboxOpts, </span><br><span class="line">TooltipOpts, </span><br><span class="line">VisualMapOpts,</span><br></pre></td></tr></table></figure><h2 id="25-pyecharts原来可以这样快速⼊门-下"><a href="#25-pyecharts原来可以这样快速⼊门-下" class="headerlink" title="25 pyecharts原来可以这样快速⼊门(下)"></a>25 pyecharts原来可以这样快速⼊门(下)</h2><p>第⼆个例⼦</p><p>了解上⾯的配置对象后，再看官档给出的第⼆个例⼦，与第⼀个例⼦相⽐，增加了⼀⾏代码：</p><p>set_global_opts函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="comment"># V1 版本开始⽀持链式调⽤</span></span><br><span class="line"><span class="comment"># 你所看到的格式其实是 `black` 格式化以后的效果</span></span><br><span class="line"><span class="comment"># 可以执⾏ `pip install black` 下载使⽤</span></span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis([<span class="string">&quot;衬衫&quot;</span>, <span class="string">&quot;⽺⽑衫&quot;</span>, <span class="string">&quot;雪纺衫&quot;</span>, <span class="string">&quot;裤⼦&quot;</span>, <span class="string">&quot;⾼跟鞋&quot;</span>, <span class="string">&quot;袜⼦&quot;</span>])</span><br><span class="line">    .add_yaxis(<span class="string">&quot;商家A&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>])</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;主标题&quot;</span>, subtitle=<span class="string">&quot;副标题&quot;</span>))</span><br><span class="line">)</span><br><span class="line">bar.render()</span><br></pre></td></tr></table></figure><p>set_global_opts函数在pyecharts中被⾼频使⽤，它定义在底层基础模块 Chart.py中，它是前⾯说到的 RectChart的⼦类， Bar类的孙⼦类。</p><p>浏览下函数的参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_global_opts</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    title_opts: types.Title = opts.TitleOpts(<span class="params"></span>),</span></span><br><span class="line"><span class="params">    legend_opts: types.Legend = opts.LegendOpts(<span class="params"></span>),</span></span><br><span class="line"><span class="params">    tooltip_opts: types.Tooltip = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    toolbox_opts: types.Toolbox = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    brush_opts: types.Brush = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    xaxis_opts: types.Axis = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    yaxis_opts: types.Axis = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    visualmap_opts: types.VisualMap = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    datazoom_opts: types.DataZoom = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    graphic_opts: types.Graphic = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    axispointer_opts: types.AxisPointer = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br></pre></td></tr></table></figure><p>以第⼆个参数 title_opts为例，说明 pyecharts中参数赋值的风格。</p><p>⾸先， title_opts是 默认参数 ，默认值为 opts.TitleOpts()，这个对象在上⼀节中，我们提到过，是 global_options.py模块中定义的 27个配置对象种的⼀个。</p><p>其次，pyecharts中为了增强代码可读性，参数的类型都显⽰的给出。此处它的类型为： types.Title.</p><p>这是什么类型？它的类型不是 TitleOpts吗？不急，看看Title这个类型的定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Title = <span class="type">Union</span>[opts.TitleOpts, <span class="built_in">dict</span>]</span><br></pre></td></tr></table></figure><p>原来 Title可能是 opts.TitleOpts, 也可能是python原⽣的 dict. 通过 Union实现的就是这种类型效果 。所以这就解释了官档中为什么说也可以使⽤字典配置参数的问题，如下官档：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 或者直接使⽤字典参数</span></span><br><span class="line"><span class="comment"># .set_global_opts(title_opts=&#123;&quot;text&quot;: &quot;主标题&quot;, &quot;subtext&quot;: &quot;副标题&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>最后，真正的关于图表的标题相关的属性都被封装到TitleOpts类中，⽐如 title, subtitle属性，查看源码，TitleOpts对象还有更多属性：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TitleOpts</span>(<span class="title class_ inherited__">BasicOpts</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        title: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        title_link: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        title_target: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        subtitle: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        subtitle_link: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        subtitle_target: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        pos_left: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        pos_right: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        pos_top: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        pos_bottom: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        padding: <span class="type">Union</span>[<span class="type">Sequence</span>, Numeric] = <span class="number">5</span>,</span></span><br><span class="line"><span class="params">        item_gap: Numeric = <span class="number">10</span>,</span></span><br><span class="line"><span class="params">        title_textstyle_opts: <span class="type">Union</span>[TextStyleOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        subtitle_textstyle_opts: <span class="type">Union</span>[TextStyleOpts, <span class="built_in">dict</span>, <span class="literal">None</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br></pre></td></tr></table></figure><p>OK. 到此跟随5分钟⼊门的官档，结合两个例⼦实现的背后源码，探讨了：</p><p>1)与包结构组织相关的 <strong>init</strong>.py；</p><p>2)类的继承关系:Bar-&gt;RectChart-&gt;Chart；</p><p>3)链式调⽤；</p><p>4)重要的参数配置包 options，以TitleOpts类为例， set_global_opts将它装载到Bar类中实现属性⾃定义。</p><h2 id="26-1-分钟学会画-pairplot-图"><a href="#26-1-分钟学会画-pairplot-图" class="headerlink" title="26 1 分钟学会画 pairplot 图"></a>26 1 分钟学会画 pairplot 图</h2><p>seaborn 绘图库，基于 matplotlib 开发，提供更⾼层绘图接口。</p><p>学习使⽤ seaborn 绘制 pairplot 图</p><p>pairplot 图能直观的反映出两两特征间的关系，帮助我们对数据集建⽴初步印象，更好的完成分类和聚类任务。</p><p>使⽤ sklearn 导⼊经典的 Iris 数据集，共有 150 条记录，4 个特征，target 有三种不同值。如下所⽰：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)</span><br><span class="line"><span class="number">0</span>                  <span class="number">5.1</span>               <span class="number">3.5</span>                <span class="number">1.4</span>               <span class="number">0.2</span></span><br><span class="line"><span class="number">1</span>                  <span class="number">4.9</span>               <span class="number">3.0</span>                <span class="number">1.4</span>               <span class="number">0.2</span></span><br><span class="line"><span class="number">2</span>                  <span class="number">4.7</span>               <span class="number">3.2</span>                <span class="number">1.3</span>               <span class="number">0.2</span></span><br><span class="line"><span class="number">3</span>                  <span class="number">4.6</span>               <span class="number">3.1</span>                <span class="number">1.5</span>               <span class="number">0.2</span></span><br><span class="line"><span class="number">4</span>                  <span class="number">5.0</span>               <span class="number">3.6</span>                <span class="number">1.4</span>               <span class="number">0.2</span></span><br><span class="line">..                 ...               ...                ...               ...</span><br><span class="line"><span class="number">145</span>                <span class="number">6.7</span>               <span class="number">3.0</span>                <span class="number">5.2</span>               <span class="number">2.3</span></span><br><span class="line"><span class="number">146</span>                <span class="number">6.3</span>               <span class="number">2.5</span>                <span class="number">5.0</span>               <span class="number">1.9</span></span><br><span class="line"><span class="number">147</span>                <span class="number">6.5</span>               <span class="number">3.0</span>                <span class="number">5.2</span>               <span class="number">2.0</span></span><br><span class="line"><span class="number">148</span>                <span class="number">6.2</span>               <span class="number">3.4</span>                <span class="number">5.4</span>               <span class="number">2.3</span></span><br><span class="line"><span class="number">149</span>                <span class="number">5.9</span>               <span class="number">3.0</span>                <span class="number">5.1</span>               <span class="number">1.8</span></span><br></pre></td></tr></table></figure><p>使⽤ seaborn 绘制 sepal_length, petal_length 两个特征间的关系矩阵：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sns.<span class="built_in">set</span>(style=<span class="string">&quot;ticks&quot;</span>)</span><br><span class="line">df = load_iris()</span><br><span class="line">df01 = pd.DataFrame(df.data,columns = df.feature_names)</span><br><span class="line">df01[<span class="string">&quot;species&quot;</span>] = df.target_names[df.target]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line">sns.pairplot(df01)</span><br><span class="line">plt.show()</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161556706.png"></p><p>设置颜⾊多显：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(df01, hue=<span class="string">&quot;species&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311161556342.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python三⼤利器</title>
      <link href="/posts/ece6051d/"/>
      <url>/posts/ece6051d/</url>
      
        <content type="html"><![CDATA[<h1 id="四、Python三⼤利器"><a href="#四、Python三⼤利器" class="headerlink" title="四、Python三⼤利器"></a>四、Python三⼤利器</h1><p>[TOC]</p><p>Python中的三⼤利器包括： 迭代器 ， ⽣成器 ， 装饰器 ，利⽤好它们才能开发出最⾼性能的Python程<br>序，涉及到的内置模块 itertools提供迭代器相关的操作。此部分收录有意思的例⼦共计15例。</p><h2 id="1-寻找第n次出现位置"><a href="#1-寻找第n次出现位置" class="headerlink" title="1 寻找第n次出现位置"></a>1 寻找第n次出现位置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_n</span>(<span class="params">s, c, n</span>):</span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">        <span class="keyword">if</span> x == c:</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> size == n:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(search_n(<span class="string">&quot;fdasadfadf&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">3</span>))<span class="comment"># 结果为7，正确</span></span><br><span class="line"><span class="built_in">print</span>(search_n(<span class="string">&quot;fdasadfadf&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">30</span>))<span class="comment"># 结果为-1，正确</span></span><br></pre></td></tr></table></figure><h2 id="2-斐波那契数列前n项"><a href="#2-斐波那契数列前n项" class="headerlink" title="2 斐波那契数列前n项"></a>2 斐波那契数列前n项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line"><span class="built_in">list</span>(fibonacci(<span class="number">5</span>)) <span class="comment"># [1, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><h2 id="3-找出所有重复元素"><a href="#3-找出所有重复元素" class="headerlink" title="3 找出所有重复元素"></a>3 找出所有重复元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_all_duplicates</span>(<span class="params">lst</span>):</span><br><span class="line">    c = Counter(lst)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> k: c[k] &gt; <span class="number">1</span>, c))</span><br><span class="line"></span><br><span class="line">find_all_duplicates([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]) <span class="comment"># [2,3]</span></span><br></pre></td></tr></table></figure><h2 id="4-联合统计次数"><a href="#4-联合统计次数" class="headerlink" title="4 联合统计次数"></a>4 联合统计次数</h2><p>Counter对象间可以做数学运算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;computer&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;computer&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ca = Counter(a)</span><br><span class="line">cb = Counter(b)</span><br><span class="line"><span class="comment">#Counter对象间可以做数学运算</span></span><br><span class="line">ca + cb <span class="comment"># Counter(&#123;&#x27;orange&#x27;: 3, &#x27;computer&#x27;: 2, &#x27;apple&#x27;: 1&#125;)</span></span><br><span class="line"><span class="comment"># 进⼀步抽象，实现多个列表内元素的个数统计</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sumc</span>(<span class="params">*c</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(c) &lt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mapc = <span class="built_in">map</span>(Counter, c)</span><br><span class="line">    s = Counter([])</span><br><span class="line">    <span class="keyword">for</span> ic <span class="keyword">in</span> mapc: <span class="comment"># ic 是⼀个Counter对象</span></span><br><span class="line">        s += ic</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="comment">#Counter(&#123;&#x27;orange&#x27;: 3, &#x27;computer&#x27;: 3, &#x27;apple&#x27;: 1, &#x27;abc&#x27;: 1, &#x27;face&#x27;: 1&#125;)</span></span><br><span class="line">sumc(a, b, [<span class="string">&#x27;abc&#x27;</span>], [<span class="string">&#x27;face&#x27;</span>, <span class="string">&#x27;computer&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="5-groupby单字段分组"><a href="#5-groupby单字段分组" class="headerlink" title="5 groupby单字段分组"></a>5 groupby单字段分组</h2><p>天⽓记录：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-04&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-03&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-02&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>按照天⽓字段 weather分组汇总：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"><span class="keyword">for</span> k, items <span class="keyword">in</span> groupby(a,key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;weather&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><p>输出结果看出，分组失败！原因：分组前必须按照分组字段 排序 ，这个很坑~</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cloud</span><br><span class="line">sunny</span><br><span class="line">cloud</span><br></pre></td></tr></table></figure><p>修改代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;weather&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> k, items <span class="keyword">in</span> groupby(a,key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;weather&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cloud</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-04&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-06&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">sunny</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-05&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="6-itemgetter和key函数"><a href="#6-itemgetter和key函数" class="headerlink" title="6 itemgetter和key函数"></a>6 itemgetter和key函数</h2><p>注意到 sort和 groupby所⽤的 key函数，除了 lambda写法外，还有⼀种简写，就是使⽤<br>itemgetter：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-04&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-02&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-01&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">a.sort(key=itemgetter(<span class="string">&#x27;weather&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> k, items <span class="keyword">in</span> groupby(a, key=itemgetter(<span class="string">&#x27;weather&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cloud</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-04&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-06&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">sunny</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-05&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="7-groupby多字段分组"><a href="#7-groupby多字段分组" class="headerlink" title="7 groupby多字段分组"></a>7 groupby多字段分组</h2><p>itemgetter是⼀个类， itemgetter(‘weather’)返回⼀个可调⽤的对象，它的参数可有多个：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">a.sort(key=itemgetter(<span class="string">&#x27;weather&#x27;</span>, <span class="string">&#x27;date&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> k, items <span class="keyword">in</span> groupby(a, key=itemgetter(<span class="string">&#x27;weather&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果如下，使⽤ weather和 date两个字段排序 a ，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cloud</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-01&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-04&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;cloud&#x27;</span>&#125;</span><br><span class="line">sunny</span><br><span class="line">&#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;2023-08-02&#x27;</span>, <span class="string">&#x27;weather&#x27;</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>注意这个结果与上⾯结果有些微妙不同，这个更多是我们想看到和使⽤更多的。</p><h2 id="8-sum函数计算和聚合同时做"><a href="#8-sum函数计算和聚合同时做" class="headerlink" title="8 sum函数计算和聚合同时做"></a>8 sum函数计算和聚合同时做</h2><p>Python中的聚合类函数 sum, min, max第⼀个参数是 iterable类型，⼀般使⽤⽅法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">sum</span>([i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]) <span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p>使⽤列表⽣成式 [i+1 for i in a]创建⼀个长度与 a ⼀⾏的临时列表，这步完成后，再做 sum聚合。</p><p>试想如果你的数组 a 长度⼗百万级，再创建⼀个这样的临时列表就很不划算，最好是⼀边算⼀边聚合，<br>稍改动为如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">sum</span>(i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> a) <span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p>此时 i+1 for i in a 是 (i+1 for i in a)的简写，得到⼀个⽣成器( generator)对象，如下所⽰：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000023BD58884A0</span>&gt;</span><br></pre></td></tr></table></figure><p>⽣成器每迭代⼀步吐出( yield)⼀个元素并计算和聚合后，进⼊下⼀次迭代，直到终点。</p><h2 id="9-list分组-⽣成器版"><a href="#9-list分组-⽣成器版" class="headerlink" title="9 list分组(⽣成器版)"></a>9 list分组(⽣成器版)</h2><p>前面第一章python基础中的<a href="./%E4%B8%80.python%E5%9F%BA%E7%A1%80.md">列表等分</a>就是使用的生成器，如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_iter</span>(<span class="params">lst, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> lst</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    i, div = <span class="number">0</span>, ceil(<span class="built_in">len</span>(lst) / n)</span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> lst[i * div: (i + <span class="number">1</span>) * div]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"><span class="built_in">list</span>(divide_iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">0</span>)) <span class="comment"># [[1, 2, 3, 4, 5]]</span></span><br><span class="line"><span class="built_in">list</span>(divide_iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>)) <span class="comment"># [[1, 2, 3], [4, 5]]</span></span><br></pre></td></tr></table></figure><h2 id="10-列表全展开（⽣成器版）"><a href="#10-列表全展开（⽣成器版）" class="headerlink" title="10 列表全展开（⽣成器版）"></a>10 列表全展开（⽣成器版）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多层列表展开成单层列表</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>],<span class="number">7</span>],<span class="number">8</span>,[<span class="string">&quot;python&quot;</span>,<span class="number">6</span>],<span class="number">9</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i)==<span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> function(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(function(a))) <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, &#x27;python&#x27;, 6, 9]</span></span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, &#39;python&#39;, 6, 9]</code></pre><h2 id="11-测试函数运⾏时间的装饰器"><a href="#11-测试函数运⾏时间的装饰器" class="headerlink" title="11 测试函数运⾏时间的装饰器"></a>11 测试函数运⾏时间的装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试函数执⾏时间的装饰器⽰例</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timing_func</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        start=time.time()</span><br><span class="line">        fn() <span class="comment">#执⾏传⼊的fn参数</span></span><br><span class="line">        stop=time.time()</span><br><span class="line">        <span class="keyword">return</span> (stop-start)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@timing_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list_append</span>():</span><br><span class="line">    lst=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100000</span>):</span><br><span class="line">        lst.append(i)</span><br><span class="line"><span class="meta">@timing_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list_compre</span>():</span><br><span class="line">    [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100000</span>)] <span class="comment">#列表⽣成式</span></span><br><span class="line">a=test_list_append()</span><br><span class="line">c=test_list_compre()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test list append time:&quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test list comprehension time:&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;append/compre:&quot;</span>,<span class="built_in">round</span>(a/c,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>test list append time: 0.006039142608642578test list comprehension time: 0.0050089359283447266append/compre: 1.206</code></pre><h2 id="12-统计异常出现次数和时间的装饰器"><a href="#12-统计异常出现次数和时间的装饰器" class="headerlink" title="12 统计异常出现次数和时间的装饰器"></a>12 统计异常出现次数和时间的装饰器</h2><p>写⼀个装饰器，统计某个异常重复出现指定次数时，经历的时长。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">excepter</span>(<span class="params">f</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">nonlocal</span> i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e.args[<span class="number">0</span>]&#125;</span>: <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">            t2 = time.time()</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;spending time:<span class="subst">&#123;<span class="built_in">round</span>(t2-t1,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>关键词 nonlocal常⽤于函数嵌套中，声明变量i为⾮局部变量；</p><p>如果不声明， i+&#x3D;1表明 i 为函数 wrapper内的局部变量，因为在 i+&#x3D;1引⽤(reference)时, i 未被声明，所以会报 unreferenced variable的错误。</p><p>使⽤创建的装饰函数 excepter, n 是异常出现的次数。</p><p>共测试了两类常见的异常： 被零除 和 数组越界 。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">10</span> <span class="comment"># 除计数外</span></span><br><span class="line"><span class="meta">@excepter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_zero_except</span>():</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    j = <span class="number">1</span>/(<span class="number">40</span>-<span class="number">20</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试零除</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    divide_zero_except()</span><br><span class="line"><span class="meta">@excepter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outof_range_except</span>():</span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 测试超出范围除外</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    outof_range_except()</span><br></pre></td></tr></table></figure><pre><code>division by zero: 1division by zero: 2division by zero: 3division by zero: 4division by zero: 5division by zero: 6division by zero: 7division by zero: 8division by zero: 9division by zero: 10spending time:1.09list index out of range: 1list index out of range: 2list index out of range: 3list index out of range: 4list index out of range: 5list index out of range: 6list index out of range: 7list index out of range: 8list index out of range: 9list index out of range: 10spending time:1.09</code></pre><p>打印出来的结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">division by zero: <span class="number">1</span></span><br><span class="line">division by zero: <span class="number">2</span></span><br><span class="line">division by zero: <span class="number">3</span></span><br><span class="line">division by zero: <span class="number">4</span></span><br><span class="line">division by zero: <span class="number">5</span></span><br><span class="line">division by zero: <span class="number">6</span></span><br><span class="line">division by zero: <span class="number">7</span></span><br><span class="line">division by zero: <span class="number">8</span></span><br><span class="line">division by zero: <span class="number">9</span></span><br><span class="line">division by zero: <span class="number">10</span></span><br><span class="line">spending time:<span class="number">1.09</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">1</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">2</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">3</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">4</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">5</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">6</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">7</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">8</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">9</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span>: <span class="number">10</span></span><br><span class="line">spending time:<span class="number">1.09</span></span><br></pre></td></tr></table></figure><h2 id="13-测试运⾏时长的装饰器"><a href="#13-测试运⾏时长的装饰器" class="headerlink" title="13 测试运⾏时长的装饰器"></a>13 测试运⾏时长的装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试函数执⾏时间的装饰器⽰例</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timing</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        start=time.time()</span><br><span class="line">        fn() <span class="comment">#执⾏传⼊的fn参数</span></span><br><span class="line">        stop=time.time()</span><br><span class="line">        <span class="keyword">return</span> (stop-start)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@timing</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list_append</span>():</span><br><span class="line">    lst=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100000</span>):</span><br><span class="line">        lst.append(i)</span><br><span class="line"><span class="meta">@timing</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list_compre</span>():</span><br><span class="line">    [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100000</span>)] <span class="comment">#列表⽣成式</span></span><br><span class="line">    </span><br><span class="line">a=test_list_append()</span><br><span class="line">c=test_list_compre()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test list append time:&quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test list comprehension time:&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;append/compre:&quot;</span>,<span class="built_in">round</span>(a/c,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>test list append time: 0.008554697036743164test list comprehension time: 0.004532337188720703append/compre: 1.887</code></pre><p>这个实例与测试函数执⾏时长的装饰器是一样的</p><h2 id="14-装饰器通俗理解"><a href="#14-装饰器通俗理解" class="headerlink" title="14 装饰器通俗理解"></a>14 装饰器通俗理解</h2><p>再看⼀个装饰器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">call_print</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you\&#x27;re calling %s function&#x27;</span>%(f.__name__,))</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>使⽤ call_print装饰器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@call_print</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@call_print</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfun2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>myfun()后返回：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfun()</span><br></pre></td></tr></table></figure><pre><code>you&#39;re calling myfun function</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yo<span class="string">u&#x27;re calling myfun function</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfun2()</span><br></pre></td></tr></table></figure><pre><code>you&#39;re calling myfun2 function</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yo<span class="string">u&#x27;re calling myfun2 function</span></span><br></pre></td></tr></table></figure><p>使⽤call_print</p><p>你看， @call_print放置在任何⼀个新定义的函数上⾯，都会默认输出⼀⾏，你正在调⽤这个函数的名。<br>这是为什么呢？注意观察新定义的 call_print函数(加上@后便是装饰器):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">call_print</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you\&#x27;re calling %s function&#x27;</span>%(f.__name__,))</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>它必须接受⼀个函数 f ，然后返回另外⼀个函数 g .</p><p>装饰器本质</p><p>本质上，它与下⾯的调⽤⽅式效果是等效的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfun2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_print</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you\&#x27;re calling %s function&#x27;</span>%(f.__name__,))</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>下⾯是最重要的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfun = call_print(myfun)</span><br><span class="line">myfun2 = call_print(myfun2)</span><br></pre></td></tr></table></figure><p>⼤家看明⽩吗？也就是call_print(myfun)后不是返回⼀个函数吗，然后再赋值给myfun.<br>再次调⽤myfun, myfun2时，效果是这样的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfun()</span><br></pre></td></tr></table></figure><pre><code>you&#39;re calling myfun function</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yo<span class="string">u&#x27;re calling myfun function</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myfun2()</span><br></pre></td></tr></table></figure><pre><code>you&#39;re calling myfun2 function</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yo<span class="string">u&#x27;re calling myfun2 function</span></span><br></pre></td></tr></table></figure><p>你看，这与装饰器的实现效果是⼀模⼀样的。装饰器的写法可能更加直观些，所以不⽤显⽰的这样赋<br>值： myfun &#x3D; call_print(myfun)， myfun2 &#x3D; call_print(myfun2)，但是装饰器的这种封装，猛<br>⼀看，有些不好理解。</p><h2 id="15-定制递减迭代器"><a href="#15-定制递减迭代器" class="headerlink" title="15 定制递减迭代器"></a>15 定制递减迭代器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编写⼀个迭代器，通过循环语句，实现对某个正整数的依次递减1，直到0.</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Descend</span>(<span class="title class_ inherited__">Iterator</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,N</span>):</span><br><span class="line">        self.N=N</span><br><span class="line">        self.a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> self.a&lt;self.N:</span><br><span class="line">            self.N-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.N</span><br><span class="line">        <span class="keyword">raise</span> StopIteration</span><br><span class="line">        </span><br><span class="line">descend_iter=Descend(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(descend_iter))</span><br></pre></td></tr></table></figure><pre><code>[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</code></pre><p>核⼼要点：</p><p>1 __next__名字不能变，实现定制的迭代逻辑</p><p>2 raise StopIteration：通过 raise 中断程序，必须这样写</p>]]></content>
      
      
      
        <tags>
            
            <tag> python实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8 安装及基础配置</title>
      <link href="/posts/a5ee4717/"/>
      <url>/posts/a5ee4717/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos8-安装及基础配置"><a href="#Centos8-安装及基础配置" class="headerlink" title="Centos8 安装及基础配置"></a>Centos8 安装及基础配置</h1><h2 id="一-安装Centos-8"><a href="#一-安装Centos-8" class="headerlink" title="一.安装Centos 8"></a>一.安装Centos 8</h2><p>第一步新建虚拟机</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906170025372.png" alt="image-20230906170025372"></p><p>硬件兼容的话如果你是高版本的17.x的需要向下兼容的话,可以自行选择</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906170625313.png" alt="image-20230906170625313"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171001976.png" alt="image-20230906171001976"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171120707.png" alt="image-20230906171120707"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171309602.png" alt="image-20230906171309602"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171331066.png" alt="image-20230906171331066"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171344334.png" alt="image-20230906171344334"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171358242.png" alt="image-20230906171358242"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171408833.png" alt="image-20230906171408833"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171422790.png" alt="image-20230906171422790"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171433100.png" alt="image-20230906171433100"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906171451484.png" alt="image-20230906171451484"></p><p>这是安装界面</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906172850706.png" alt="image-20230906172850706"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906173014080.png" alt="image-20230906173014080"></p><p>首先是安装目的地</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906173122849.png" alt="image-20230906173122849"></p><p>选择自定义,然后点击完成.</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906173156493.png" alt="image-20230906173156493"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906174420684.png" alt="image-20230906174420684"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906174542240.png" alt="image-20230906174542240"></p><p>挂载点选择home根据自己需求设置容量,添加完以后完成就可以了</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906174607699.png" alt="image-20230906174607699"></p><p>然后选择安装的类型,这里选择最小安装</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906175237701.png" alt="image-20230906175237701"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906175316910.png" alt="image-20230906175316910"></p><p>如果不想麻烦的话可以直接在这里开启网卡,要不然就在安装完系统以后在修改配置文件开启网卡</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906175431302.png" alt="image-20230906175431302"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906175445762.png" alt="image-20230906175445762"></p><p>然后是管理员密码,设置完以后开始安装就可以了.</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906175510486.png" alt="image-20230906175510486"></p><p>安装完重启就可以了.</p><h2 id="二-Centos-8基础配置和ssh"><a href="#二-Centos-8基础配置和ssh" class="headerlink" title="二.Centos 8基础配置和ssh"></a>二.Centos 8基础配置和ssh</h2><p>首先我们先修改主机名,以防老师说这不是我们自己安装的🤭.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname gzh-8</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906180120935.png" alt="image-20230906180120935"></p><p>安装完以后退出再进去就可以看到主机名已经修改了.</p><p>然后就是修改网卡配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line">vi ifcfg-enss <span class="comment"># 自己的网卡名字</span></span><br></pre></td></tr></table></figure><p>下面是修改的内容</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906180442660.png" alt="image-20230906180442660"></p><p>如果在安装时没有开启网卡,就把文件里面ONBOOT后面改成yes,然后设置成静态ip</p><p>再添加下面这些内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.88.137</span><br><span class="line">MASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.88.2</span><br><span class="line">DNS1=10.0.0.247</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><p>设置完以后保存退出重启网络服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli connetion reload</span><br></pre></td></tr></table></figure><p>然后设置ssh远程连接</p><p>centos8 ssh服务默认是开启的不用进行配置,如果没有安装ssh服务需要手动安装</p><p>打开我们的远程连接软件,输入我们虚拟机IP就可以链接上了.</p><p>这里我推荐修改自己的hosts文件做一下ip映射,这样我们就不用再输入ip远程连接了,就可以直接输入我们映射的名字连接了.</p><p>如图:</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906181056903.png" alt="image-20230906181056903"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906181124035.png" alt="image-20230906181124035"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906181139605.png" alt="image-20230906181139605"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906181153983.png" alt="image-20230906181153983"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230906181209974.png" alt="image-20230906181209974"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHELL</title>
      <link href="/posts/b2c6704d/"/>
      <url>/posts/b2c6704d/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-SHELL"><a href="#第三章-SHELL" class="headerlink" title="第三章 SHELL"></a>第三章 SHELL</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><h3 id="1-1本地变量"><a href="#1-1本地变量" class="headerlink" title="1.1本地变量"></a>1.1本地变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># name=values</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># echo $name</span></span><br><span class="line">values</span><br></pre></td></tr></table></figure><p>本地变量相当于在该shell中创建了一个局部变量,当该shell退出以后局部变量就不存在了</p><h3 id="1-2环境变量"><a href="#1-2环境变量" class="headerlink" title="1.2环境变量"></a>1.2环境变量</h3><p>环境变量是但你启动一个SHELL时,你的shell会读取环境变量的配置文件查看你当前shell中所存在的环境变量,比如我们在<code>.bash_profile</code></p><p>中设置的环境变量可以直接输出出来.</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 ~]<span class="comment"># cat .bash_profile </span></span><br><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME_DIR</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line">[root@gzh-8 ~]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/bin</span><br><span class="line">[root@gzh-8 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>这里面<code>PATH</code>变量追加了<code>HOME</code>环境变量.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 ~]<span class="comment"># echo $HOME</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>还有<code>SHELL</code>会输出我们当前用户使用的shell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 ~]<span class="comment"># echo $SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h3 id="1-3位置变量"><a href="#1-3位置变量" class="headerlink" title="1.3位置变量"></a>1.3位置变量</h3><p>位置变量就是当你逐行执行脚本时会根据你命令行中输入的字符进行填充</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat demo2.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The script&#x27;s name is : <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$4</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$5</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$6</span>&quot;</span></span><br><span class="line"></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh demo2.sh </span></span><br><span class="line">The script<span class="string">&#x27;s name is : demo2.sh</span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">Parameter : </span></span><br><span class="line"><span class="string">[root@gzh-8 test]# sh demo2.sh a b c d e f g</span></span><br><span class="line"><span class="string">The script&#x27;</span>s name is : demo2.sh</span><br><span class="line">Parameter : a</span><br><span class="line">Parameter : b</span><br><span class="line">Parameter : c</span><br><span class="line">Parameter : d</span><br><span class="line">Parameter : e</span><br><span class="line">Parameter : f</span><br></pre></td></tr></table></figure><p>从你执行shell脚本那一刻开始后面的字符串会传入到脚本的位置变量中.</p><h3 id="1-4特殊变量"><a href="#1-4特殊变量" class="headerlink" title="1.4特殊变量"></a>1.4特殊变量</h3><p>特殊变量的作用主要是用来查看脚本的运行信息,常用的特殊变量如下:</p><ul><li><code>$ #</code> : 传递脚本的参数数量</li><li><code>$ *</code> 和<code>$ @</code> : 传递脚本的所有参数</li><li><code>$ ?</code> : 命令退出状态,0表示正常退出,非0表示异常退出</li><li><code>$ $</code> : 表示进程和PID</li></ul><p>例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat demo2.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The script&#x27;s name is : <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$4</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$5</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter : <span class="variable">$6</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Parameter count: <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ALL parameter: $*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ALL parameter: <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PID: $$&quot;</span></span><br><span class="line"></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh demo2.sh a b c d e f g</span></span><br><span class="line">The script<span class="string">&#x27;s name is : demo2.sh</span></span><br><span class="line"><span class="string">Parameter : a</span></span><br><span class="line"><span class="string">Parameter : b</span></span><br><span class="line"><span class="string">Parameter : c</span></span><br><span class="line"><span class="string">Parameter : d</span></span><br><span class="line"><span class="string">Parameter : e</span></span><br><span class="line"><span class="string">Parameter : f</span></span><br><span class="line"><span class="string">Parameter count: 7</span></span><br><span class="line"><span class="string">ALL parameter: a b c d e f g</span></span><br><span class="line"><span class="string">ALL parameter: a b c d e f g</span></span><br><span class="line"><span class="string">PID: 6499</span></span><br></pre></td></tr></table></figure><h2 id="2-符号"><a href="#2-符号" class="headerlink" title="2.符号"></a>2.符号</h2><h3 id="2-1引号"><a href="#2-1引号" class="headerlink" title="2.1引号"></a>2.1引号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> <span class="comment">#单引号 -它将单引号里面的内容作为字符串输出</span></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="comment">#双引号 -它可以包含单引号,和单引号作用一样</span></span><br><span class="line">`` <span class="comment">#反引号 -它可以进行命令替换可以和双引号结合例如输出时间</span></span><br><span class="line"><span class="comment"># 例:</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># echo &quot;Today is `date`&quot;</span></span><br><span class="line">Today is 2023年 09月 21日 星期四 07:39:16 EDT</span><br></pre></td></tr></table></figure><h3 id="2-2通配符"><a href="#2-2通配符" class="headerlink" title="2.2通配符"></a>2.2通配符</h3><p>1.通配符”<code>*</code>“</p><p>它可以通配0个或多个字符.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls -d /etc/sys*</span></span><br><span class="line">/etc/sysconfig    /etc/sysctl.d  /etc/system-release</span><br><span class="line">/etc/sysctl.conf  /etc/systemd   /etc/system-release-cpe</span><br></pre></td></tr></table></figure><p>2.通配符”<code>?</code>“</p><p>它每次只能通配一个字符</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls -d /etc/??</span></span><br><span class="line">/etc/bk  /etc/pm</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls -d /etc/???</span></span><br><span class="line">/etc/dnf  /etc/lvm  /etc/pki  /etc/rpm  /etc/ssl  /etc/xdg</span><br><span class="line">/etc/gss  /etc/opt  /etc/rpc  /etc/ssh  /etc/X11  /etc/yum</span><br></pre></td></tr></table></figure><p>3.通配符”<code>[]</code>“</p><p>它可以查找<code>[]</code>里面给定范围的字符</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls /etc/[f-h]*.conf</span></span><br><span class="line">/etc/fuse.conf  /etc/host.conf</span><br></pre></td></tr></table></figure><p>4.通配符”<code>[!]</code>“</p><p>它表示出了<code>[]</code>里面的字符,与其他任意字符匹配</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls -d /etc/y*[!.conf]</span></span><br><span class="line">/etc/yum  /etc/yum.repos.d</span><br></pre></td></tr></table></figure><h3 id="2-3连接符"><a href="#2-3连接符" class="headerlink" title="2.3连接符"></a>2.3连接符</h3><p>1.”<code>;</code>“连接符</p><p>它的作用是可以在一行中分步执行多条命令</p><p>例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 etc]<span class="comment"># cd /root/test;ls -a;pwd</span></span><br><span class="line">.  ..  demo1.sh  demo2.sh</span><br><span class="line">/root/test</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>2.”<code>&amp;&amp;</code>“连接符</p><p>它遵循逻辑关系,只有当前一个命令运行成功以后后面的命令才会执行.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cd /test &amp;&amp; cd /</span></span><br><span class="line">-bash: <span class="built_in">cd</span>: /test: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>3.”<code>||</code>“连接符</p><p>它也遵循逻辑关系,不管前面的运行成功与否后面的都会执行.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cd /test || cd /</span></span><br><span class="line">-bash: <span class="built_in">cd</span>: /test: 没有那个文件或目录</span><br><span class="line">[root@gzh-8 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="3-正则表达式"><a href="#3-正则表达式" class="headerlink" title="3.正则表达式"></a>3.正则表达式</h2><h3 id="3-1元字符"><a href="#3-1元字符" class="headerlink" title="3.1元字符"></a>3.1元字符</h3><p>这些元字符和通配符用法都差不多,这里只写几个例子</p><ol><li><p>限定符”<code>*</code>“</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 /]<span class="comment"># ls ~/*</span></span><br><span class="line">/root/anaconda-ks.cfg  /root/test.tar.bz2</span><br><span class="line">/root/test.tar         /root/test.tar.gz</span><br><span class="line"></span><br><span class="line">/root/gzh:</span><br><span class="line">demo1.sh  test.tar  zgh</span><br><span class="line"></span><br><span class="line">/root/PATH_DIR:</span><br><span class="line"></span><br><span class="line">/root/test:</span><br><span class="line">demo1.sh  demo2.sh</span><br></pre></td></tr></table></figure></li><li><p>点字符”<code>.</code>“</p><p>只能匹配一个字符</p></li><li><p>行首定位符”<code>^</code>“</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配以sys开头的文件</span></span><br><span class="line">[root@gzh-8 ~]<span class="comment"># ls /etc/ |grep &quot;^sys&quot;</span></span><br><span class="line">sysconfig</span><br><span class="line">sysctl.conf</span><br><span class="line">sysctl.d</span><br><span class="line">systemd</span><br><span class="line">system-release</span><br><span class="line">system-release-cpe</span><br></pre></td></tr></table></figure></li><li><p>行尾定位符”<code>$</code>“</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配以conf结尾的文件</span></span><br><span class="line">[root@gzh-8 ~]<span class="comment"># ls /etc | grep conf$</span></span><br><span class="line">chrony.conf</span><br><span class="line">dracut.conf</span><br><span class="line">fuse.conf</span><br><span class="line">host.conf</span><br><span class="line">idmapd.conf</span><br><span class="line">kdump.conf</span><br><span class="line">krb5.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>字符组”<code>[]</code>“</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配指定范围字符串和通配符[]用法一样</span></span><br><span class="line"><span class="comment"># 匹配rc开头且后面字符在[0-9]之间的</span></span><br><span class="line">[root@gzh-8 ~]<span class="comment"># ls /etc/ |grep &quot;^rc[0-9]&quot;</span></span><br><span class="line">rc0.d</span><br><span class="line">rc1.d</span><br><span class="line">rc2.d</span><br><span class="line">rc3.d</span><br><span class="line">rc4.d</span><br><span class="line">rc5.d</span><br><span class="line">rc6.d</span><br></pre></td></tr></table></figure></li><li><p>排除型字符组”<code>[^]</code>“</p><p>与<code>[]</code>用法相反.</p></li></ol><h3 id="3-2扩展正字表达式元字符"><a href="#3-2扩展正字表达式元字符" class="headerlink" title="3.2扩展正字表达式元字符"></a>3.2扩展正字表达式元字符</h3><ol><li><p>限定符”<code>+</code>“</p><p>匹配一次或多次字符</p></li><li><p>限定符”<code>?</code>“</p><p>只能匹配一次</p></li><li><p>“<code>|</code>“和”<code>()</code>“符号</p><p>“<code>|</code>“符号实现正则表达式之间的”或”运算,格式如下</p><p><code>表达式1 | 表达式2 | ... | 表达式n</code></p><p>“<code>()</code>“符号可以和<code>|</code>结合使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 ~]<span class="comment"># ls /etc | egrep &quot;(ssh|ssl|^yum)&quot;</span></span><br><span class="line">libssh</span><br><span class="line">ssh</span><br><span class="line">ssl</span><br><span class="line">yum</span><br><span class="line">yum.conf</span><br><span class="line">yum.repos.d</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-文本处理工具"><a href="#4-文本处理工具" class="headerlink" title="4.文本处理工具"></a>4.文本处理工具</h2><h3 id="4-1-grep"><a href="#4-1-grep" class="headerlink" title="4.1 grep"></a>4.1 grep</h3><p>它全称的意思是<code>全局搜索正则表达式并打印文本行</code></p><p>grep常用选项</p><ul><li>-i ：忽略大小写进行匹配。</li><li>-v ：反向查找，只打印不匹配的行。</li><li>-n ：显示匹配行的行号。</li><li>-r ：递归查找子目录中的文件。</li><li>-l ：只打印匹配的文件名。</li><li>-c ：只打印匹配的行数。</li></ul><p>例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 ~]<span class="comment"># grep -n ^# /etc/sysctl.conf</span></span><br><span class="line">1:<span class="comment"># sysctl settings are defined through files in</span></span><br><span class="line">2:<span class="comment"># /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.</span></span><br><span class="line">3:<span class="comment">#</span></span><br><span class="line">4:<span class="comment"># Vendors settings live in /usr/lib/sysctl.d/.</span></span><br><span class="line">5:<span class="comment"># To override a whole file, create a new file with the same in</span></span><br><span class="line">6:<span class="comment"># /etc/sysctl.d/ and put new settings there. To override</span></span><br><span class="line">7:<span class="comment"># only specific settings, add a file with a lexically later</span></span><br><span class="line">8:<span class="comment"># name in /etc/sysctl.d/ and put new settings there.</span></span><br><span class="line">9:<span class="comment">#</span></span><br><span class="line">10:<span class="comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span></span><br><span class="line"></span><br><span class="line">[root@gzh-8 ~]<span class="comment"># grep -c ^$ /etc/yum.conf</span></span><br><span class="line">0</span><br><span class="line">[root@gzh-8 ~]<span class="comment"># grep -c ^[^$] /etc/yum.conf</span></span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="4-2-sed"><a href="#4-2-sed" class="headerlink" title="4.2 sed"></a>4.2 sed</h3><p>sed 可依照脚本的指令来处理、编辑文本文件。</p><p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p><p><strong>常用参数</strong>：</p><ul><li>-e&lt;script&gt;或–expression&#x3D;&lt;script&gt; 以选项中指定的script来处理输入的文本文件。</li><li>-f&lt;script文件&gt;或–file&#x3D;&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。</li><li>-h或–help 显示帮助。</li><li>-n或–quiet或–silent 仅显示script处理后的结果。</li><li>-V或–version 显示版本信息。</li></ul><p><strong>编辑命令</strong>：</p><ul><li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li><li>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li><li>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</li><li>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li><li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li><li>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s&#x2F;old&#x2F;new&#x2F;g 就是啦！</li></ul><p>例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先编辑文件testfile</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat testfile </span></span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">Google</span><br><span class="line">Taobao</span><br><span class="line">Runoob</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 testfile 文件的第四行后添加一行，并将结果输出到标准输出</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sed -e 4a\gzh大帅哥 testfile </span></span><br><span class="line">HELLO LINUX!  </span><br><span class="line">Linux is a free unix-type opterating system.  </span><br><span class="line">This is a linux testfile!  </span><br><span class="line">Linux <span class="built_in">test</span> </span><br><span class="line">gzh大帅哥</span><br><span class="line">Google</span><br><span class="line">Taobao</span><br><span class="line">Runoob</span><br><span class="line">Tesetfile</span><br><span class="line">Wiki</span><br><span class="line"><span class="comment"># 将 testfile 的内容列出并且列印行号，同时，请将第 2~5 行删除！</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># nl testfile | sed &#x27;2,5d&#x27;</span></span><br><span class="line">     1  HELLO LINUX!  </span><br><span class="line">     6  Taobao</span><br><span class="line">     7  Runoob</span><br><span class="line">     8  Tesetfile</span><br><span class="line">     9  Wiki</span><br></pre></td></tr></table></figure><h3 id="4-3-awk"><a href="#4-3-awk" class="headerlink" title="4.3 awk"></a>4.3 awk</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [选项] pattern &#123;actions&#125; 文件</span><br></pre></td></tr></table></figure><p><strong>常用选项：</strong></p><ul><li>-F  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</li><li>-v  赋值一个用户定义变量。</li><li>-f  从脚本文件中读取awk命令。</li></ul><p> awk使用演示:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先创建一个test文件</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat test</span></span><br><span class="line">zhangsan        88      76      90      83</span><br><span class="line">lisi    100     69      89      84</span><br><span class="line">xiangwang       100     69      89      84</span><br><span class="line">xiangming       100     69      89      84</span><br><span class="line">lili    100     69      89      84</span><br><span class="line">xiaohaong       100     69      89      84</span><br><span class="line"><span class="comment"># 编写awk脚本文件</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat awk.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">result=`awk <span class="string">&#x27;$2&gt;80 &#123;print&#125;&#x27;</span> <span class="built_in">test</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh awk.sh </span></span><br><span class="line">zhangsan        88      76      90      83</span><br><span class="line">lisi    100     69      89      84</span><br><span class="line">xiangwang       100     69      89      84</span><br><span class="line">xiangming       100     69      89      84</span><br><span class="line">lili    100     69      89      84</span><br><span class="line">xiaohaong       100     69      89      84</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat awk.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">result=`awk <span class="string">&#x27;/^x/ &#123;print&#125;&#x27;</span> <span class="built_in">test</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh awk.sh </span></span><br><span class="line">xiangwang       100     69      89      84</span><br><span class="line">xiangming       100     69      89      84</span><br><span class="line">xiaohaong       100     69      89      84</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat awk.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">result=`awk <span class="string">&#x27;/^(zhang|li)/ &#123;print&#125;&#x27;</span> <span class="built_in">test</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh awk.sh </span></span><br><span class="line">zhangsan        88      76      90      83</span><br><span class="line">lisi    100     69      89      84</span><br><span class="line">lili    100     69      89      84</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat awk.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">result=`awk <span class="string">&#x27;/^li/ &amp;&amp; $2&gt;80 &#123;print&#125;&#x27;</span> <span class="built_in">test</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh awk.sh </span></span><br><span class="line">lisi    100     69      89      84</span><br><span class="line">lili    100     69      89      84</span><br></pre></td></tr></table></figure><h2 id="5-Shell脚本"><a href="#5-Shell脚本" class="headerlink" title="5.Shell脚本"></a>5.Shell脚本</h2><h3 id="5-1判断结构"><a href="#5-1判断结构" class="headerlink" title="5.1判断结构"></a>5.1判断结构</h3><ol><li><p>if结构</p><p>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令语句</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> expression; <span class="keyword">then</span></span><br><span class="line">命令语句</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>判断当前目录下面是否存在test文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat if.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="built_in">test</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;test存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh if.sh </span></span><br><span class="line"><span class="built_in">test</span>存在</span><br></pre></td></tr></table></figure></li><li><p>if&#x2F;else结构</p><p>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令语句1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">命令语句2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>读取用户输入的字符串,如果字符串为空,则输入空,若不为空则输出字符串</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat ifelse.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入字符串: &quot;</span></span><br><span class="line"><span class="built_in">read</span> str</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$str</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;字符串为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh ifelse.sh </span></span><br><span class="line">请输入字符串: </span><br><span class="line"></span><br><span class="line">字符串为空</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh ifelse.sh </span></span><br><span class="line">请输入字符串: </span><br><span class="line">gzh</span><br><span class="line">gzh</span><br></pre></td></tr></table></figure><ol start="3"><li><p>if&#x2F;elif&#x2F;else结构</p><p>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression1; <span class="keyword">then</span></span><br><span class="line">命令语句1</span><br><span class="line"><span class="keyword">elif</span> expression2; <span class="keyword">then</span></span><br><span class="line">命令语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>读取输入的学生成绩,判断成绩等级</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat ifelif.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入成绩: &quot;</span></span><br><span class="line"><span class="built_in">read</span> score</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$score</span> -lt 0 -o <span class="variable">$score</span> -gt 100 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> error score</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -ge 90 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> A</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -ge 80 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> B</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -ge 70 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> C</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">echo</span> D</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh ifelif.sh </span></span><br><span class="line">请输入成绩: </span><br><span class="line">90</span><br><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>case结构</p><p>通过用户输入的整数值判断是周几</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      [root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat case.sh</span></span><br><span class="line">      <span class="comment">#!/bin/bash</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;请输入:&quot;</span></span><br><span class="line">      <span class="built_in">read</span> week</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$week</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">      1)</span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期一&quot;</span>;;</span><br><span class="line">      2)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期二&quot;</span>;;</span><br><span class="line">      3)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期三&quot;</span>;;</span><br><span class="line">      4)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期四&quot;</span>;;</span><br><span class="line">      5)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期五&quot;</span>;;</span><br><span class="line">      6)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期六&quot;</span>;;</span><br><span class="line">      7)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;星期天&quot;</span>;;</span><br><span class="line">      *)      </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;错误&quot;</span>;;</span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">      [root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh case.sh </span></span><br><span class="line">      请输入:</span><br><span class="line">      1</span><br><span class="line">      星期一</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5.2 循环结构</span></span><br><span class="line"></span><br><span class="line">1. <span class="keyword">for</span>循环</span><br><span class="line"></span><br><span class="line">   格式</span><br><span class="line"></span><br><span class="line">   ```bash</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> &#123;list&#125;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   命令语句</span><br><span class="line">   <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ol><p>循环输出1-5</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat for.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh for.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><p>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令语句</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>循环输出1-5</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat while.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">num=1</span><br><span class="line"><span class="keyword">while</span> ((<span class="variable">$num</span>&lt;=<span class="number">5</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">        <span class="built_in">let</span> num++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh while.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>until循环</p><p>格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令语句</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>循环输出1-5</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat until.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">num=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$num</span> -gt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">        <span class="built_in">let</span> num++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh until.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"><span class="comment"># 要注意的是[]里面的空格不能省略</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3break与continue"><a href="#5-3break与continue" class="headerlink" title="5.3break与continue"></a>5.3break与continue</h3><ol><li><p>break</p><p>当num变量值为3时退出循环</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat break.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">num=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$num</span> -gt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$num</span> -eq 3 ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">let</span> num++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;now,exit until circulation&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh break.sh </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">now,<span class="built_in">exit</span> <span class="keyword">until</span> circulation</span><br></pre></td></tr></table></figure></li><li><p>continue</p><p>输出1-50内可以被5整除的数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat continue.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> &#123;1..50&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">let</span> temp=num%5</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$temp</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh continue.sh </span></span><br><span class="line">5</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">20</span><br><span class="line">25</span><br><span class="line">30</span><br><span class="line">35</span><br><span class="line">40</span><br><span class="line">45</span><br><span class="line">50</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-脚本实例"><a href="#6-脚本实例" class="headerlink" title="6.脚本实例"></a>6.脚本实例</h2><h3 id="6-1模拟用户登录"><a href="#6-1模拟用户登录" class="headerlink" title="6.1模拟用户登录"></a>6.1模拟用户登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat -n dl.sh </span></span><br><span class="line">     1  <span class="comment">#!/bin/bash</span></span><br><span class="line">     2  <span class="built_in">read</span> -ep <span class="string">&quot;请输入用户名: &quot;</span> name</span><br><span class="line">     3  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;gzh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     4          <span class="built_in">read</span> -ep <span class="string">&quot;请输入密码: &quot;</span> passwd       </span><br><span class="line">     5          <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$passwd</span>&quot;</span> == <span class="string">&quot;guo123&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     6                  <span class="built_in">echo</span> <span class="string">&quot;登陆成功&quot;</span></span><br><span class="line">     7          <span class="keyword">else</span></span><br><span class="line">     8                  <span class="built_in">echo</span> <span class="string">&quot;密码错误!&quot;</span></span><br><span class="line">     9          <span class="keyword">fi</span></span><br><span class="line">    10  <span class="keyword">else</span> </span><br><span class="line">    11          <span class="built_in">echo</span> <span class="string">&quot;用户名错误!&quot;</span></span><br><span class="line">    12  <span class="keyword">fi</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh dl.sh </span></span><br><span class="line">请输入用户名: gzh</span><br><span class="line">请输入密码: guo123</span><br><span class="line">登陆成功</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh dl.sh </span></span><br><span class="line">请输入用户名: guo</span><br><span class="line">用户名错误!</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh dl.sh </span></span><br><span class="line">请输入用户名: gzh</span><br><span class="line">请输入密码: gzh</span><br><span class="line">密码错误!</span><br></pre></td></tr></table></figure><h3 id="6-2监控系统运行情况"><a href="#6-2监控系统运行情况" class="headerlink" title="6.2监控系统运行情况"></a>6.2监控系统运行情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat -n system.sh </span></span><br><span class="line">     1  <span class="comment">#!/bin/bash</span></span><br><span class="line">     2  <span class="built_in">echo</span> <span class="string">&quot;(1)*****************************************&quot;</span></span><br><span class="line">     3  <span class="built_in">date</span>;</span><br><span class="line">     4  <span class="built_in">echo</span> <span class="string">&quot;Active User: &quot;</span></span><br><span class="line">     5  w</span><br><span class="line">     6  <span class="built_in">echo</span> <span class="string">&quot;(2)*****************************************&quot;</span></span><br><span class="line">     7  <span class="built_in">echo</span> <span class="string">&quot;Linux process: &quot;</span></span><br><span class="line">     8  top -b | <span class="built_in">head</span> -6</span><br><span class="line">     9  <span class="built_in">echo</span> <span class="string">&quot;(3)*****************************************&quot;</span></span><br><span class="line">    10  <span class="built_in">echo</span> <span class="string">&quot;Disk an Memory use ratio: &quot;</span></span><br><span class="line">    11  <span class="built_in">df</span> -h |xargs | awk <span class="string">&#x27;&#123;print &quot;Fress/total disk: &quot; $11&quot;/&quot;$9&#125;&#x27;</span></span><br><span class="line">    12free -m |xargs | awk <span class="string">&#x27;&#123;print &quot;Fress/total memory: &quot; $17&quot;/&quot;$8&quot;MB&quot;&#125;&#x27;</span></span><br><span class="line">    13  <span class="built_in">echo</span> <span class="string">&quot;(4)*****************************************&quot;</span></span><br><span class="line">    14  <span class="built_in">echo</span> <span class="string">&quot;All Processec: &quot;</span></span><br><span class="line">    15  ps auxf</span><br><span class="line">    16  <span class="built_in">echo</span> <span class="string">&quot;(5)*****************************************&quot;</span></span><br><span class="line">    17  <span class="built_in">echo</span> <span class="string">&quot;vmstat: &quot;</span></span><br><span class="line">    18  vmstat 1 5</span><br><span class="line">    19  <span class="built_in">echo</span> <span class="string">&quot;(6)*****************************************&quot;</span></span><br><span class="line">    20  <span class="built_in">echo</span> <span class="string">&quot;Scan the entire subnet: &quot;</span></span><br><span class="line">    21  nmap 192.168.88.*</span><br><span class="line">    22  <span class="built_in">echo</span> <span class="string">&quot;(7)*****************************************&quot;</span></span><br><span class="line">    23  <span class="built_in">echo</span> <span class="string">&quot;socket for each process: &quot;</span></span><br><span class="line">    24  ss -pl</span><br></pre></td></tr></table></figure><ol><li>2-5行代码显示主机时间和当前用户信息</li><li>6-8行代码用来显示CPU使用请款</li><li>9-12行用来显示硬盘与内存的使用情况</li><li>13-15行显示终端下的所有进程</li><li>16-18用来显示虚拟内存的使用情况</li><li>19-21用来扫描和主机一个段下的所有主机</li><li>22-24用来查看每个进程显示的具体socket</li></ol><h3 id="6-3备份MySQL数据库"><a href="#6-3备份MySQL数据库" class="headerlink" title="6.3备份MySQL数据库"></a>6.3备份MySQL数据库</h3><p>第一步安装MySQL</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span></span><br><span class="line">--2023-09-21 23:49:12--  https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span><br><span class="line">正在解析主机 dev.mysql.com (dev.mysql.com)... 223.119.225.252, 2402:4f00:4002:194::2e31, 2402:4f00:4002:182::2e31</span><br><span class="line">正在连接 dev.mysql.com (dev.mysql.com)|223.119.225.252|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 302 Moved Temporarily</span><br><span class="line">位置：https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm [跟随至新的 URL]</span><br><span class="line">--2023-09-21 23:49:18--  https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm</span><br><span class="line">正在解析主机 repo.mysql.com (repo.mysql.com)... 23.49.202.55, 2402:4f00:4001:1af::1d68, 2402:4f00:4001:186::1d68</span><br><span class="line">正在连接 repo.mysql.com (repo.mysql.com)|23.49.202.55|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：30388 (30K) [application/x-redhat-package-manager]</span><br><span class="line">正在保存至: “mysql80-community-release-el8-1.noarch.rpm”</span><br><span class="line"></span><br><span class="line">mysql80-community-release- 100%[======================================&gt;]  29.68K  60.2KB/s  用时 0.5s    </span><br><span class="line"></span><br><span class="line">2023-09-21 23:49:24 (60.2 KB/s) - 已保存 “mysql80-community-release-el8-1.noarch.rpm” [30388/30388])</span><br><span class="line"></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># yum install mysql80-community-release-el8-1.noarch.rpm</span></span><br><span class="line">上次元数据过期检查：0:07:57 前，执行于 2023年09月21日 星期四 23时41分52秒。</span><br><span class="line">错误：</span><br><span class="line"> 问题: package mysql80-community-release-el8-1.noarch conflicts with mysql57-community-release provided by mysql57-community-release-el7-7.noarch</span><br><span class="line">  - conflicting requests</span><br><span class="line">  - problem with installed package mysql57-community-release-el7-7.noarch</span><br><span class="line">(尝试在命令行中添加 <span class="string">&#x27;--allowerasing&#x27;</span> 来替换冲突的软件包 或 <span class="string">&#x27;--skip-broken&#x27;</span> 来跳过无法安装的软件包 或 <span class="string">&#x27;--nobest&#x27;</span> 来不只使用软件包的最佳候选)</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># yum install mysql80-community-release-el8-1.noarch.rpm --allowerasing</span></span><br><span class="line">上次元数据过期检查：0:08:23 前，执行于 2023年09月21日 星期四 23时41分52秒。</span><br><span class="line">依赖关系解决。</span><br><span class="line">==========================================================================================================</span><br><span class="line"> 软件包                               架构              版本                仓库                     大小</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装:</span><br><span class="line"> mysql80-community-release            noarch            el8-1               @commandline             30 k</span><br><span class="line">移除依赖的软件包:</span><br><span class="line"> mysql57-community-release            noarch            el7-7               @System                 7.8 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line">移除  1 软件包</span><br><span class="line"></span><br><span class="line">总计：30 k</span><br><span class="line">确定吗？[y/N]： y</span><br><span class="line">下载软件包：</span><br><span class="line">运行事务检查</span><br><span class="line">事务检查成功。</span><br><span class="line">运行事务测试</span><br><span class="line">事务测试成功。</span><br><span class="line">运行事务</span><br><span class="line">  准备中  :                                                                                           1/1 </span><br><span class="line">  安装    : mysql80-community-release-el8-1.noarch                                                    1/2 </span><br><span class="line">  删除    : mysql57-community-release-el7-7.noarch                                                    2/2 </span><br><span class="line">  验证    : mysql80-community-release-el8-1.noarch                                                    1/2 </span><br><span class="line">  验证    : mysql57-community-release-el7-7.noarch                                                    2/2 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  mysql80-community-release-el8-1.noarch                                                                  </span><br><span class="line">已移除:</span><br><span class="line">  mysql57-community-release-el7-7.noarch                                                                  </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span></span><br><span class="line">mysql-connectors-community       MySQL Connectors Community</span><br><span class="line">mysql-tools-community            MySQL Tools Community</span><br><span class="line">mysql80-community                MySQL 8.0 Community Server</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># yum module disable mysql</span></span><br><span class="line">MySQL 8.0 Community Server                                                236 kB/s | 3.2 MB     00:13    </span><br><span class="line">MySQL Connectors Community                                                8.4 kB/s | 102 kB     00:12    </span><br><span class="line">MySQL Tools Community                                                      59 kB/s | 794 kB     00:13    </span><br><span class="line">上次元数据过期检查：0:00:01 前，执行于 2023年09月21日 星期四 23时51分24秒。</span><br><span class="line">依赖关系解决。</span><br><span class="line">==========================================================================================================</span><br><span class="line"> 软件包                   架构                    版本                     仓库                      大小</span><br><span class="line">==========================================================================================================</span><br><span class="line">禁用模块:</span><br><span class="line"> mysql                                                                                                   </span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">==========================================================================================================</span><br><span class="line"></span><br><span class="line">确定吗？[y/N]： y</span><br><span class="line">完毕！</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># yum install mysql-community-server</span></span><br><span class="line">上次元数据过期检查：0:00:42 前，执行于 2023年09月21日 星期四 23时51分24秒。</span><br><span class="line">依赖关系解决。</span><br><span class="line">==========================================================================================================</span><br><span class="line"> 软件包                          架构    版本                                    仓库                大小</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装:</span><br><span class="line"> mysql-community-server          x86_64  8.0.34-1.el8                            mysql80-community   64 M</span><br><span class="line">安装依赖关系:</span><br><span class="line"> mysql-community-client          x86_64  8.0.34-1.el8                            mysql80-community   16 M</span><br><span class="line"> mysql-community-client-plugins  x86_64  8.0.34-1.el8                            mysql80-community  3.5 M</span><br><span class="line"> ...</span><br><span class="line">安装弱的依赖:</span><br><span class="line"> perl-IO-Socket-IP               noarch  0.39-5.el8                              AppStream           47 k</span><br><span class="line"> perl-IO-Socket-SSL              noarch  2.066-4.module_el8.3.0+410+ff426aa3     AppStream          298 k</span><br><span class="line"> perl-Mozilla-CA                 noarch  20160104-7.module_el8.3.0+416+dee7bcef  AppStream           15 k</span><br><span class="line">启用模块流:</span><br><span class="line"> perl                                    5.26                                                            </span><br><span class="line"> perl-IO-Socket-SSL                      2.066                                                           </span><br><span class="line"> perl-libwww-perl                        6.34                                                            </span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装  48 软件包</span><br><span class="line"></span><br><span class="line">总下载：101 M</span><br><span class="line">安装大小：452 M</span><br><span class="line">确定吗？[y/N]： y</span><br><span class="line">下载软件包：</span><br><span class="line">(1/48): perl-Carp-1.42-396.el8.noarch.rpm                                 5.7 kB/s |  30 kB     00:05    </span><br><span class="line">(2/48): perl-Data-Dumper-2.167-399.el8.x86_64.rpm                          11 kB/s |  58 kB     00:05    </span><br><span class="line">(3/48): net-tools-2.0-0.52.20160912git.el8.x86_64.rpm                      57 kB/s | 322 kB     00:05    </span><br><span class="line">(4/48): perl-Errno-1.28-420.el8.x86_64.rpm                             ...</span><br><span class="line">...                                                                </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># systemctl start mysqld</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># systemctl enable mysqld</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: Mysql安装完以后会生成随机密码,查看随机密码并更改他</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># grep &#x27;temporary password&#x27; /var/log/mysqld.log</span></span><br><span class="line">2023-09-22T03:54:04.925109Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: I1!j8ZBk8f(&amp;</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 10</span><br><span class="line">Server version: 8.0.34</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Guozhihang0206.&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.policy=low;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;guo123&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>要备份数据库先确定备份的数据库列表,这里新建一个数据库列表test</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># mysql -u root -pguo123</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 19</span><br><span class="line">Server version: 8.0.34 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; create database <span class="built_in">test</span>;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>编写sqlbak.sh脚本文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># cat sqlbak.sh </span></span><br><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="comment">#完成数据库的定时备份</span></span><br><span class="line"><span class="comment">#备份的路径</span></span><br><span class="line">BACKUP=/root/mysqlbak</span><br><span class="line"><span class="comment">#当前的时间作为文件名</span></span><br><span class="line">DATETIME=$(<span class="built_in">date</span> +%Y_%m_%d_%H%M%S)</span><br><span class="line"><span class="comment">#可以输出变量调试</span></span><br><span class="line"><span class="comment">#echo $&#123;DATETIME&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==========开始备份===========&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;备份的路径是 <span class="variable">$BACKUP</span>/<span class="variable">$DATETIME</span>.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">DB_PWD=guo123</span><br><span class="line"><span class="comment">#备份数据库名</span></span><br><span class="line">DATABASE=<span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">#创建备份的路径</span></span><br><span class="line"><span class="comment">#如果备份的路径文件夹存在就使用，否则创建</span></span><br><span class="line">[ ! -d <span class="string">&quot;<span class="variable">$BACKUP</span>/<span class="variable">$DATETIME</span>&quot;</span>  ]  &amp;&amp; <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$BACKUP</span>/<span class="variable">$DATETIME</span>&quot;</span> </span><br><span class="line"><span class="comment">#执行mysql的备份数据库的指令</span></span><br><span class="line">mysqldump -u<span class="variable">$&#123;DB_USER&#125;</span> -p<span class="variable">$&#123;DB_PWD&#125;</span> --host=<span class="variable">$HOST</span>  <span class="variable">$DATABASE</span> | gzip  &gt; <span class="variable">$BACKUP</span>/<span class="variable">$DATETIME</span>/<span class="variable">$DATETIME</span>.sql.gz</span><br><span class="line"><span class="comment">#打包备份文件</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BACKUP</span></span><br><span class="line">tar -zcvf  <span class="variable">$DATETIME</span>.tar.gz  <span class="variable">$DATETIME</span></span><br><span class="line"><span class="comment">#删除临时目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf  <span class="variable">$BACKUP</span>/<span class="variable">$DATETIME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除10天前的备份文件(-exec rm -rf &#123;&#125; \是固定写法，删除查询出来的数据)</span></span><br><span class="line">find <span class="variable">$BACKUP</span> -mtime +10 -name  <span class="string">&quot;*.tar.gz&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==========备份完成===========&quot;</span></span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># sh sqlbak.sh </span></span><br><span class="line">==========开始备份===========</span><br><span class="line">备份的路径是 /root/mysqlbak/2023_09_22_032545.tar.gz</span><br><span class="line">mysqldump: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">2023_09_22_032545/</span><br><span class="line">2023_09_22_032545/2023_09_22_032545.sql.gz</span><br><span class="line">==========备份完成===========</span><br><span class="line">[root@gzh-8 <span class="built_in">test</span>]<span class="comment"># ls ../mysqlbak/</span></span><br><span class="line">2023_09_22_032545.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM虚拟化技术</title>
      <link href="/posts/97c662f1/"/>
      <url>/posts/97c662f1/</url>
      
        <content type="html"><![CDATA[<h2 id="第九章-KVM虚拟化技术"><a href="#第九章-KVM虚拟化技术" class="headerlink" title="第九章 KVM虚拟化技术"></a>第九章 KVM虚拟化技术</h2><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>KVM（<em>Kernel-based Virtual Machine 的</em>缩写）是一个 Linux 虚拟化应用程序，它使用户能够将他们的机器变成管理程序并在隔离的环境中运行多个虚拟机。</p><h2 id="2-安装-KVM"><a href="#2-安装-KVM" class="headerlink" title="2.安装 KVM"></a>2.<strong>安装 KVM</strong></h2><h3 id="2-1检查您的系统是否支持硬件虚拟化"><a href="#2-1检查您的系统是否支持硬件虚拟化" class="headerlink" title="2.1检查您的系统是否支持硬件虚拟化"></a>2.1<strong>检查您的系统是否支持硬件虚拟化</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cat /proc/cpuinfo | egrep &quot;vmx|svm&quot;</span></span><br></pre></td></tr></table></figure><p>输入该命令如果返回为空值,要在虚拟机设置里面把虚拟化打开,</p><p>如下图:</p><p><img src="https://oss.lingkongstudy.com.cn/blog/PixPin_2023-11-30_10-23-15.png" alt="img">如果提示该平台不支持嵌套虚拟化</p><p>请参考这篇文章:<a href="https://blog.csdn.net/qq_44777532/article/details/124662130">https://blog.csdn.net/qq_44777532/article/details/124662130</a></p><p>启动成功后在输入上面的命令输出如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cat /proc/cpuinfo | egrep &quot;vmx|svm&quot;</span></span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl tsc_reliable nonstop_tsc cpuid extd_apicid pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext ssbd ibrs ibpb vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero wbnoinvd arat npt svm_lock nrip_save vmcb_clean flushbyasid decodeassists umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor fsrm</span><br></pre></td></tr></table></figure><h3 id="2-2安装KVM"><a href="#2-2安装KVM" class="headerlink" title="2.2安装KVM"></a>2.2<strong>安装KVM</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install @virt</span><br></pre></td></tr></table></figure><p>接下来，启动并启用<strong>libvirtd</strong>服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># systemctl enable --now libvirtd</span></span><br></pre></td></tr></table></figure><p>安装 KVM 管理所需的工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># yum -y install virt-top libguestfs-tools</span></span><br></pre></td></tr></table></figure><h2 id="3-验证-KVM-安装"><a href="#3-验证-KVM-安装" class="headerlink" title="3.验证 KVM 安装"></a>3.<strong>验证 KVM 安装</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># lsmod | grep kvm</span></span><br><span class="line">kvm_amd               110592  0</span><br><span class="line">ccp                    98304  1 kvm_amd</span><br><span class="line">kvm                   847872  1 kvm_amd</span><br><span class="line">irqbypass              16384  1 kvm</span><br></pre></td></tr></table></figure><h2 id="4-配置桥接接口"><a href="#4-配置桥接接口" class="headerlink" title="4.配置桥接接口"></a>4.<strong>配置桥接接口</strong></h2><p>从管理程序网络外部访问 VM 需要桥接接口。要创建桥接接口，首先要确定连接到您机器的网络接口：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># nmcli con</span></span><br><span class="line">NAME    UUID                                  TYPE      DEVICE </span><br><span class="line">ens160  af04ba70-cb39-4017-afed-3f23f616c00c  ethernet  ens160 </span><br><span class="line">virbr0  6784c1a0-80cb-49b9-871a-a6fc05068cf0  bridge    virbr0 </span><br></pre></td></tr></table></figure><p>因为我们是虚拟机只需要再增加一个桥接网卡即可</p><h2 id="5-通过命令行创建虚拟机"><a href="#5-通过命令行创建虚拟机" class="headerlink" title="5.通过命令行创建虚拟机"></a>5.通过命令行创建虚拟机</h2><p>要在 CentOS 8 中通过命令行创建 VM，使用<code>virt-install</code>命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># virt-install --name=Ubuntu-20-04 --file=/var/lib/libvirt/images/ubuntu20-04.dsk --file-size=15 --nonsparse --graphics spice--vcpus=2--ram=2048--cdrom=Downloads/ubuntu-20.04.1-desktop-amd64.iso--network bridge=br1 --0s-type=linux--os-variant=generic</span></span><br></pre></td></tr></table></figure><p>上面的示例使用以下命令行参数，这些参数是根据您的偏好设置虚拟机所必需的：</p><p><img src="https://oss.lingkongstudy.com.cn/blog/PixPin_2023-11-30_11-22-47.png"></p><h2 id="6-通过-GUI-创建虚拟机"><a href="#6-通过-GUI-创建虚拟机" class="headerlink" title="6.通过 GUI 创建虚拟机"></a>6.通过 GUI 创建虚拟机</h2><p>使用 virt-manager GUI 创建带有 KVM 的 VM。</p><ol><li>首先，安装 virt-manager：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install virt-manager</span><br></pre></td></tr></table></figure><ol start="2"><li>从控制台启动 virt-manager：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-manager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令与工具</title>
      <link href="/posts/36fb4c45/"/>
      <url>/posts/36fb4c45/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令与工具"><a href="#Linux命令与工具" class="headerlink" title="Linux命令与工具"></a>Linux命令与工具</h1><h2 id="一-用户与用户组管理"><a href="#一-用户与用户组管理" class="headerlink" title="一.用户与用户组管理"></a>一.用户与用户组管理</h2><h3 id="1-1用户管理"><a href="#1-1用户管理" class="headerlink" title="1.1用户管理"></a>1.1用户管理</h3><h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新用户gzh,指定用户目录为/usr/gzh并自动创建登录目录,id为876</span></span><br><span class="line">useradd -d /usr/gzh -m gzh -u 876</span><br><span class="line"><span class="comment"># 查看新建用户的属性信息</span></span><br><span class="line"><span class="built_in">tail</span> -l /etc/passwd</span><br><span class="line"><span class="comment"># 查看root相关的属性信息</span></span><br><span class="line">grep root /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907101025253.png" alt="image-20230907101025253"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907101044129.png" alt="image-20230907101044129"></p><h4 id="2-设置用户密码"><a href="#2-设置用户密码" class="headerlink" title="2.设置用户密码"></a>2.设置用户密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为gzh用户设置密码</span></span><br><span class="line">[root@gzh-8 ~]<span class="comment"># passwd gzh</span></span><br><span class="line">更改用户 gzh 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure><h4 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制删除用户gzh及其相关文件</span></span><br><span class="line">userdel -rf gzh</span><br></pre></td></tr></table></figure><h4 id="4-修改用户信息"><a href="#4-修改用户信息" class="headerlink" title="4.修改用户信息"></a>4.修改用户信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户gzh的用户id为678</span></span><br><span class="line">usermod -u 678 gzh</span><br></pre></td></tr></table></figure><h3 id="1-2用户组管理"><a href="#1-2用户组管理" class="headerlink" title="1.2用户组管理"></a>1.2用户组管理</h3><h4 id="1-新增用户组"><a href="#1-新增用户组" class="headerlink" title="1.新增用户组"></a>1.新增用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户组guo1,指定组id为550</span></span><br><span class="line">groupadd -g 550 guo1</span><br></pre></td></tr></table></figure><h4 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除组guo1</span></span><br><span class="line">groupdel group1</span><br></pre></td></tr></table></figure><h4 id="3-修改用户组属性"><a href="#3-修改用户组属性" class="headerlink" title="3.修改用户组属性"></a>3.修改用户组属性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建组ID为550的用户组group1,修改组id,修改组名</span></span><br><span class="line">groupadd guo1 -g 550</span><br><span class="line">groupmod -o itheima -g 550</span><br><span class="line">groupmod gou1 -n itcast</span><br></pre></td></tr></table></figure><h4 id="4-用户组切换"><a href="#4-用户组切换" class="headerlink" title="4.用户组切换"></a>4.用户组切换</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换root的工作组为itcast</span></span><br><span class="line">newgrp itcast</span><br></pre></td></tr></table></figure><h4 id="5-用户组管理"><a href="#5-用户组管理" class="headerlink" title="5.用户组管理"></a>5.用户组管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将用户itheima添加到用户组itcast</span></span><br><span class="line">gpasswd -a itheima itcast</span><br></pre></td></tr></table></figure><h3 id="1-3用户切换"><a href="#1-3用户切换" class="headerlink" title="1.3用户切换"></a>1.3用户切换</h3><h4 id="1-su"><a href="#1-su" class="headerlink" title="1.su"></a>1.su</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从用户切换到root</span></span><br><span class="line">su</span><br><span class="line"><span class="comment"># 从用户切换到root并更改工作目录</span></span><br><span class="line">su -</span><br><span class="line"><span class="comment"># 从用户切换到gzh</span></span><br><span class="line">su -m gzh</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907103002069.png" alt="image-20230907103002069"></p><h4 id="2-sudo"><a href="#2-sudo" class="headerlink" title="2.sudo"></a>2.sudo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果再普通用户下打开高于去自身权限的文件,可以使用sudo打开,但是用户必须再sudoers里面进行权限设置,不然会出现下面的报错</span></span><br><span class="line">sudo vi /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907103447670.png" alt="image-20230907103447670"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们需要先用root使用visudo打开sudoers文件,在里面添加我们的用户</span></span><br><span class="line">visudo</span><br></pre></td></tr></table></figure><p>我们可以找到下面的这个语句</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907103636821.png" alt="image-20230907103636821"></p><p>我们需要添加下面两条语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzh ALL=(root) /bin/more</span><br><span class="line">%gzh ALL=(root) /bin/more</span><br></pre></td></tr></table></figure><h2 id="二-文件管理"><a href="#二-文件管理" class="headerlink" title="二.文件管理"></a>二.文件管理</h2><h3 id="2-1文件操作"><a href="#2-1文件操作" class="headerlink" title="2.1文件操作"></a>2.1文件操作</h3><h4 id="1-pwd"><a href="#1-pwd" class="headerlink" title="1.pwd"></a>1.pwd</h4><p>查看当前所在目录</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907104309951.png" alt="image-20230907104309951"></p><h4 id="2-cd"><a href="#2-cd" class="headerlink" title="2.cd"></a>2.cd</h4><p>进入指定目录</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907104502752.png" alt="image-20230907104502752"></p><h4 id="3-ls"><a href="#3-ls" class="headerlink" title="3.ls"></a>3.ls</h4><p>列出目录文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907104551535.png" alt="image-20230907104551535"></p><h4 id="4-touch"><a href="#4-touch" class="headerlink" title="4.touch"></a>4.touch</h4><p>创建文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110335789.png" alt="image-20230907110335789"></p><h4 id="5-mkdir"><a href="#5-mkdir" class="headerlink" title="5.mkdir"></a>5.mkdir</h4><p>创建文件夹</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110439043.png" alt="image-20230907110439043"></p><h4 id="6-cp"><a href="#6-cp" class="headerlink" title="6.cp"></a>6.cp</h4><p>复制文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110515249.png" alt="image-20230907110515249"></p><h4 id="7-rm"><a href="#7-rm" class="headerlink" title="7.rm"></a>7.rm</h4><p>删除文件或目录</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110612704.png" alt="image-20230907110612704"></p><h4 id="8-mv"><a href="#8-mv" class="headerlink" title="8.mv"></a>8.mv</h4><p>移动文件或目录,或重命名</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110749132.png" alt="image-20230907110749132"></p><h3 id="2-2查看文件"><a href="#2-2查看文件" class="headerlink" title="2.2查看文件"></a>2.2查看文件</h3><h4 id="1-cat"><a href="#1-cat" class="headerlink" title="1.cat"></a>1.cat</h4><p>查看文件内容</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110852927.png" alt="image-20230907110852927"></p><h4 id="2-more"><a href="#2-more" class="headerlink" title="2.more"></a>2.more</h4><p>分页查看文件内容</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907110947846.png" alt="image-20230907110947846"></p><h4 id="3-less"><a href="#3-less" class="headerlink" title="3.less"></a>3.less</h4><p>也是分页查看内容</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111104007.png" alt="image-20230907111104007"></p><h4 id="4-head"><a href="#4-head" class="headerlink" title="4.head"></a>4.head</h4><p>查看文件的前几行</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111235107.png" alt="image-20230907111235107"></p><h4 id="5-tail"><a href="#5-tail" class="headerlink" title="5.tail"></a>5.tail</h4><p>查看文件后几行的内容</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111352724.png" alt="image-20230907111352724"></p><h4 id="6-wc"><a href="#6-wc" class="headerlink" title="6.wc"></a>6.wc</h4><p>计算文件的字节数,字数,列数</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111450741.png" alt="image-20230907111450741"></p><h3 id="2-3文件搜索"><a href="#2-3文件搜索" class="headerlink" title="2.3文件搜索"></a>2.3文件搜索</h3><h4 id="1-which"><a href="#1-which" class="headerlink" title="1.which"></a>1.which</h4><p>查看指定命令的绝对路径</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111603160.png" alt="image-20230907111603160"></p><h4 id="2-find"><a href="#2-find" class="headerlink" title="2.find"></a>2.find</h4><p>搜索指定目录下的文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907111700446.png" alt="image-20230907111700446"></p><h3 id="2-4权限管理"><a href="#2-4权限管理" class="headerlink" title="2.4权限管理"></a>2.4权限管理</h3><h4 id="1-chmod"><a href="#1-chmod" class="headerlink" title="1.chmod"></a>1.chmod</h4><p>改变文件和目录的权限</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907112011157.png" alt="image-20230907112011157"></p><h4 id="2-chown"><a href="#2-chown" class="headerlink" title="2.chown"></a>2.chown</h4><p>改变文件和目录的所属人</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907112135572.png" alt="image-20230907112135572"></p><h4 id="3-chgrp"><a href="#3-chgrp" class="headerlink" title="3.chgrp"></a>3.chgrp</h4><p>改变文件和目录的所属组</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907112321354.png" alt="image-20230907112321354"></p><h3 id="2-5压缩解压"><a href="#2-5压缩解压" class="headerlink" title="2.5压缩解压"></a>2.5压缩解压</h3><h4 id="1-打包"><a href="#1-打包" class="headerlink" title="1.打包"></a>1.打包</h4><p>打包文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230907112605077.png" alt="image-20230907112605077"></p><h4 id="2-压缩与解压"><a href="#2-压缩与解压" class="headerlink" title="2.压缩与解压"></a>2.压缩与解压</h4><p>压缩文件与解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcvf test.tar ./gzh</span><br><span class="line">tar -zcvf test.tar.gz ./gzh</span><br><span class="line">tar -jcvf test.tar.bz2 ./gzh</span><br><span class="line">tar -zxvf test.tar</span><br></pre></td></tr></table></figure><h2 id="三-存储管理"><a href="#三-存储管理" class="headerlink" title="三.存储管理"></a>三.存储管理</h2><h3 id="1-分区的添加-格式化和挂载"><a href="#1-分区的添加-格式化和挂载" class="headerlink" title="1.分区的添加,格式化和挂载"></a>1.分区的添加,格式化和挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对sdb进行分区格式化和挂载</span></span><br><span class="line"><span class="comment"># root @ lingkong in ~ [23:37:19] </span></span><br><span class="line">$ fdisk /dev/sdb</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (3 primary, 0 extended, 1 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default e): p</span><br><span class="line">已选择分区 4</span><br><span class="line">起始 扇区 (5220352-41943039，默认为 5220352)：</span><br><span class="line">将使用默认值 5220352</span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (5220352-41943039，默认为 41943039)：+500M</span><br><span class="line">分区 4 已设置为 Linux 类型，大小设为 500 MiB</span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">正在同步磁盘。</span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">mkfs.xfs /dev/sdb1</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount /dev/sdb1</span><br><span class="line"><span class="comment"># 永久挂载</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line">/dev/sdb1 /mnt xfs default 0 0</span><br><span class="line">:wq</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h3 id="2-逻辑卷的创建-格式化和挂载"><a href="#2-逻辑卷的创建-格式化和挂载" class="headerlink" title="2.逻辑卷的创建,格式化和挂载"></a>2.逻辑卷的创建,格式化和挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分区</span></span><br><span class="line"><span class="comment"># root @ lingkong in ~ [23:40:05] C:1</span></span><br><span class="line">$ fdisk /dev/sdb</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：t</span><br><span class="line">分区号 (1-4，默认 4)：1</span><br><span class="line">Hex 代码(输入 L 列出所有代码)：l</span><br><span class="line"></span><br><span class="line"> 0  空              24  NEC DOS         81  Minix / 旧 Linu bf  Solaris        </span><br><span class="line"> 1  FAT12           27  隐藏的 NTFS Win 82  Linux 交换 / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 隐藏的 C:  c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux 扩展      c7  Syrinx         </span><br><span class="line"> 5  扩展            41  PPC PReP Boot   86  NTFS 卷集       da  非文件系统数据 </span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS 卷集       db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux 纯文本    de  Dell 工具      </span><br><span class="line"> 8  AIX             4e  QNX4.x 第2部分  8e  Linux LVM       <span class="built_in">df</span>  BootIt         </span><br><span class="line"> 9  AIX 可启动      4f  QNX4.x 第3部分  93  Amoeba          e1  DOS 访问       </span><br><span class="line"> a  OS/2 启动管理器 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O        </span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor      </span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad 休 eb  BeOS fs        </span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT            </span><br><span class="line"> f  W95 扩展 (LBA)  54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/</span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC  </span><br><span class="line">11  隐藏的 FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor      </span><br><span class="line">12  Compaq 诊断     5c  Priam Edisk     a9  NetBSD          f4  SpeedStor      </span><br><span class="line">14  隐藏的 FAT16 &lt;3 61  SpeedStor       ab  Darwin 启动     f2  DOS 次要       </span><br><span class="line">16  隐藏的 FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS    </span><br><span class="line">17  隐藏的 HPFS/NTF 64  Novell Netware  b7  BSDI fs         <span class="built_in">fc</span>  VMware VMKCORE </span><br><span class="line">18  AST 智能睡眠    65  Novell Netware  b8  BSDI swap       fd  Linux raid 自动</span><br><span class="line">1b  隐藏的 W95 FAT3 70  DiskSecure 多启 bb  Boot Wizard 隐  fe  LANstep        </span><br><span class="line">1c  隐藏的 W95 FAT3 75  PC/IX           be  Solaris 启动    ff  BBT            </span><br><span class="line">1e  隐藏的 W95 FAT1 80  旧 Minix       </span><br><span class="line">Hex 代码(输入 L 列出所有代码)：8e</span><br><span class="line">已将分区“Linux”的类型更改为“Linux LVM”</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">正在同步磁盘。</span><br><span class="line"><span class="comment"># 创建物理卷(pv)</span></span><br><span class="line">pvcreate /dev/sdb1 /dev/sdb2</span><br><span class="line"><span class="comment"># 创建卷组(vg)</span></span><br><span class="line">vgcreate vg1 /dev/sdb1 /dev/sdb2</span><br><span class="line"><span class="comment"># 创建逻辑卷(lv)</span></span><br><span class="line">lvcreate -n lv1 -L +2.5G vg1</span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">mkfs.xfs /dev/vg1/lv1</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount /dev/vg1/lv1 /mnt</span><br></pre></td></tr></table></figure><h2 id="四-进程管理"><a href="#四-进程管理" class="headerlink" title="四.进程管理"></a>四.进程管理</h2><h3 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps <span class="comment">#查看正在运行的进程</span></span><br><span class="line">top <span class="comment">#动态显示正在运行的进程</span></span><br><span class="line">pstree <span class="comment">#树状查看正在运行的进程</span></span><br><span class="line">pgrep <span class="comment">#用于查找进程</span></span><br><span class="line"><span class="built_in">nice</span> <span class="comment">#更改进程的优先级</span></span><br><span class="line"><span class="built_in">jobs</span> <span class="comment">#显示进程的相关信息</span></span><br><span class="line"><span class="built_in">bg</span> 和 <span class="built_in">fg</span> <span class="comment">#将进程调入后台</span></span><br><span class="line"><span class="built_in">kill</span> <span class="comment">#杀死进程</span></span><br></pre></td></tr></table></figure><h2 id="五-服务管理-centos8"><a href="#五-服务管理-centos8" class="headerlink" title="五.服务管理(centos8)"></a>五.服务管理(centos8)</h2><p>这里以sshd.service为例</p><p>1）查看服务状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status sshd.service</span><br></pre></td></tr></table></figure><p>2）启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure><p>3）重启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>4）关闭服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop sshd.service</span><br></pre></td></tr></table></figure><p>5）重载服务</p><p>reload也叫平滑重启，正在连接的用户是没有感觉的，只有当用户再次连接时，会启用新的配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reload sshd.service</span><br></pre></td></tr></table></figure><p>6）开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure><p>7）开机不启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> sshd.service</span><br></pre></td></tr></table></figure><p>8）查看是否开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl is-enable sshd.service</span><br></pre></td></tr></table></figure><p>9）是否在启动状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl is-active sshd.service</span><br></pre></td></tr></table></figure><p>10）重载systemd服务列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli connection reload</span><br></pre></td></tr></table></figure><h2 id="六-包管理"><a href="#六-包管理" class="headerlink" title="六.包管理"></a>六.包管理</h2><h3 id="1-rpm包管理"><a href="#1-rpm包管理" class="headerlink" title="1.rpm包管理"></a>1.rpm包管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看安装的所有软件包</span></span><br><span class="line">rpm -qa</span><br><span class="line"><span class="comment"># 安装一个包</span></span><br><span class="line">rpm -ivh  </span><br><span class="line"><span class="comment"># 升级一个包 </span></span><br><span class="line">rpm -Uvh  </span><br><span class="line"><span class="comment"># 移走一个包：</span></span><br><span class="line">rpm -e</span><br></pre></td></tr></table></figure><h3 id="2-yum包管理"><a href="#2-yum包管理" class="headerlink" title="2.yum包管理"></a>2.yum包管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载httpd包</span></span><br><span class="line">yum -y install httpd</span><br><span class="line"><span class="comment"># 更新httpd包</span></span><br><span class="line">yum -y update httpd</span><br><span class="line"><span class="comment"># 删除httpd包</span></span><br><span class="line">yum -y remove httpd</span><br></pre></td></tr></table></figure><p>配置本地yum源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载镜像到本地</span></span><br><span class="line">mount /dev/sr0 /media</span><br><span class="line"><span class="comment"># 配置本地源文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"><span class="built_in">mkdir</span> ../bak</span><br><span class="line"><span class="built_in">cp</span> *.repo ../bak</span><br><span class="line"><span class="built_in">cp</span> Centos-Linux-BaseOS.repo cdrom.repo</span><br><span class="line"><span class="built_in">rm</span> -f Centos*</span><br><span class="line">vi cdrom.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">[cdrom]</span><br><span class="line">name=cdrom</span><br><span class="line">baseurl=file:///media/BaseOS</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理源</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecahce</span><br></pre></td></tr></table></figure><p>配置镜像yum源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"><span class="comment"># 清理源</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>编写配置镜像源的脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">vi mr.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入yum.repos.d,并下载镜像源文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">curl -O http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"><span class="comment"># 清理yum源</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">bash mr.sh</span><br></pre></td></tr></table></figure><h2 id="七-vim文件操作"><a href="#七-vim文件操作" class="headerlink" title="七.vim文件操作"></a>七.vim文件操作</h2><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20230912114913083.png" alt="image-20230912114913083"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络服务</title>
      <link href="/posts/4416b5c/"/>
      <url>/posts/4416b5c/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-网络服务"><a href="#第五章-网络服务" class="headerlink" title="第五章 网络服务"></a>第五章 网络服务</h1><h2 id="1-DHCP服务"><a href="#1-DHCP服务" class="headerlink" title="1.DHCP服务"></a>1.DHCP服务</h2><h3 id="1-1DHCP定义"><a href="#1-1DHCP定义" class="headerlink" title="1.1DHCP定义"></a>1.1DHCP定义</h3><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一个局域网的网络协议，使用UDP协议工作。它是一种流行的Client&#x2F;Server协议，一般用于为主机或者为路由器等指定相关的配置信息。DHCP服务在企业和家庭中得到了大量的应用，它能够自动分配ip地址以及一些其他的相关信息，整个过程对客户透明。</p><h3 id="1-2实验规划"><a href="#1-2实验规划" class="headerlink" title="1.2实验规划"></a>1.2实验规划</h3><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231008175319304.png" alt="image-20231017115116277"></p><p>该实验需要两台虚拟机,一台作为DHCP服务器另一台做为主机用来验证dhcp服务是否可用.</p><p>首先新增一个网卡将他的DHCP服务关掉,将主机的网卡设置为VMnet2</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017115527925.png" alt="image-20231017115527925"></p><h3 id="1-3实验过程"><a href="#1-3实验过程" class="headerlink" title="1.3实验过程"></a>1.3实验过程</h3><ol><li><p>服务端</p><p>1.安装DHCP服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install dhcp*</span><br></pre></td></tr></table></figure><p>2.修改dhcp配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cp /usr/share/doc/dhcp-server/dhcpd.conf.example  /etc/dhcp/dhcpd.conf</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># vim /etc/dhcp/dhcpd.conf</span></span><br></pre></td></tr></table></figure><p>在下面添加下面的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">subnet 192.168.145.0 netmask 255.255.255.0 &#123;</span><br><span class="line">        range 192.168.145.100 192.168.145.200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.修改VMnet2的网卡配置给一个静态ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cp /etc/sysconfig/network-scripts/ifcfg-ens160 /etc/sysconfig/network-scripts/ifcfg-ens224</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># nmcli con show </span></span><br><span class="line">NAME        UUID                                  TYPE      DEVICE </span><br><span class="line">有线连接 1  3ffd2935-0618-301b-a04e-4738c579c9c5  ethernet  ens224 </span><br><span class="line">ens160      af04ba70-cb39-4017-afed-3f23f616c00c  ethernet  ens160 </span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens224 </span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># nmcli c reload</span></span><br></pre></td></tr></table></figure><p>4.重启网卡并启动dhcp服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli c reload </span><br><span class="line">systemctl start dhcpd</span><br></pre></td></tr></table></figure></li><li><p>主机</p><p>1.修改网卡配置文件将<code>BOOTPROTO</code>改成dhcp</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017120243183.png" alt="image-20231017120243183"></p><p>2.重启网卡</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-4实验结果"><a href="#1-4实验结果" class="headerlink" title="1.4实验结果"></a>1.4实验结果</h3><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017121550201.png" alt="image-20231017121550201"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ping 192.168.145.100</span></span><br><span class="line">PING 192.168.145.100 (192.168.145.100) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.145.100: icmp_seq=1 ttl=64 time=0.356 ms</span><br><span class="line">64 bytes from 192.168.145.100: icmp_seq=2 ttl=64 time=0.387 ms</span><br><span class="line">64 bytes from 192.168.145.100: icmp_seq=3 ttl=64 time=0.600 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.145.100 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2049ms</span><br><span class="line">rtt min/avg/max/mdev = 0.356/0.447/0.600/0.111 ms</span><br></pre></td></tr></table></figure><h2 id="2-DNS服务"><a href="#2-DNS服务" class="headerlink" title="2.DNS服务"></a>2.DNS服务</h2><h3 id="2-1配置静态ip地址"><a href="#2-1配置静态ip地址" class="headerlink" title="2.1配置静态ip地址"></a>2.1配置静态ip地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens160</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017200551993.png" alt="image-20231017200551993"></p><h3 id="2-2-安装服务软件包"><a href="#2-2-安装服务软件包" class="headerlink" title="2.2 安装服务软件包"></a>2.2 安装服务软件包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># yum install -y bind bind-chroot bind-utils</span></span><br><span class="line">上次元数据过期检查：9:33:52 前，执行于 2023年10月16日 星期一 22时33分11秒。</span><br><span class="line">软件包 bind-32:9.11.26-6.el8.x86_64 已安装。</span><br><span class="line">软件包 bind-chroot-32:9.11.26-6.el8.x86_64 已安装。</span><br><span class="line">依赖关系解决。</span><br><span class="line">==========================================================================================================</span><br><span class="line"> 软件包                    架构                版本                          仓库                    大小</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装:</span><br><span class="line"> bind-utils                x86_64              32:9.11.26-6.el8              AppStream              451 k</span><br><span class="line">安装依赖关系:</span><br><span class="line"> python3-bind              noarch              32:9.11.26-6.el8              AppStream              150 k</span><br><span class="line"> python3-ply               noarch              3.9-9.el8                     base                   111 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">==========================================================================================================</span><br><span class="line">安装  3 软件包</span><br><span class="line"></span><br><span class="line">总下载：712 k</span><br><span class="line">安装大小：1.9 M</span><br><span class="line">下载软件包：</span><br><span class="line">(1/3): python3-ply-3.9-9.el8.noarch.rpm                                    21 kB/s | 111 kB     00:05    </span><br><span class="line">(2/3): python3-bind-9.11.26-6.el8.noarch.rpm                               27 kB/s | 150 kB     00:05    </span><br><span class="line">(3/3): bind-utils-9.11.26-6.el8.x86_64.rpm                                 80 kB/s | 451 kB     00:05    </span><br><span class="line">----------------------------------------------------------------------------------------------------------</span><br><span class="line">总计                                                                      126 kB/s | 712 kB     00:05     </span><br><span class="line">运行事务检查</span><br><span class="line">事务检查成功。</span><br><span class="line">运行事务测试</span><br><span class="line">事务测试成功。</span><br><span class="line">运行事务</span><br><span class="line">  准备中  :                                                                                           1/1 </span><br><span class="line">  安装    : python3-ply-3.9-9.el8.noarch                                                              1/3 </span><br><span class="line">  安装    : python3-bind-32:9.11.26-6.el8.noarch                                                      2/3 </span><br><span class="line">  安装    : bind-utils-32:9.11.26-6.el8.x86_64                                                        3/3 </span><br><span class="line">  运行脚本: bind-utils-32:9.11.26-6.el8.x86_64                                                        3/3 </span><br><span class="line">  验证    : python3-ply-3.9-9.el8.noarch                                                              1/3 </span><br><span class="line">  验证    : bind-utils-32:9.11.26-6.el8.x86_64                                                        2/3 </span><br><span class="line">  验证    : python3-bind-32:9.11.26-6.el8.noarch                                                      3/3 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  bind-utils-32:9.11.26-6.el8.x86_64  python3-bind-32:9.11.26-6.el8.noarch  python3-ply-3.9-9.el8.noarch </span><br><span class="line"></span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure><h3 id="2-3-配置DNS"><a href="#2-3-配置DNS" class="headerlink" title="2.3 配置DNS"></a>2.3 配置DNS</h3><h4 id="2-3-1修改主配置文件"><a href="#2-3-1修改主配置文件" class="headerlink" title="2.3.1修改主配置文件"></a>2.3.1修改主配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/named.conf</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017201124527.png" alt="image-20231017201124527"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017201725583.png" alt="image-20231017201725583"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">named-checkconf <span class="comment"># 检查是否有错误</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-修改区域配置文件"><a href="#2-3-2-修改区域配置文件" class="headerlink" title="2.3.2 修改区域配置文件"></a>2.3.2 修改区域配置文件</h4><p>复制系统提供的zones文件为我们自己的，这里的文件名要和上图红框中所写的文件名保持一致， 注意复制时，使用参数-p保持文件权限属性一致。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -p /etc/named.rfc1912.zones /etc/named.gzh.zones</span><br></pre></td></tr></table></figure><p>复制后查看复制的文件，查看文件所属组是否为named，这里如果为root的话启动服务器会失败。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ll /etc/named.gzh.zones </span></span><br><span class="line">-rw-r-----. 1 root named 1029 8月  24 2021 /etc/named.gzh.zones</span><br></pre></td></tr></table></figure><p>修改区域配置文件 &#x2F;etc&#x2F;named.gzh.zones</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/named.gzh.zones</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017212520803.png" alt="image-20231017212520803"></p><ul><li><p>位置1处的“gzh.co”必须为我们向上一级域名机构所申请的域名，此处内容不能随便乱写。</p></li><li><p>位置2处的为正向查找（即由域名查找主机IP地址）区域所在的文件名，文件名可以任意制定，但 是必须和下面步骤所配置的正向查找区域文件名一致。</p></li><li><p>位置3处的“88.168.192”为反向查找区域（即由IP地址查找域名）网络地址的反向书写，例子中的 就是网络地址192.168.88.0&#x2F;24网络，该区域指定的IP地址只能是这个网段的。</p></li><li><p>位置4处为反响查找区域所在的文件名，文件名可以任意制定，但是必须和下面步骤所配置的反向 查找区域文件名一致。</p></li></ul><h4 id="2-3-3-修改正向解析文件"><a href="#2-3-3-修改正向解析文件" class="headerlink" title="2.3.3 修改正向解析文件"></a>2.3.3 修改正向解析文件</h4><p>配置正向查找区域，配置文件&#x2F;var&#x2F;named&#x2F;named.gzh.co</p><p>如果文件不存在，可以复制现有的实例文件，注意加参数-p</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cp -p /var/named/named.localhost /var/named/named.gzh.co</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ll /var/named/named.gzh.co </span></span><br><span class="line">-rw-r-----. 1 root named 152 8月  24 2021 /var/named/named.gzh.co</span><br></pre></td></tr></table></figure><p>配置此文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017212440817.png" alt="image-20231017212440817"></p><h4 id="2-3-4-修改反向解析文件"><a href="#2-3-4-修改反向解析文件" class="headerlink" title="2.3.4 修改反向解析文件"></a>2.3.4 修改反向解析文件</h4><p>配置反向查找区域，配置文件&#x2F;var&#x2F;named&#x2F;named.18.168.192</p><p>如果文件不存在，可以复制现有的实例文件，注意加参数-p</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cp -p /var/named/named.loopback /var/named/named.88.168.192</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ll /var/named/named.88.168.192 </span></span><br><span class="line">-rw-r-----. 1 root named 168 8月  24 2021 /var/named/named.88.168.192</span><br></pre></td></tr></table></figure><p>配置该文件</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017203456371.png" alt="image-20231017203456371"></p><p>修改<code>/etc/sysconfig/named</code>文件</p><p>添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OPTIONS=<span class="string">&quot;-4&quot;</span></span><br></pre></td></tr></table></figure><p>启动named</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start named</span><br></pre></td></tr></table></figure><p><code>注意:</code>如果你的named服务启动失败一定要检查一下配置文件是否出错</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh pub]<span class="comment"># named-checkconf -z /etc/named.conf</span></span><br><span class="line">zone gzh.co/IN: loaded serial 20231117</span><br><span class="line">zone 88.168.192.in-addr.arpa/IN: loaded serial 20231117</span><br><span class="line">zone 0.in-addr.arpa/IN: loaded serial 0</span><br></pre></td></tr></table></figure><p>出现这种字段的是没有问题的,如果出现其他类型的说明你的配置文件就有点问题.</p><p>下面是几个配置文件的关系</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231018185225219.png" alt="image-20231018185225219"></p><p>首先named.conf中调用了named.gzh.zones文件,也就是include,然后named.gzh.zones里面写的内容对应的是后面的两个文件,如果你检查出错误了,一定要在这四个文件里面去找是否哪个地方写错了,最好是逐级去找.</p><h3 id="2-5-客户端测试"><a href="#2-5-客户端测试" class="headerlink" title="2.5 客户端测试"></a>2.5 客户端测试</h3><h4 id="2-5-1-安装工具包"><a href="#2-5-1-安装工具包" class="headerlink" title="2.5.1 安装工具包"></a>2.5.1 安装工具包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bind-utils</span><br></pre></td></tr></table></figure><p>dns1与服务端配置的保持一致</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231017205957610.png" alt="image-20231017205957610"></p><h4 id="2-5-3-测试"><a href="#2-5-3-测试" class="headerlink" title="2.5.3 测试"></a>2.5.3 测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nslookup news.gzh.co</span></span><br><span class="line">Server:         192.168.88.137</span><br><span class="line">Address:        192.168.88.137<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   news.gzh.co</span><br><span class="line">Address: 192.168.88.40</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># dig -x www.gzh.co</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.14 &lt;&lt;&gt;&gt; -x www.gzh.co</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: SERVFAIL, id: 45238</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 1232</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;co.gzh.www.in-addr.arpa.       IN      PTR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 0 msec</span></span><br><span class="line"><span class="string">;; SERVER: 192.168.88.137#53(192.168.88.137)</span></span><br><span class="line"><span class="string">;; WHEN: 二 10月 17 21:43:33 CST 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 52</span></span><br></pre></td></tr></table></figure><p>如果测试失败,把防火墙关掉.</p><h2 id="3-电子邮件服务"><a href="#3-电子邮件服务" class="headerlink" title="3.电子邮件服务"></a>3.电子邮件服务</h2><h3 id="1-设置hostname并更新-etc-hosts"><a href="#1-设置hostname并更新-etc-hosts" class="headerlink" title="1.设置hostname并更新 &#x2F;etc&#x2F;hosts"></a>1.设置hostname并更新 &#x2F;etc&#x2F;hosts</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh ~]<span class="comment"># hostnamectl set-hostname gzh.com</span></span><br><span class="line">[root@gzh ~]<span class="comment"># vim /etc/hosts</span></span><br><span class="line">[root@gzh ~]<span class="comment"># cat /etc/hosts </span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.88.137 gzh.com</span><br></pre></td></tr></table></figure><h3 id="2-安装并启用-Postfix-服务"><a href="#2-安装并启用-Postfix-服务" class="headerlink" title="2.安装并启用 Postfix 服务"></a>2.安装并启用 Postfix 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># yum -y install postfix</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># systemctl start postfix</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># systemctl enable postfix</span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/postfix.service → /usr/lib/systemd/system/postfix.service.</span><br></pre></td></tr></table></figure><h3 id="3-安装-mailx-邮件客户端"><a href="#3-安装-mailx-邮件客户端" class="headerlink" title="3.安装 mailx 邮件客户端"></a>3.安装 mailx 邮件客户端</h3><p>在配置 Postfix 服务器之前，我们需要安装 <code>mailx</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><h3 id="4-配置-Postfix-邮件服务器"><a href="#4-配置-Postfix-邮件服务器" class="headerlink" title="4.配置 Postfix 邮件服务器"></a>4.配置 Postfix 邮件服务器</h3><p>Postfix 的配置文件位于 <code>/etc/postfix/main.cf</code> 中。我们需要对配置文件进行一些修改.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/postfix/main.cf</span><br><span class="line"><span class="comment"># 更新如下</span></span><br><span class="line">myhostname = mail.gzh.com</span><br><span class="line">mydomain = gzh.com</span><br><span class="line">myorigin = <span class="variable">$mydomain</span></span><br><span class="line">inet_interfaces = all</span><br><span class="line">inet_protocols = all</span><br><span class="line">mydestination = <span class="variable">$myhostname</span>, localhost.<span class="variable">$mydomain</span>, localhost, <span class="variable">$mydomain</span></span><br><span class="line">mynetworks = 192.168.88.0/24, 127.0.0.0/8</span><br><span class="line">home_mailbox = Maildir/</span><br></pre></td></tr></table></figure><p>完成后，保存并退出配置文件。重新启动 postfix 服务以使更改生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart postfix</span><br></pre></td></tr></table></figure><h3 id="5-测试邮件服务"><a href="#5-测试邮件服务" class="headerlink" title="5.测试邮件服务"></a>5.测试邮件服务</h3><p>首先，创建一个测试用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd gzh</span><br><span class="line">passwd gzh</span><br></pre></td></tr></table></figure><p>安装telnet</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install telnet</span><br></pre></td></tr></table></figure><p>测试服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[gzh@gzh ~]$ telnet localhost 25</span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">220 mail.gzh.com ESMTP Postfix</span><br><span class="line">ehlo localhost <span class="comment"># 向服务器表明身份</span></span><br><span class="line">250-mail.gzh.com</span><br><span class="line">250-PIPELINING</span><br><span class="line">250-SIZE 10240000</span><br><span class="line">250-VRFY</span><br><span class="line">250-ETRN</span><br><span class="line">250-STARTTLS</span><br><span class="line">250-ENHANCEDSTATUSCODES</span><br><span class="line">250-8BITMIME</span><br><span class="line">250-DSN</span><br><span class="line">250 SMTPUTF8</span><br><span class="line">halo mail.gzh.com </span><br><span class="line">502 5.5.2 Error: <span class="built_in">command</span> not recognized</span><br><span class="line">helo mail.gzh.com </span><br><span class="line">250 mail.gzh.com</span><br><span class="line">mail from:root <span class="comment"># 设置寄件人</span></span><br><span class="line">250 2.1.0 Ok</span><br><span class="line">rcpt to:gzh <span class="comment"># 设置收件人</span></span><br><span class="line">250 2.1.5 Ok</span><br><span class="line">data</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">hello world!</span><br><span class="line">.</span><br><span class="line">250 2.0.0 Ok: queued as 38D0A61F84DB</span><br><span class="line">quit</span><br><span class="line">221 2.0.0 Bye</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h2 id="4-FTP服务"><a href="#4-FTP服务" class="headerlink" title="4.FTP服务"></a>4.FTP服务</h2><h3 id="4-1-安装vsftpd-ftp"><a href="#4-1-安装vsftpd-ftp" class="headerlink" title="4.1 安装vsftpd+ftp"></a>4.1 安装<code>vsftpd</code>+<code>ftp</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br><span class="line">yum install -y ftp <span class="comment"># 测试使用，搭建FTP服务器只需要vsftpd</span></span><br></pre></td></tr></table></figure><h3 id="4-2-开启服务"><a href="#4-2-开启服务" class="headerlink" title="4.2 开启服务"></a>4.2 开启服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd</span><br></pre></td></tr></table></figure><h3 id="4-3-修改配置文件"><a href="#4-3-修改配置文件" class="headerlink" title="4.3 修改配置文件"></a>4.3 修改配置文件</h3><p>配置文件默认为<code>/etc/vsftpd/vsftpd.conf</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure><p>首先修改<code>anonymous_enable=YES</code>，再添加一行<code>anon_upload_enable=YES</code>：</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231018182255023.png" alt="image-20231018182255023"></p><p>第一行的意思是允许匿名登录，第二行的意思是允许匿名上传，接着重启服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure><h3 id="4-4测试准备"><a href="#4-4测试准备" class="headerlink" title="4.4测试准备"></a>4.4测试准备</h3><p>安装部分就算完成了，下面是测试。</p><p>在测试之前先创建测试文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh ~]<span class="comment"># cd /var/ftp/pub</span></span><br><span class="line">[root@gzh pub]<span class="comment"># vim test</span></span><br><span class="line">[root@gzh pub]<span class="comment"># cat test</span></span><br><span class="line">my name is gzh</span><br></pre></td></tr></table></figure><p>在主机上测试ftp</p><p>如图所示: </p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231018183331808.png" alt="image-20231018183331808"></p><p>在测试之前要关闭防火墙和关闭<code>SELinux</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh pub]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">或者是开启21端口对应的服务</span><br><span class="line">firewall-cmd --add-port=21/tcp --permanent</span><br><span class="line">[root@gzh pub]<span class="comment"># setenforce 0 # 临时关闭</span></span><br></pre></td></tr></table></figure><p>用户登录测试</p><p>在地址栏输入<code>ftp://gzh@192.168.88.137</code>,这里可以选择是否匿名登录</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231018183808819.png" alt="image-20231018183808819"></p><p>还有其他ftp的测试方式可以根据书本上所说的自行测试,这里只简单做个测试.</p><p>还有一点就是我这里用的是我上面做邮件服务时新增的用户登陆的,里面存放着maildir文件夹</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231019103641042.png" alt="image-20231019103641042"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231019103753344.png" alt="image-20231019103753344"></p><p>这个路径下存放的就是我们在邮件服务中发送的内容了.</p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h2><p>在做DHCP服务的时候要确定好自己服务端的网卡配置,服务端是两张网卡,客户端是一个网卡.</p><p>在做DNS服务的时候,一定要仔细检查修改的文件有没有问题,哪怕一个字符错了都会导致你DNS服务失败.</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全与防火墙</title>
      <link href="/posts/33d67af5/"/>
      <url>/posts/33d67af5/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-网络安全与防火墙"><a href="#第八章-网络安全与防火墙" class="headerlink" title="第八章 网络安全与防火墙"></a>第八章 网络安全与防火墙</h1><h2 id="一-iptables基本操作"><a href="#一-iptables基本操作" class="headerlink" title="一.iptables基本操作"></a>一.iptables基本操作</h2><h3 id="1-1-iptables简介"><a href="#1-1-iptables简介" class="headerlink" title="1.1 iptables简介"></a>1.1 iptables简介</h3><p>iptables 是集成在 Linux 内核中的包过滤防火墙系统。使用 iptables 可以添加、删除具体的过滤规则，iptables 默认维护着 4 个表和 5 个链，所有的防火墙策略规则都被分别写入这些表与链中。</p><p>“四表”是指 iptables 的功能，默认的 iptables规则表有 filter 表（过滤规则表）、nat 表（地址转换规则表）、mangle（修改数据标记位规则表）、raw（跟踪数据表规则表）：</p><ul><li>filter 表：控制数据包是否允许进出及转发，可以控制的链路有 INPUT、FORWARD 和 OUTPUT。</li><li>nat 表：控制数据包中地址转换，可以控制的链路有 PREROUTING、INPUT、OUTPUT 和 POSTROUTING。</li><li>mangle：修改数据包中的原数据，可以控制的链路有 PREROUTING、INPUT、OUTPUT、FORWARD 和 POSTROUTING。</li><li>raw：控制 nat 表中连接追踪机制的启用状况，可以控制的链路有 PREROUTING、OUTPUT。</li></ul><p>“五链”是指内核中控制网络的 NetFilter 定义的 5 个规则链。每个规则表中包含多个数据链：INPUT（入站数据过滤）、OUTPUT（出站数据过滤）、FORWARD（转发数据过滤）、PREROUTING（路由前过滤）和POSTROUTING（路由后过滤），防火墙规则需要写入到这些具体的数据链中。</p><p>Linux 防火墙的过滤框架，如图 1 所示。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ce49aedfc45c82ef6a6f261c82af07a4.gif"></p><p>可以看出，如果是外部主机发送数据包给防火墙本机，数据将会经过 PREROUTING 链与 INPUT 链；如果是防火墙本机发送数据包到外部主机，数据将会经过 OUTPUT 链与 POSTROUTING 链；如果防火墙作为路由负责转发数据，则数据将经过 PREROUTING 链、FORWARD 链以及 POSTROUTING 链。</p><p>iptables语法格式<br>iptables 命令的基本语法格式如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables [-t table] COMMAND [chain] CRETIRIA -j ACTION</span><br></pre></td></tr></table></figure><p>各参数的含义为：</p><ul><li>-t：指定需要维护的防火墙规则表 filter、nat、mangle或raw。在不使用 -t 时则默认使用 filter 表。</li><li>COMMAND：子命令，定义对规则的管理。</li><li>chain：指明链表。</li><li>CRETIRIA：匹配参数。</li><li>ACTION：触发动作。</li><li>iptables 命令常用的选项及各自的功能如表 2 所示</li></ul><table><thead><tr><th align="left">选 项</th><th align="left">功 能</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">添加防火墙规则</td></tr><tr><td align="left">-D</td><td align="left">删除防火墙规则</td></tr><tr><td align="left">-I</td><td align="left">插入防火墙规则</td></tr><tr><td align="left">-F</td><td align="left">清空防火墙规则</td></tr><tr><td align="left">-L</td><td align="left">列出添加防火墙规则</td></tr><tr><td align="left">-R</td><td align="left">替换防火墙规则</td></tr><tr><td align="left">-Z</td><td align="left">清空防火墙数据表统计信息</td></tr><tr><td align="left">-P</td><td align="left">设置链默认规则</td></tr></tbody></table><h3 id="1-2-iptables基本操作例子"><a href="#1-2-iptables基本操作例子" class="headerlink" title="1.2 iptables基本操作例子"></a>1.2 iptables基本操作例子</h3><p>1.查看filter表的所有规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination    </span><br></pre></td></tr></table></figure><p>2.查看nat表的所有规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -t nat -nL</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br></pre></td></tr></table></figure><p><code>因为我们并没有对iptables做什么配置所有他不会显示表的规则, centos8默认是firewalld作为默认防火墙的.</code></p><p>3.拒绝进入防火墙的所有ICMP协议数据包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -I INPUT -p icmp -j REJECT</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br></pre></td></tr></table></figure><p>修改以后我们再查看规则就可以看到我们新加的这个规则了.</p><p>4.向filter表插入一条新的入栈规则,丢弃<code>192.168.88.138</code>主机发送给防火墙本机的所有数据包.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -A INPUT -s 192.168.88.138 -j DROP</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -nL</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line">DROP       all  --  192.168.88.138       0.0.0.0/0   </span><br></pre></td></tr></table></figure><p>从规则中可以知道只要是<code>192.168.88.138</code>来的数据包都会drop</p><p>5.修改filter表中INPUT链的默认规则为接受数据包.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -t filter -P INPUT ACCEPT</span></span><br></pre></td></tr></table></figure><p>6.丢弃外网接口(ens160)进入防火墙本机的源地址为私网地址的数据包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -A INPUT -i ens160 -s 192.168.0.0/16 -j DROP</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -A INPUT -i ens160 -s 172.16.0.0/12 -j DROP</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -A INPUT -i ens160 -s 10.0.0.0/8 -j DROP</span></span><br></pre></td></tr></table></figure><p>运行完第一个你会发现你的ssh连不上了哈哈哈🤣,为什么呢他设置了不允许该段的主机访问,做完以后在虚拟机改回来就行.</p><p>删除刚才加的那个规则,看是第几条规则再删别删错了.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># iptables -D INPUT 3</span></span><br></pre></td></tr></table></figure><h2 id="二-firewalld基本操作"><a href="#二-firewalld基本操作" class="headerlink" title="二.firewalld基本操作"></a>二.firewalld基本操作</h2><h3 id="2-1firewalld简介"><a href="#2-1firewalld简介" class="headerlink" title="2.1firewalld简介"></a>2.1firewalld简介</h3><p>firewalld是自CentOS 7以来带有一个动态的、可定制而无需重新启动防火墙守护程序或服务。firewall-cmd就是iptables&#x2F;nftable的前端。在CentOS 8中，nftables取代iptables成为默认的Linux网络包过滤框架。本文介绍如何为您的CentOS 8设置防火墙，并借助firewall-cmd管理工具进行管理。</p><p>在CentOS7之后,当你使用firewalld时,有两个基本概念，你必须要知道的</p><ul><li><strong>服务(service)</strong></li><li><strong>区域(zone)</strong></li></ul><p>在传统的iptables基于规则的顺序的匹配先后顺序来多数据包进行处理，处理的动作基本上非黑即白这个逻辑,因此iptables的基于规则列表的运行机制相对固化，缺少灵活性。而firewalld将传入的流量分类到由源IP和&#x2F;或网络接口定义的区域中。每个区域都有的配置，可以根据指定的标准接受或拒绝数据包。</p><p>firewalld不仅打破来规则列表固化的先后顺序，而且将以往iptables规则中的tcp&#x2F;ip信息，使用了一个叫service(服务)来独立封装在一个xml文本中,让使用者更加容易记忆和理解.</p><p>什么叫service？粗暴地说,就是应用协议,而与该协议相关的应用能为你做什么。<br>例如，我上网经常用到tcp协议的80端口和443端口，还有域名解析要用到udp协议的35端口，访问共享文件夹需要用到udp端口的137和138端口,OK,我们这些常用的应用，firewalld都已经内置了。因此在防火墙的配置和管理会变得简单以及人性化。</p><p>而理解区域就更简单了，就是对各种内置服务预分组的集合。您可以通过运行以下ls命令查看所有区域，没错，区域也是以XML文档内容预定义在<strong>Linux系统</strong>中的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ls -l /usr/lib/firewalld/zones/</span></span><br><span class="line">总用量 40</span><br><span class="line">-rw-r--r--. 1 root root 299 2月   4 2021 block.xml</span><br><span class="line">-rw-r--r--. 1 root root 293 2月   4 2021 dmz.xml</span><br><span class="line">-rw-r--r--. 1 root root 291 2月   4 2021 drop.xml</span><br><span class="line">-rw-r--r--. 1 root root 304 2月   4 2021 external.xml</span><br><span class="line">-rw-r--r--. 1 root root 397 2月   4 2021 home.xml</span><br><span class="line">-rw-r--r--. 1 root root 412 2月   4 2021 internal.xml</span><br><span class="line">-rw-r--r--. 1 root root 729 2月   1 2021 nm-shared.xml</span><br><span class="line">-rw-r--r--. 1 root root 343 2月   4 2021 public.xml</span><br><span class="line">-rw-r--r--. 1 root root 162 2月   4 2021 trusted.xml</span><br><span class="line">-rw-r--r--. 1 root root 339 2月   4 2021 work.xml</span><br></pre></td></tr></table></figure><h3 id="2-2-了解预定义区域"><a href="#2-2-了解预定义区域" class="headerlink" title="2.2 了解预定义区域"></a>2.2 了解预定义区域</h3><p>1.获取所有可用的区域</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --get-zones </span></span><br><span class="line">block dmz drop external home internal nm-shared public trusted work</span><br></pre></td></tr></table></figure><ul><li>block–拒绝所有传入的网络连接。仅从系统内部启动的网络连接是可能的。</li><li>dmz –经典非军事区（DMZ）区域，它提供对LAN的有限访问，并且仅允许选定的传入端口。</li><li>drop –丢弃所有传入网络连接，并且仅允许传出网络连接。</li><li>external-对于路由器连接类型很有用。您还需要LAN和WAN接口，以使伪装（NAT）正常工作。</li><li>home –适用于您信任其他计算机的局域网内的家用计算机，例如笔记本电脑和台式机。仅允许选择的TCP &#x2F; IP端口。</li><li>internal–当您主要信任LAN上的其他服务器或计算机时，用于内部网络。</li><li>public–您不信任网络上的任何其他计算机和服务器。您仅允许所需的端口和服务。对于云服务器或您所托管的服务器，请始终使用公共区域。</li><li>trust–接受所有网络连接。我不建议将该区域用于连接到WAN的专用服务器或VM。</li><li>work–在信任同事和其他服务器的工作场所中使用。</li></ul><p>2.如何查找您的默认区域</p><p>默认区域为public，所有网络接口都分配给此区域,用户可以将网络接口和源分配给区域。其中一个区域设置为默认区域。</p><p>获取默认区域运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --get-default-zone </span></span><br><span class="line">public</span><br><span class="line"><span class="comment"># 查看活动区域和分配给它们的网络接口</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --get-active-zones </span></span><br><span class="line">public</span><br><span class="line">  interfaces: ens160</span><br></pre></td></tr></table></figure><p>3.查看与公共区域关联的防火墙规则或服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --list-all </span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens160</span><br><span class="line">  sources: </span><br><span class="line">  services: cockpit dhcpv6-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br></pre></td></tr></table></figure><h3 id="2-3区域的target"><a href="#2-3区域的target" class="headerlink" title="2.3区域的target"></a>2.3区域的target</h3><p>这个跟iptables的target是相似的,它可以设置为以下选项之一：</p><ul><li>default:不做任何事情</li><li>ACCEPT：接受数据包</li><li>REJECT 拒绝数据包，返回拒绝的信息</li><li>DROP：丢弃数据包，并且不做任何答应</li></ul><p>要设置区域的target，使用–zone选项指定区域，–set-target选项指定目标。</p><p>例如，要将公共区域的目标更改为DROP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --zone=public --set-target=DROP </span></span><br></pre></td></tr></table></figure><h3 id="2-4创建新的区域"><a href="#2-4创建新的区域" class="headerlink" title="2.4创建新的区域"></a>2.4创建新的区域</h3><p>firewalld还可以您创建自己的区域。</p><p>示例:创建一个名为memcached的新分区，打开端口11211，并仅允许从IP地址192.168.88.138进行访问：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">firewall-cmd --new-zone=visitors --permanent </span><br></pre></td></tr></table></figure><p>放某些端口和添加</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=visitors --add-port=80/tcp --permanent </span><br><span class="line">firewall-cmd --zone=visitors --add-port=53/tcp --permanent</span><br><span class="line">firewall-cmd --zone=visitors --add-source=192.168.88.138/24 --permanent </span><br></pre></td></tr></table></figure><p>重新加载Firewalld：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="2-5服务-services"><a href="#2-5服务-services" class="headerlink" title="2.5服务(services)"></a>2.5服务(services)</h3><p>服务只不过是本地端口、协议、源端口、目的地和防火墙助手模块的列表。举个例子,服务器就是包含一组tcp&#x2F;ip协议细节的集合：</p><ul><li>端口： 443，21或22</li><li>服务: ssh,http或https</li><li>协议: tcp&#x2F;udp&#x2F;icmp</li></ul><p>我们可以查看一下防火墙所支持的服务类型</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --get-services </span></span><br><span class="line">RH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit bacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc bittorrent-lsd ceph ceph-mon cfengine cockpit collectd condor-collector ctdb dhcp dhcpv6 dhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync elasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps freeipa-replication freeipa-trust ftp galera ganglia-client ganglia-master git grafana gre high-availability http https imap imaps ipp ipp-client ipsec irc ircs iscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd kprop kshell kube-apiserver ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve matrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql murmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy prometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis redis-sentinel rpc-bind rquotad rsh rsyncd rtsp salt-master samba samba-client samba-dc sane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync spotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui synergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans xdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server</span><br></pre></td></tr></table></figure><p>如何查看当前区域允许哪些服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --list-service </span></span><br><span class="line">cockpit dhcpv6-client ssh</span><br></pre></td></tr></table></figure><p>以上命令表明我的默认区域是public的，并且我允许CentOS 8&#x2F;RHEL 8上的传入SSH连接(端口22)、dhcpv6-client和cockpit服务端口。默认情况下会丢弃所有其他流量。</p><p>如果CentOS 8上配置nginx，我需要使用firewall-cmd打开端口80&#x2F;443。假设您不需要cockpit或dhcpv6-client等不必要的服务，可以通过修改规则将其删除。例如，删除服务dhcpv6-client和cockpit：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --remove-service=cockpit --permanent firewall-cmd --remove-service=dhcpv6-client --permanent firewall-cmd --reload </span></span><br></pre></td></tr></table></figure><p>运行时Firewalld配置更改是临时的。当您重新启动CetnOS8服务器时，它们就消失了。例如，以下命令将临时打开Nginx&#x2F;Apache Web服务器的TCP端口80&#x2F;443(Https)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --zone=public --add-service=http firewall-cmd --zone=public --add-service=https </span></span><br></pre></td></tr></table></figure><p>当您重新启动Linux机器或重新启动Firewalld服务本身时，不会保留上述规则。</p><p>如何将规则添加到永久集并重新加载Firewalld?只需将添加–permanent参数即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># firewall-cmd --zone=public --add-service=http --permanent firewall-cmd --zone=public --add-service=https --permanent firewall-cmd --reload </span></span><br></pre></td></tr></table></figure><p>如何拒绝&#x2F;阻止TCP&#x2F;UDP端口&#x2F;协议</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]# firewall-cmd --zone=public --remove-port=23/tcp --permanent </span><br></pre></td></tr></table></figure><p>开放源IP</p><p>要允许来自特定IP地址(或范围)的所有传入流量，请使用–zone选项指定区域，并使用–add-source选项指定源IP。例如，要允许公共区域中来自192.168.172.32的所有传入流量，请运行：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]# firewall-cmd --zone=public --add-source=192.168.88.138</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集中化运维工具---Ansible和SaltStack</title>
      <link href="/posts/c280b6e1/"/>
      <url>/posts/c280b6e1/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-集中化运维工具—Ansible和SaltStack安装Ansible"><a href="#第六章-集中化运维工具—Ansible和SaltStack安装Ansible" class="headerlink" title="第六章 集中化运维工具—Ansible和SaltStack安装Ansible."></a>第六章 集中化运维工具—Ansible和SaltStack安装Ansible.</h1><h2 id="一-Ansible"><a href="#一-Ansible" class="headerlink" title="一.Ansible"></a>一.Ansible</h2><h3 id="1-1-安装Ansible"><a href="#1-1-安装Ansible" class="headerlink" title="1.1.安装Ansible"></a>1.1.安装Ansible</h3><p>安装ansible之前要准备三台虚拟机,而且确保你已经看完书上面的讲解才能知道后面为什么这么做,虚拟机信息如下表</p><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">gzh-cs8</td><td align="center">192.168.88.137</td></tr><tr><td align="center">gzh-a1</td><td align="center">192.168.88.138</td></tr><tr><td align="center">gzh-a2</td><td align="center">192.168.88.139</td></tr></tbody></table><p>安装ansible</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># yum install centos-release-ansible-29.noarch</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># yum -y install ansible</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible --version</span></span><br><span class="line">ansible 2.9.27</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python3.6/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 3.6.8 (default, Mar 19 2021, 05:13:41) [GCC 8.4.1 20200928 (Red Hat 8.4.1-1)]</span><br></pre></td></tr></table></figure><h3 id="1-2-配置SSH免密登录"><a href="#1-2-配置SSH免密登录" class="headerlink" title="1.2.配置SSH免密登录"></a>1.2.配置SSH免密登录</h3><p>首先在gzh-cs8上面生成一对密钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:WY3jPArqesmLtWpILQPFQjxezWDy86niz0XvWYc6lgk root@gzh-cs8</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|o+ o+            |</span></span><br><span class="line"><span class="string">|.o*. o     o     |</span></span><br><span class="line"><span class="string">|.ooo      + .    |</span></span><br><span class="line"><span class="string">|..  o .  = .     |</span></span><br><span class="line"><span class="string">|. .  +. S +      |</span></span><br><span class="line"><span class="string">| + .oE.. ...     |</span></span><br><span class="line"><span class="string">|.ooooo..+o .     |</span></span><br><span class="line"><span class="string">|o ++=..=+ .      |</span></span><br><span class="line"><span class="string">| o=*+..+.        |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>该命令执行完以后会在<code>/root/.ssh</code>下生成一对密钥,<code>id_rsa</code>是私钥,<code>id_rsa.pub</code>是公钥,我们要把公钥发送到另外的两个虚拟机上.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 .ssh]<span class="comment"># ssh-copy-id root@192.168.88.138</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.88.138 (192.168.88.138)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:79kcnML33BSqx2Gn4ONmU3FpV4j2JJwgM4SsFmjceP4.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.88.138&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;root@192.168.88.138&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@gzh-cs8 .ssh]<span class="comment"># ssh-copy-id root@192.168.88.139</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.88.139 (192.168.88.139)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:79kcnML33BSqx2Gn4ONmU3FpV4j2JJwgM4SsFmjceP4.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.88.139&#x27;</span>s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;root@192.168.88.139&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>然后我们就可以实现<code>gzh-cs8</code>到其他两个机子的免密登录了.</p><h3 id="1-3主机目录"><a href="#1-3主机目录" class="headerlink" title="1.3主机目录"></a>1.3主机目录</h3><p>我们修改<code>/etc/ansible/hosts</code>文件(建议跟着书一起看),清空改为如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># vim /etc/ansible/hosts </span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># cat /etc/ansible/hosts </span></span><br><span class="line">[/etc/Ansible/hosts]</span><br><span class="line">192.168.88.138</span><br><span class="line">192.168.88.139</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[webservers]</span><br><span class="line">192.168.88.138</span><br><span class="line">192.168.88.139</span><br></pre></td></tr></table></figure><p>修改完以后我们对节点进行<code>ping</code>操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible webservers -m ping</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.139 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.88.138 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4模块用法"><a href="#1-4模块用法" class="headerlink" title="1.4模块用法"></a>1.4模块用法</h3><ol><li><p><code>setup模块</code>:查看目录节点的各种信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible webservers -m setup</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.139 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ansible_all_ipv4_addresses&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;192.168.88.139&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;ansible_all_ipv6_addresses&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;fe80::20c:29ff:fed8:8187&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;ansible_apparmor&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="string">&quot;disabled&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ansible_architecture&quot;</span>: <span class="string">&quot;x86_64&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ansible_bios_date&quot;</span>: <span class="string">&quot;11/12/2020&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ansible_bios_version&quot;</span>: <span class="string">&quot;6.00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ansible_cmdline&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;BOOT_IMAGE&quot;</span>: <span class="string">&quot;(hd0,msdos1)/vmlinuz-4.18.0-305.3.1.el8.x86_64&quot;</span>,</span><br><span class="line">            <span class="string">&quot;crashkernel&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">            <span class="string">&quot;quiet&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;rd.lvm.lv&quot;</span>: <span class="string">&quot;cl/swap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;resume&quot;</span>: <span class="string">&quot;/dev/mapper/cl-swap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rhgb&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;ro&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;root&quot;</span>: <span class="string">&quot;/dev/mapper/cl-root&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure></li><li><p><code>copy模块</code>:将主控端的文件复制到远程主机，只针对文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src  源文件路径</span><br><span class="line">dest   目标文件路径</span><br><span class="line">content  将指定内容覆盖写入到目标主机文件中</span><br><span class="line">force=no 当主控端拷贝的文件名和目标名一致，但是内容不一致，放弃拷贝</span><br><span class="line">force=<span class="built_in">yes</span>   当主控端拷贝的文件名和目标名一致，但是内容不一致，则进行覆盖</span><br><span class="line">backup=<span class="built_in">yes</span> 当主控端拷贝的文件名和目标名一致，但是内容不一致，则进行备份</span><br><span class="line">例:</span><br><span class="line"><span class="comment"># 将/root/test 复制到所有节点的/root目录下</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible all -m copy -a &#x27;dest=/root src=/root/test&#x27;</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.139 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/root/test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secontext&quot;</span>: <span class="string">&quot;system_u:object_r:admin_home_t:s0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1698767911.4537575-1825-7466982683333/source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.88.138 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/root/test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secontext&quot;</span>: <span class="string">&quot;system_u:object_r:admin_home_t:s0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1698767911.4533894-1823-191533046233854/source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>file模块</code>:创建或者和删除远程主机上的文件或者目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">path 指定文件 如果远程主机上没有该文件，则进行创建</span><br><span class="line">state 创建类型   <span class="built_in">touch</span> 文件  directory 目录 </span><br><span class="line">state=absent  删除文件或者目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">link</span> 软连接src=源文件名  path=目标链接文件名</span><br><span class="line">hard 硬链接src=源文件名  path=目标链接文件名</span><br><span class="line"></span><br><span class="line">以下三个参数，既可以修改，也可以自动添加</span><br><span class="line">mod：权限可以在添加时设置特殊权限，前提要有执行权限( <span class="built_in">set</span> 粘滞位)</span><br><span class="line">owner：属主</span><br><span class="line">group：属组</span><br><span class="line">例:</span><br><span class="line"><span class="comment"># 删除刚才复制的文件</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible all -m file -a &#x27;path=/root/test state=absent&#x27;</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.138 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/root/test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.88.139 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;ansible_facts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/libexec/platform-python&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/root/test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;absent&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>command模块</code>和<code>shell模块</code></p><p><code>command模块</code>在远程主机上执行指定得命令 如：cat ls ，不能使用特殊得符号 ：| &gt; &gt;&gt;</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">ansible  主机清单 -m  模块名 -a  <span class="string">&#x27;执行命令&#x27;</span></span><br><span class="line">creates：当指定文件存在时，后一条命令不执行 / 指定文件不存在，后一条命令执行</span><br><span class="line">removes：当指定文件存在时，后一条命令执行 / 指定文件不存在，后一条命令不执行</span><br><span class="line"><span class="comment"># 查看所有节点/root下的文件</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible all  -m command  -a &#x27;ls /root&#x27;</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.138 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">linux-5.10.10</span><br><span class="line">linux-5.10.10.tar.gz</span><br><span class="line">yum.sh</span><br><span class="line">192.168.88.139 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">linux-5.10.10</span><br><span class="line">linux-5.10.10.tar.gz</span><br><span class="line">yum.sh</span><br></pre></td></tr></table></figure><p><code>shell模块</code>在远程主机上执行复杂的命令，比较好用得模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">ansible 主机清单 -m  模块名 -a  <span class="string">&#x27;执行命令&#x27;</span></span><br><span class="line"><span class="comment"># 查看所有节点/root下的文件</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># ansible all  -m shell  -a &#x27;ls /root&#x27;</span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line">192.168.88.139 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">linux-5.10.10</span><br><span class="line">linux-5.10.10.tar.gz</span><br><span class="line">yum.sh</span><br><span class="line">192.168.88.138 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">linux-5.10.10</span><br><span class="line">linux-5.10.10.tar.gz</span><br><span class="line">yum.sh</span><br></pre></td></tr></table></figure></li></ol><p>还有很多模块这里就不在写了,大家下去做一下.</p><p>最后推荐大家看一下<code>Ansible</code>的中文文档<a href="https://cn-ansibledoc.readthedocs.io/zh-cn/latest/">Ansible中文官方文档 </a>.</p><h3 id="1-5编写playbook脚本安装Apache并启动"><a href="#1-5编写playbook脚本安装Apache并启动" class="headerlink" title="1.5编写playbook脚本安装Apache并启动"></a>1.5编写playbook脚本安装Apache并启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 playbook]<span class="comment"># vim apache.yml </span></span><br><span class="line">[root@gzh-cs8 playbook]<span class="comment"># cat apache.yml </span></span><br><span class="line">---</span><br><span class="line">- name: 下载yum源</span><br><span class="line">  hosts: 192.168.88.138</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 传输yum</span><br><span class="line">      copy:</span><br><span class="line">        src: /etc/yum.repos.d/Centos-8.repo</span><br><span class="line">        dest: /etc/yum.repos.d/Centos-8.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- name: 修改yum源的配置文件</span><br><span class="line">  hosts: 192.168.88.138</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 修改</span><br><span class="line">      <span class="built_in">command</span>: sed -i <span class="string">&#x27;s/8/7/g&#x27;</span> /etc/yum.repos.d/Centos-8.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- name: 安装httpd服务</span><br><span class="line">  hosts: 192.168.88.138</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 安装</span><br><span class="line">      yum:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: present</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- name: 修改httpd的配置文件</span><br><span class="line">  hosts: 192.168.88.138</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 修改</span><br><span class="line">      <span class="built_in">command</span>: sed -i <span class="string">&#x27;s/#ServerName www.example.com:80/ServerName www.example.com:80/&#x27;</span> /etc/httpd/conf/httpd.conf </span><br><span class="line"></span><br><span class="line">- name: 启动httpd服务</span><br><span class="line">  hosts: 192.168.88.138</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 启动</span><br><span class="line">      service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: started</span><br><span class="line">        enabled: <span class="built_in">yes</span></span><br><span class="line">    - name: 关闭</span><br><span class="line">      service:</span><br><span class="line">        name: firewalld</span><br><span class="line">        state: stopped</span><br><span class="line">        enabled: no</span><br><span class="line">    - name: 重启</span><br><span class="line">      service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: restarted</span><br><span class="line">[root@gzh-cs8 playbook]<span class="comment"># ansible-playbook /etc/ansible/playbook/apache.yml </span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line"></span><br><span class="line">PLAY [下载yum源] ******************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [传输yum] *******************************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY [修改yum源的配置文件] *************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [修改] **********************************************************************************</span><br><span class="line">[WARNING]: Consider using the replace, lineinfile or template module rather than running</span><br><span class="line"><span class="string">&#x27;sed&#x27;</span>.  If you need to use <span class="built_in">command</span> because replace, lineinfile or template is insufficient</span><br><span class="line">you can add <span class="string">&#x27;warn: false&#x27;</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span> <span class="string">&#x27;command_warnings=False&#x27;</span> <span class="keyword">in</span></span><br><span class="line">ansible.cfg to get rid of this message.</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY [安装httpd服务] ***************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [安装] **********************************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY [修改httpd的配置文件] ************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [修改] **********************************************************************************</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY [启动httpd服务] ***************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [启动] **********************************************************************************</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [关闭] **********************************************************************************</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [重启] **********************************************************************************</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************</span><br><span class="line">192.168.88.138             : ok=12   changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </span><br></pre></td></tr></table></figure><h3 id="1-6编写部署nginx脚本"><a href="#1-6编写部署nginx脚本" class="headerlink" title="1.6编写部署nginx脚本"></a>1.6编写部署nginx脚本</h3><p>在编写脚本之前先了解nginx目录结构,和个目录存放的文件,这里参考书上的</p><p>Nginx 是一个高性能的开源 Web 服务器和反向代理服务器，通过使用 Ansible，可以实现自动化部署和配置 Nginx，简化服务器的设置和管理，并提高系统的可靠性和性能。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># mkdir /etc/ansible/roles/nginx</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># cd /etc/ansible/roles/nginx/</span></span><br><span class="line">[root@gzh-cs8 nginx]<span class="comment"># ls</span></span><br><span class="line">[root@gzh-cs8 nginx]<span class="comment"># mkdir tasks templates handlers files vars</span></span><br><span class="line">[root@gzh-cs8 nginx]<span class="comment"># ls</span></span><br><span class="line">files  handlers  tasks  templates</span><br><span class="line">[root@gzh-cs8 nginx]<span class="comment"># cd tasks</span></span><br><span class="line">[root@gzh-cs8 tasks]<span class="comment"># vim main.yml</span></span><br><span class="line">[root@gzh-cs8 tasks]<span class="comment"># cat main.yml </span></span><br><span class="line">---</span><br><span class="line">  - name: intall epel</span><br><span class="line">    yum: name=epel-release state=latest</span><br><span class="line">  - name: install nginx</span><br><span class="line">    yum: name=nginx state=latest</span><br><span class="line">  - name: copy nginx.conf  templte</span><br><span class="line">    template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  - name: copy index.html</span><br><span class="line">    copy: src=/etc/ansible/roles/nginx/files/index.html dest=/usr/share/nginx/html/index.html</span><br><span class="line">    notify: start nginx</span><br><span class="line">[root@gzh-cs8 files]<span class="comment"># vim index.html   </span></span><br><span class="line">[root@gzh-cs8 files]<span class="comment"># cat index.html </span></span><br><span class="line">hello Ansible-nginx</span><br><span class="line">[root@gzh-cs8 handlers]<span class="comment"># vim main.yml</span></span><br><span class="line">[root@gzh-cs8 handlers]<span class="comment"># cat main.yml </span></span><br><span class="line">---</span><br><span class="line">- name: start nginx  <span class="comment">#和notify的名字必须一样</span></span><br><span class="line">  service: name=nginx state=started</span><br><span class="line">[root@gzh-cs8 handlers]<span class="comment"># cd ../vars</span></span><br><span class="line">[root@gzh-cs8 vars]<span class="comment"># vim main.yml</span></span><br><span class="line">[root@gzh-cs8 vars]<span class="comment"># cat main.yml </span></span><br><span class="line">worker_connections: 2</span><br><span class="line">[root@gzh-cs8 vars]<span class="comment"># cd ../templates/</span></span><br><span class="line">[root@gzh-cs8 templates]<span class="comment"># vim nginx.conf.j2 </span></span><br><span class="line">[root@gzh-cs8 templates]<span class="comment"># cat nginx.conf.j2 </span></span><br><span class="line">worker_processes  2;</span><br><span class="line">http &#123;</span><br><span class="line">      include mime.types;</span><br><span class="line">      default_type application/octet-stream;</span><br><span class="line">      keepalive_timeout 65;</span><br><span class="line">      server &#123;</span><br><span class="line">           listen 80;</span><br><span class="line">            server_name localhost;</span><br><span class="line">            location / &#123;</span><br><span class="line">              root html;</span><br><span class="line">             index index.html index.htm;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"> events &#123;</span><br><span class="line">            worker_connections  1024;    <span class="comment">#nginx的最大并发访问量</span></span><br><span class="line">            use epoll;    <span class="comment">#异步IO</span></span><br><span class="line">        &#125;</span><br><span class="line">[root@gzh-cs8 nginx]<span class="comment"># cd ../</span></span><br><span class="line">[root@gzh-cs8 roles]<span class="comment"># vim site.yml</span></span><br><span class="line">[root@gzh-cs8 roles]<span class="comment"># cat </span></span><br><span class="line">nginx/    site.yml  </span><br><span class="line">[root@gzh-cs8 roles]<span class="comment"># cat site.yml </span></span><br><span class="line">---</span><br><span class="line">- hosts: 192.168.88.138</span><br><span class="line">  roles:</span><br><span class="line">       - nginx</span><br><span class="line">[root@gzh-cs8 roles]<span class="comment"># ansible-playbook site.yml </span></span><br><span class="line">[WARNING]: Invalid characters were found <span class="keyword">in</span> group names but not replaced, use -vvvv to see</span><br><span class="line">details</span><br><span class="line"></span><br><span class="line">PLAY [192.168.88.138] **********************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [nginx : intall epel] *****************************************************************</span><br><span class="line">changed: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [install nginx] ***********************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [copy nginx.conf  templte] ************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">TASK [nginx : copy index.html] *************************************************************</span><br><span class="line">ok: [192.168.88.138]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************</span><br><span class="line">192.168.88.138             : ok=5    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br></pre></td></tr></table></figure><p>打开浏览器验证</p><p><img src="https://oss.lingkongstudy.com.cn/linux//image-20231102150759614.png" alt="image-20231102150759614"></p><h2 id="二-SaltStack"><a href="#二-SaltStack" class="headerlink" title="二.SaltStack"></a>二.SaltStack</h2><h3 id="2-1SaltStack的安装与配置"><a href="#2-1SaltStack的安装与配置" class="headerlink" title="2.1SaltStack的安装与配置"></a>2.1SaltStack的安装与配置</h3><p>主机信息:</p><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">gzh-cs8</td><td align="center">192.168.88.137</td></tr><tr><td align="center">gzh-a1</td><td align="center">192.168.88.138</td></tr><tr><td align="center">gzh-a2</td><td align="center">192.168.88.139</td></tr></tbody></table><p>1.Master端安装(gzh-cs8)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install https://repo.saltstack.com/py3/redhat/salt-py3-repo-latest.el8.noarch.rpm</span><br><span class="line">yum -y install salt-master</span><br></pre></td></tr></table></figure><p>2.Minion端安装(gzh-a1,gzh-a2)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install https://repo.saltstack.com/py3/redhat/salt-py3-repo-latest.el8.noarch.rpm</span><br><span class="line">yum -y install salt-minion</span><br></pre></td></tr></table></figure><p>修改<code>/etc/salt/minion</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master: 192.168.88.137</span><br><span class="line"><span class="built_in">id</span>: saltminion1</span><br></pre></td></tr></table></figure><p>3.链接测试</p><p><code>master端</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 roles]<span class="comment"># systemctl start salt-master</span></span><br></pre></td></tr></table></figure><p><code>minion端</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-a1 ~]<span class="comment"># systemctl start salt-minion</span></span><br><span class="line">[root@gzh-a2 ~]<span class="comment"># systemctl start salt-minion</span></span><br></pre></td></tr></table></figure><p>在master端测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># salt-key</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">saltminion1</span><br><span class="line">saltminion2</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure><p>如果没出现上面的内容关闭防火墙再试一下</p><p>链接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># salt-key -a saltminion1,saltminion2</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">saltminion1</span><br><span class="line">saltminion2</span><br><span class="line">Proceed? [n/Y] Y</span><br><span class="line">Key <span class="keyword">for</span> minion saltminion1 accepted.</span><br><span class="line">Key <span class="keyword">for</span> minion saltminion2 accepted.</span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># salt-key</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">saltminion1</span><br><span class="line">saltminion2</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure><p>下面的模板用法就不写了,跟着书看一看和Ansible的用法差不多,我们直接进入实例</p><h3 id="2-2部署LAMP环境"><a href="#2-2部署LAMP环境" class="headerlink" title="2.2部署LAMP环境"></a>2.2部署LAMP环境</h3><p>LAMP 为 Linux、Apache、MySQL、PHP 的简称，这是一个常规的 Web 服务器环境解决方案，使用其首字母缩写“LAMP”来引用。它是一个用于创建和管理 Web 应用程序的开源开发平台。Linux 用作后端操作系统（OS）。Apache 是Web 服务器，MySQL 是数据库，PHP 是脚本语言。</p><p>搭建LAMP环境需要编写三个模块: httpd,php,mysql</p><p>在<code>/srv/salt</code>目录下面创建state文件<code>lamp.sls</code>用来实现各部分的功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 salt]<span class="comment"># vim lamp.sls </span></span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat lamp.sls </span></span><br><span class="line"><span class="comment">###httpd模块###</span></span><br><span class="line">install_httpd:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - name: httpd</span><br><span class="line">http_running:</span><br><span class="line">  service.running:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - <span class="built_in">enable</span>: Ture</span><br><span class="line">    - require:</span><br><span class="line">        - pkg: install_httpd</span><br><span class="line">    - watch:</span><br><span class="line">        - file: httpd_conf</span><br><span class="line">        - file: php_conf</span><br><span class="line">httpd_conf:</span><br><span class="line">  file.managed:</span><br><span class="line">    - name: /etc/httpd/conf/httpd.conf</span><br><span class="line">    - <span class="built_in">source</span>:</span><br><span class="line">        salt: //httpd.conf</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 600</span><br><span class="line"><span class="comment">###php模块###</span></span><br><span class="line">install_php:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - name: php_all</span><br><span class="line">    - pkgs:</span><br><span class="line">        - php</span><br><span class="line">        - php-mysql</span><br><span class="line">        - php-common</span><br><span class="line">        - php-gd</span><br><span class="line">        - php-mbstring</span><br><span class="line">        - php-devel</span><br><span class="line">        - php-xml</span><br><span class="line">    - require:</span><br><span class="line">        - pkg: install_httpd</span><br><span class="line">php_conf:</span><br><span class="line">  file.managed:</span><br><span class="line">    - name: /etc/php.ini</span><br><span class="line">    - <span class="built_in">source</span>:</span><br><span class="line">        salt: //php.ini</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 600</span><br><span class="line"><span class="comment">###mysql模块###</span></span><br><span class="line">mysql_repo_install:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - onlyif: [ ! -f /etc/yum.repos.d/mysql-community.repo ]</span><br><span class="line">    - names:</span><br><span class="line">        - rpm -ivh http://repo.mysql.com/mysql-community-release-sl7-5.noarch.rpm</span><br><span class="line">install_mysql:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - name: mysql-community-server</span><br><span class="line">    - pkgs:</span><br><span class="line">        - mysql-community-client</span><br><span class="line">        - mysql-community-devel</span><br><span class="line">mysql_running:</span><br><span class="line">  service.running:</span><br><span class="line">    - name: mysql</span><br></pre></td></tr></table></figure><p>这是书上的脚本,他把三个模块写在一起了,那你这里面运行肯定是报错的,因为里面的<code>httpd.conf</code>和<code>php.ini</code>配置文件都是不存在的,因为在实际的运维中,不同服务的配置文件是不一样的,所以,这里面的配置文件的操作实际上是将写好的配置文件上传到<code>saltminion1</code>节点上.因为不存在所以就会报错.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># cd /srv/salt/</span></span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># ls</span></span><br><span class="line">httpd  mysql  php  top.sls</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">├── httpd</span><br><span class="line">│   ├── httpd.sls</span><br><span class="line">│   └── index.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── my.sh</span><br><span class="line">│   └── mysql.sls</span><br><span class="line">├── php</span><br><span class="line">│   └── php.sls</span><br><span class="line">└── top.sls</span><br><span class="line"></span><br><span class="line">3 directories, 6 files</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat httpd/httpd.sls </span></span><br><span class="line"><span class="comment">#安装httpd</span></span><br><span class="line">httpd-install:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - name: httpd</span><br><span class="line"><span class="comment">#传输本地主页文件到远端</span></span><br><span class="line">httpd-index:</span><br><span class="line">  file.managed:</span><br><span class="line">    - name: /var/www/html/index.php</span><br><span class="line">    - <span class="built_in">source</span>: salt://httpd/index.php</span><br><span class="line"><span class="comment">#开启服务</span></span><br><span class="line">httpd-service:</span><br><span class="line">  service.running:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - <span class="built_in">enable</span>: True</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat httpd/index.php </span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat mysql/my.sh </span></span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line">mysqladmin password <span class="string">&quot;guo123&quot;</span></span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line">mysql -u root --password=<span class="string">&quot;guo123&quot;</span> -e <span class="string">&quot;create database if not exists mydb&quot;</span></span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat mysql/mysql.sls </span></span><br><span class="line">mysql-install:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - pkgs:</span><br><span class="line">      - mariadb-server</span><br><span class="line">      - mariadb</span><br><span class="line"></span><br><span class="line">mysql-service:</span><br><span class="line">  service.running:</span><br><span class="line">    - name: mariadb</span><br><span class="line">    - <span class="built_in">enable</span>: True</span><br><span class="line"><span class="comment">#传送脚本并执行脚本</span></span><br><span class="line">mysql-script:</span><br><span class="line">  file.managed:</span><br><span class="line">    - name: /tmp/my.sh</span><br><span class="line">    - <span class="built_in">source</span>: salt://mysql/my.sh</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: <span class="built_in">cd</span> /tmp/ &amp;&amp; <span class="built_in">chmod</span> +x my.sh &amp;&amp; ./my.sh</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat php/php.sls </span></span><br><span class="line">php-install:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - pkgs:</span><br><span class="line">      - php</span><br><span class="line">      - php-gd</span><br><span class="line">      - php-ldap</span><br><span class="line">      - php-odbc</span><br><span class="line">      - php-pear</span><br><span class="line">      - php-xml</span><br><span class="line">      - php-xmlrpc</span><br><span class="line">      - php-mbstring</span><br><span class="line">      - php-snmp</span><br><span class="line">      - php-soap</span><br><span class="line">      - curl</span><br><span class="line">      - libcurl-devel</span><br><span class="line">      - php-bcmath</span><br><span class="line"><span class="comment">#重启httpd服务</span></span><br><span class="line">httpd-stop:</span><br><span class="line">  cmd.run:</span><br><span class="line">    - name: systemctl restart httpd</span><br><span class="line">[root@gzh-cs8 salt]<span class="comment"># cat top.sls </span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">&#x27;saltminion1&#x27;</span>:</span><br><span class="line">    - httpd.httpd</span><br><span class="line">    - mysql.mysql</span><br><span class="line">    - php.php</span><br><span class="line">[root@master ~]<span class="comment"># salt &#x27;saltminion1&#x27; state.highstate</span></span><br><span class="line"><span class="comment">#执行成功显示如下</span></span><br><span class="line">Succeeded: 9 </span><br><span class="line">Failed:    0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核编译</title>
      <link href="/posts/8b5b639f/"/>
      <url>/posts/8b5b639f/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-内核编译"><a href="#第四章-内核编译" class="headerlink" title="第四章 内核编译"></a>第四章 内核编译</h1><h2 id="一-前期准备"><a href="#一-前期准备" class="headerlink" title="一.前期准备"></a>一.前期准备</h2><h3 id="1-查看当前系统的内核版本"><a href="#1-查看当前系统的内核版本" class="headerlink" title="1.查看当前系统的内核版本"></a>1.查看当前系统的内核版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># uname -r</span></span><br><span class="line">4.18.0-305.3.1.el8.x86_64</span><br></pre></td></tr></table></figure><h3 id="2-下载所需要的内核版本"><a href="#2-下载所需要的内核版本" class="headerlink" title="2.下载所需要的内核版本"></a>2.下载所需要的内核版本</h3><p>我们通过镜像网站下载所需的内核版本</p><p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel">https://mirrors.edge.kernel.org/pub/linux/kernel</a></p><p>我编译的是5.10.10版本的内核</p><p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.10.10.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.10.10.tar.gz</a></p><p>我们可以下载下来通过远程连接工具将他传入到centos8里面,也可以通过rz命令上传,也可以通过wget直接下载到centos8中.</p><p>这里我们通过远程连接工具上传过去,完成后解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># tar -zxvf linux-5.10.10.tar.gz </span></span><br><span class="line">linux-5.10.10/</span><br><span class="line">linux-5.10.10/.clang-format</span><br><span class="line">linux-5.10.10/.cocciconfig</span><br><span class="line">linux-5.10.10/.get_maintainer.ignore</span><br><span class="line">linux-5.10.10/.gitattributes</span><br><span class="line">linux-5.10.10/.gitignore</span><br><span class="line">linux-5.10.10/.mailmap</span><br><span class="line">linux-5.10.10/COPYING</span><br><span class="line">linux-5.10.10/CREDITS</span><br><span class="line">linux-5.10.10/Documentation/</span><br><span class="line">linux-5.10.10/Documentation/.gitignore</span><br><span class="line">......</span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># cd linux-5.10.10</span></span><br><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">arch</span>     CREDITS        fs       Kbuild   LICENSES     net      security  virt</span><br><span class="line">block    crypto         include  Kconfig  MAINTAINERS  README   sound</span><br><span class="line">certs    Documentation  init     kernel   Makefile     samples  tools</span><br><span class="line">COPYING  drivers        ipc      lib      mm           scripts  usr</span><br><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># ls -a</span></span><br><span class="line">.              COPYING                 .gitattributes  kernel       net       usr</span><br><span class="line">..             CREDITS                 .gitignore      lib          README    virt</span><br><span class="line"><span class="built_in">arch</span>           crypto                  include         LICENSES     samples</span><br><span class="line">block          Documentation           init            .mailmap     scripts</span><br><span class="line">certs          drivers                 ipc             MAINTAINERS  security</span><br><span class="line">.clang-format  fs                      Kbuild          Makefile     sound</span><br><span class="line">.cocciconfig   .get_maintainer.ignore  Kconfig         mm           tools</span><br></pre></td></tr></table></figure><h3 id="3-修改内核编译config文件"><a href="#3-修改内核编译config文件" class="headerlink" title="3.修改内核编译config文件"></a>3.修改内核编译<code>config</code>文件</h3><p>这里补充一下内核编译过程中三个重要的文件Makefile、Kconfig、.config,</p><p>不了解内核编译体系,编译修改内核有问题无从下手,自己写的驱动不知道怎么编进内核,不知道怎么配置内核,这些都与这三个文件有管.</p><ol><li><p>三者的作用：</p><p>简单来说就是去饭店点菜：Kconfig是菜单，Makefile是做法，.config就是你点的菜。</p><ol><li><p>Makefile：一个文本形式的文件，编译源文件的方法。</p><p>作用：用来定义哪些内容作为模块编译，哪些条件编译等。子目录Makefile被顶层Makefile包含。</p></li><li><p>Kconfig：一个文本形式的文件，内核的配置菜单。</p><p>每个config菜单项都有类型定义: bool布尔类型、 tristate三态(内建、模块、移除)、string字符串、 hex十六进制、integer整型。</p><ol><li><p>Tristate：</p><p>表示该项是否编进内核、编成模块。显示为&lt; &gt; , 假如选择编译成内核模块，则会在.config中生成一个 CONFIG_HELLO_MODULE&#x3D;m的配置，选择Y就是直接编进内核，会在.config中生成一个 CONFIG_HELLO_MODULE&#x3D;y的配置项。Tristate后的字符串是make menuconfig时显示的配置项名称。</p></li><li><p>bool：</p><p>此类型只能选中或不选中，make menuconfig时显示为[ ]，即无法配置成模块。</p></li><li><p>dependon:</p><p>该选项依赖于另一个选项，只有当依赖项被选中时，当前配置项的提示信息才会出现，才能设置当前配置项。</p></li><li><p>select:</p><p>反向依赖关系，该选项选中时，同时选中select后面定义的那一项。</p></li><li><p>help：</p><p>帮助信息。</p></li></ol><p>作用：决定make menuconfig时展示的菜单项(后面会用到)</p><p>目录层次迭代 ：</p><p>Kconfig中有类似语句：source “drivers&#x2F;Kconfig” ，用来包含(或嵌套)新的Kconfig文件，使得各个目录管理各自的配置内容(这些目录在编译目录中都存在)，不必把那些配置都写在同一个文件里，方便修改和管理。</p><p>例:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># cat Kconfig </span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: GPL-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For a description of the syntax of this configuration file,</span></span><br><span class="line"><span class="comment"># see Documentation/kbuild/kconfig-language.rst.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mainmenu <span class="string">&quot;Linux/<span class="subst">$(ARCH)</span> <span class="subst">$(KERNELVERSION)</span> Kernel Configuration&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;scripts/Kconfig.include&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;init/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;kernel/Kconfig.freezer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;fs/Kconfig.binfmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;mm/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;net/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;drivers/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;fs/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;security/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;crypto/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;lib/Kconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;lib/Kconfig.debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;Documentation/Kconfig&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>.config：编译内核所依据的配置。</p><p>它是内核编译参考文件，查看里面内容可以知道哪些驱动被编译进内核。</p></li></ol></li></ol><p>通过上面的简单补充,大概了解了我们为什么要配置<code>.config</code>文件了,就是为了在编译的时候给定要编译的选项,根据需求进行编译.</p><p>开始的时候编译目录中是没有<code>.config</code>文件的,我们需要生成<code>.config</code>文件</p><p>生成<code>.config</code>文件的方式的两种方法：</p><ol><li><p><code>make menuconfig</code></p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231008171234803.png" alt="image-20231008171234803"></p><p>这里什么都不用做直接保存然后退出.</p></li><li><p>直接修改当前系统内核<code>.config</code></p><p>我们使用当前系统内核配置文件作为基础进行简单修改的方式配置我们新的内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># uname -r</span></span><br><span class="line">4.18.0-305.3.1.el8.x86_64</span><br><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># cp /boot/config-4.18.0-305.3.1.el8.x86_64 ./.config</span></span><br><span class="line"><span class="built_in">cp</span>：是否覆盖<span class="string">&#x27;./.config&#x27;</span>？ y</span><br></pre></td></tr></table></figure><p>我们需要修改<code>.config</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .config</span><br></pre></td></tr></table></figure><p>在<code>.config</code>文件中找到<code>CONFIG_SYSTEM_TRUSTED_KEYS</code>，<code>CONFIG_DEBUG_INFO_BTF</code>这两行，并将这两行注释。</p></li></ol><p>完成<code>.config</code>修改以后,安装编译所需要的依赖.</p><h3 id="4-安装内核编译所需要的依赖"><a href="#4-安装内核编译所需要的依赖" class="headerlink" title="4.安装内核编译所需要的依赖"></a>4.安装内核编译所需要的依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ncurses-devel gcc-c++ make openssl-devel bison flex elfutils-libelf-devel bc</span><br></pre></td></tr></table></figure><h3 id="5-编译内核"><a href="#5-编译内核" class="headerlink" title="5.编译内核"></a>5.编译内核</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><p><code>-j8</code>参数根据个人自己的计算机进行设置，我的电脑是8核的所以我使用<code>-j8</code>,如果你的电脑是16核的就可以使用<code>-j16</code>,注意<code>-j</code>后面的数字不要超过你电脑的核心数就行了。</p><p>编译过程需要很长时间,而且你的centos8的磁盘容量要足够大不然到最后可能编译不成功.</p><p>如果编译完成并没有报错的话就可以进行下一步的编译了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment">#make modules</span></span><br><span class="line">CALLscripts/checksyscalls.sh</span><br><span class="line">CALLscripts/atomic/check-atomics.sh</span><br><span class="line">DESCENDobjtool</span><br><span class="line">CHKinclude/generated/compile.h</span><br><span class="line">CHKkernel/kheaders data.tar.xz</span><br></pre></td></tr></table></figure><p>然后下一步</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make modules_install</span><br></pre></td></tr></table></figure><p>下一步</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment">#make install</span></span><br><span class="line">sh ./arch/x86/boot/install.sh 5.10.10 <span class="built_in">arch</span>/x86/boot/bzImage</span><br><span class="line">System.map <span class="string">&quot;/boot&quot;</span></span><br><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>出现上面的输出说明编译成功了</p><h3 id="6-使用grubby切换内核"><a href="#6-使用grubby切换内核" class="headerlink" title="6.使用grubby切换内核"></a>6.使用grubby切换内核</h3><p><code>grubby</code>是一个用于更新和显示有关各种体系结构特定的引导程序的配置文件信息的命令行工具。 它主要设计用于安装新内核并需要查找有关当前引导环境的信息的脚本，同时也可以对启动内核的各项信息参数进行修改。<code>grubby</code>已经默认安装在<code>centos8</code>中，如果系统中没有<code>grubby</code>我们也可以通过<code>yum</code>进行安装<code>grubby</code>工具。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y grubby</span><br></pre></td></tr></table></figure><p>查看当前系统默认启动的内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># grubby --default-kernel</span></span><br><span class="line">/boot/vmlinuz-5.10.10</span><br></pre></td></tr></table></figure><p>现在我们的默认内核就是我们的5.10.10</p><p>可以通过以下命令查看当前系统有哪些可用的内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># grubby --info=ALL | grep ^kernel</span></span><br><span class="line">kernel=<span class="string">&quot;/boot/vmlinuz-5.10.10&quot;</span></span><br><span class="line">kernel=<span class="string">&quot;/boot/vmlinuz-4.18.0-305.3.1.el8.x86_64&quot;</span></span><br><span class="line">kernel=<span class="string">&quot;/boot/vmlinuz-0-rescue-b73cc1704605433b87c2a93c1dff5a5d&quot;</span></span><br></pre></td></tr></table></figure><p>通过命令<code>grubby --set-default=</code>可以设置你的默认启动内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># grubby --set-default=/boot/vmlinuz-4.18.0-305.3.1.el8.x86_64</span></span><br><span class="line">The default is /boot/loader/entries/b73cc1704605433b87c2a93c1dff5a5d-4.18.0-305.3.1.el8.x86_64.conf with index 1 and kernel /boot/vmlinuz-4.18.0-305.3.1.el8.x86_64</span><br><span class="line">[root@gzh-cs8 linux-5.10.10]<span class="comment"># grubby --default-kernel</span></span><br><span class="line">/boot/vmlinuz-4.18.0-305.3.1.el8.x86_64</span><br></pre></td></tr></table></figure><p>我们重启系统看一下</p><p><img src="https://oss.lingkongstudy.com.cn/linux/image-20231008175319303.png" alt="image-20231008175319303"></p><p>成功了!!!</p><p><img src="https://dl4.weshineapp.com/gif/20220408/f5a3cd83f0593fcdfe5c1d083e02f718.gif?f=micro_" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数学函数</title>
      <link href="/posts/7a6883ef/"/>
      <url>/posts/7a6883ef/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python-abs-函数"><a href="#一、Python-abs-函数" class="headerlink" title="一、Python abs() 函数"></a>一、Python abs() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python 内置的 <strong>abs()</strong> 函数返回数字的绝对值</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>( x )</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式，可以是整数，浮点数，复数</td></tr></tbody></table><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数返回 x ( 数字 ) 的绝对值，如果参数是一个复数，则返回它的大小</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">abs</span>(-<span class="number">20</span>)</span><br><span class="line">x=<span class="built_in">abs</span>(<span class="number">20.22</span>)</span><br><span class="line">y=<span class="built_in">abs</span>(<span class="number">119</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abs(-20)=:&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abs(20.22)=:&quot;</span>,x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abs(119L)=:&quot;</span>,y)</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">20</span>)=: <span class="number">20</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="number">20.22</span>)=: <span class="number">20.22</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="number">119L</span>)=: <span class="number">119</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="二、Python-math-ceil-函数"><a href="#二、Python-math-ceil-函数" class="headerlink" title="二、Python math.ceil() 函数"></a>二、Python math.ceil() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.ceil(x)</strong> 函数返回一个大于或等于 x 的的最小整数, 俗称天花板取整，可以与[math.floor()](#六、Python math.floor() 函数)进行比较</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.ceil( x )</span><br></pre></td></tr></table></figure><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个大于或等于 x 的的最小整数</p><h2 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h2><p>向上取整</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.ceil(123.12)=:&quot;</span>,math.ceil(<span class="number">123.12</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.ceil(-20.22)=:&quot;</span>,math.ceil(-<span class="number">20.22</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.ceil(20.89)=:&quot;</span>,math.ceil(<span class="number">20.89</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.ceil(<span class="number">123.12</span>)=: <span class="number">124</span></span><br><span class="line">math.ceil(-<span class="number">20.22</span>)=: -<span class="number">20</span></span><br><span class="line">math.ceil(<span class="number">20.89</span>)=: <span class="number">21</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="三、Python-operator-函数"><a href="#三、Python-operator-函数" class="headerlink" title="三、Python operator()函数"></a>三、Python operator()函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python 3.X 的版本中已经没有 cmp 函数，如果你需要实现比较功能，需要引入 operator 模块，适合任何对象，包含的方法有：</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">operator.lt(a, b)</span><br><span class="line">operator.le(a, b)</span><br><span class="line">operator.eq(a, b)</span><br><span class="line">operator.ne(a, b)</span><br><span class="line">operator.ge(a, b)</span><br><span class="line">operator.gt(a, b)</span><br><span class="line">operator.__lt__(a, b)</span><br><span class="line">operator.__le__(a, b)</span><br><span class="line">operator.__eq__(a, b)</span><br><span class="line">operator.__ne__(a, b)</span><br><span class="line">operator.__ge__(a, b)</span><br><span class="line">operator.__gt__(a, b)</span><br><span class="line">lt(a,b) 相当于 a&lt;b     <span class="comment">#从第一个数字或字母（ASCII）比大小 </span></span><br><span class="line"></span><br><span class="line">le(a,b)相当于a&lt;=b</span><br><span class="line"></span><br><span class="line">eq(a,b)相当于a==b     <span class="comment">#字母完全一样，返回True,</span></span><br><span class="line"></span><br><span class="line">ne(a,b)相当于a!=b</span><br><span class="line"></span><br><span class="line">gt(a,b)相当于a&gt;b</span><br><span class="line"></span><br><span class="line">ge(a,b)相当于 a&gt;=b</span><br><span class="line"><span class="comment">#函数的返回值是布尔哦</span></span><br></pre></td></tr></table></figure><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr><tr><td>y</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h2><ol><li>如果 x &lt; y 返回 -1</li><li>如果 x &#x3D;&#x3D; y 返回 0</li><li>如果 x &gt; y 返回 1</li></ol><h2 id="例：-2"><a href="#例：-2" class="headerlink" title="例："></a>例：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.lt(2,3)=:&quot;</span>,operator.lt(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.le(2,2)=:&quot;</span>,operator.le(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.ge(3,2)=:&quot;</span>,operator.ge(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.ge(&#x27;python&#x27;,&#x27;Python&#x27;)=:&quot;</span>,operator.ge(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">operator.lt(<span class="number">2</span>,<span class="number">3</span>)=: <span class="literal">True</span></span><br><span class="line">operator.le(<span class="number">2</span>,<span class="number">2</span>)=: <span class="literal">True</span></span><br><span class="line">operator.ge(<span class="number">3</span>,<span class="number">2</span>)=: <span class="literal">True</span></span><br><span class="line">operator.ge(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>)=: <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="四、Python-math-exp-函数"><a href="#四、Python-math-exp-函数" class="headerlink" title="四、Python math.exp() 函数"></a>四、Python math.exp() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.exp()</strong> 函数返回 x 的指数 e^x^</p><h2 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.exp( x )</span><br></pre></td></tr></table></figure><h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h2><p>x的指数 e^x^</p><h2 id="例：-3"><a href="#例：-3" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.exp()</strong> 方法返回一些数值的指数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.exp(2)=:&quot;</span>,math.exp(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.exp(-45)=:&quot;</span>,math.exp(-<span class="number">45</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.exp(<span class="number">2</span>)=: <span class="number">7.38905609893065</span></span><br><span class="line">math.exp(-<span class="number">45</span>)=: <span class="number">2.8625185805493937e-20</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="五、Python-math-fabs-函数"><a href="#五、Python-math-fabs-函数" class="headerlink" title="五、Python math.fabs() 函数"></a>五、Python math.fabs() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.fabs()</strong> 函数返回数值的浮点数绝对值，如 math.fabs(-10) 返回 10.0</p><p>fabs() 函数类似于 [abs()](#一、Python abs() 函数) 函数，但是他有两点区别</p><ol><li>abs() 是内置函数。 fabs() 函数在 math 模块中定义</li><li>fabs() 函数只对浮点型跟整型数值有效, abs() 还可以运用在复数中</li></ol><h2 id="导入模块-2"><a href="#导入模块-2" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.fabs( x )</span><br></pre></td></tr></table></figure><h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h2><p>数字的浮点数形式的绝对值</p><h2 id="例：-4"><a href="#例：-4" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.fabs()</strong> 返回一些数值的浮点类型绝对值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.fabs(math.pi)=:&quot;</span>,math.fabs(math.pi))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.fabs(-20.22)=:&quot;</span>,math.fabs(-<span class="number">20.22</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.fabs(22.20)=:&quot;</span>,math.fabs(<span class="number">22.20</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.fabs(math.pi)=: <span class="number">3.141592653589793</span></span><br><span class="line">math.fabs(-<span class="number">20.22</span>)=: <span class="number">20.22</span></span><br><span class="line">math.fabs(<span class="number">22.20</span>)=: <span class="number">22.2</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="六、Python-math-floor-函数"><a href="#六、Python-math-floor-函数" class="headerlink" title="六、Python math.floor() 函数"></a>六、Python math.floor() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.floor()</strong> 函数返回数字的下舍整数，俗称地板流取整</p><p>可以与[math.ceil()](#二、Python math.ceil() 函数)进行比较。</p><h2 id="导入模块-3"><a href="#导入模块-3" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.floor( x )</span><br></pre></td></tr></table></figure><h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h2><p>数字的下舍整数</p><h2 id="例：-5"><a href="#例：-5" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.floor()</strong> 函数给一些数值向下取整</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math<span class="comment">#向下取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.floor(-20.22)=:&quot;</span>,math.floor(-<span class="number">20.22</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.floor(20.04)=:&quot;</span>,math.floor(<span class="number">20.04</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.floor(-<span class="number">20.22</span>)=: -<span class="number">21</span></span><br><span class="line">math.floor(<span class="number">20.04</span>)=: <span class="number">20</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="七、Python-math-log-函数"><a href="#七、Python-math-log-函数" class="headerlink" title="七、Python math.log() 函数"></a>七、Python math.log() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><p>Python <strong>math.log()</strong> 函数返回 x 的自然对数</p><h2 id="导入模块-4"><a href="#导入模块-4" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.log( x )</span><br></pre></td></tr></table></figure><h2 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h2><p>返回 x 的自然对数，x &gt; 0</p><h2 id="例：-6"><a href="#例：-6" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.log()</strong> 函数返回一些数值的自然对数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math<span class="comment">#对自然数取对数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log(10)=:&quot;</span>,math.log(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log(4)=:&quot;</span>,math.log(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log(2022)=:&quot;</span>,math.log(<span class="number">2022</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.log(<span class="number">10</span>)=: <span class="number">2.302585092994046</span></span><br><span class="line">math.log(<span class="number">4</span>)=: <span class="number">1.3862943611198906</span></span><br><span class="line">math.log(<span class="number">2022</span>)=: <span class="number">7.611842399580417</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><h1 id="八、Python-math-log10-函数"><a href="#八、Python-math-log10-函数" class="headerlink" title="八、Python math.log10() 函数"></a>八、Python math.log10() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><p>Python <strong>math.log10()</strong> 函数返回返回以 10 为基数的 x 对数，即 log10x</p><h2 id="导入模块-5"><a href="#导入模块-5" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.log10( x )</span><br></pre></td></tr></table></figure><h2 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h2><p>返回以 10 为基数的 x 对数，x&gt;0</p><h2 id="例：-7"><a href="#例：-7" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.log10()</strong> 求一些数值的以 10 为底的对数值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math<span class="comment">#以10为底取对数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log10(11.11)=:&quot;</span>,math.log10(<span class="number">11.11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log10(2022)=:&quot;</span>,math.log10(<span class="number">2022</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.log10(10)=:&quot;</span>,math.log10(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.log10(<span class="number">11.11</span>)=: <span class="number">1.0457140589408676</span></span><br><span class="line">math.log10(<span class="number">2022</span>)=: <span class="number">3.3057811512549824</span></span><br><span class="line">math.log10(<span class="number">10</span>)=: <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><h1 id="九、Python-max-函数"><a href="#九、Python-max-函数" class="headerlink" title="九、Python max() 函数"></a>九、Python max() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><p>Python 内置的 <strong>max()</strong> 方法返回给定参数的最大值，参数可以为序列</p><p><strong>max()</strong> 可应用于 列表、元组、数字、字符串。</p><h2 id="max-语法"><a href="#max-语法" class="headerlink" title="max() 语法"></a>max() 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure><h2 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr><tr><td>y</td><td>数值表达式</td></tr><tr><td>z</td><td>数值表达式</td></tr><tr><td>…</td><td>更多数值表达式</td></tr></tbody></table><h2 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h2><p>给定参数的最大值</p><h2 id="例：-8"><a href="#例：-8" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>max()</strong> 函数求取一些数值中的最大值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max(12,3.2,34.2,12.3)=:&quot;</span>,<span class="built_in">max</span>(<span class="number">12</span>,<span class="number">3.2</span>,<span class="number">34.2</span>,<span class="number">12.3</span>))<span class="comment">#求最大值</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;max(80, 100, 1000)=: &quot;</span>, <span class="built_in">max</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">1000</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;max(-20, 100, 400)=: &quot;</span>, <span class="built_in">max</span>(-<span class="number">20</span>, <span class="number">100</span>, <span class="number">400</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;max(-80, -20, -10)=: &quot;</span>, <span class="built_in">max</span>(-<span class="number">80</span>, -<span class="number">20</span>, -<span class="number">10</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;max(0, 100, -400)=: &quot;</span>, <span class="built_in">max</span>(<span class="number">0</span>, <span class="number">100</span>, -<span class="number">400</span>) )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">12</span>,<span class="number">3.2</span>,<span class="number">34.2</span>,<span class="number">12.3</span>)=: <span class="number">34.2</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">1000</span>)=:  <span class="number">1000</span></span><br><span class="line"><span class="built_in">max</span>(-<span class="number">20</span>, <span class="number">100</span>, <span class="number">400</span>)=:  <span class="number">400</span></span><br><span class="line"><span class="built_in">max</span>(-<span class="number">80</span>, -<span class="number">20</span>, -<span class="number">10</span>)=:  -<span class="number">10</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">0</span>, <span class="number">100</span>, -<span class="number">400</span>)=:  <span class="number">100</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><h1 id="十、Python-min-函数"><a href="#十、Python-min-函数" class="headerlink" title="十、Python min() 函数"></a>十、Python min() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><p>Python 内置的 <strong>min()</strong> 方法返回给定参数的最小值，参数可以为序列</p><p><strong>min()</strong> 可用于 列表、元组、数字、字符串。</p><h2 id="min-语法"><a href="#min-语法" class="headerlink" title="min() 语法"></a>min() 语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>( x, y, z, .... )</span><br></pre></td></tr></table></figure><h2 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr><tr><td>y</td><td>数值表达式</td></tr><tr><td>z</td><td>数值表达式</td></tr><tr><td>…</td><td>更多数值表达式</td></tr></tbody></table><h2 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h2><p>给定参数的最小值</p><h2 id="例：-9"><a href="#例：-9" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>max()</strong> 函数求取一些数值中的最小值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min(12,3.2,34.2,12.3)=:&quot;</span>,<span class="built_in">min</span>(<span class="number">12</span>,<span class="number">3.2</span>,<span class="number">34.2</span>,<span class="number">12.3</span>))<span class="comment">#求最小值</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;min(80, 100, 1000)=: &quot;</span>, <span class="built_in">min</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">1000</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;min(-20, 100, 400)=: &quot;</span>, <span class="built_in">min</span>(-<span class="number">20</span>, <span class="number">100</span>, <span class="number">400</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;min(-80, -20, -10)=: &quot;</span>, <span class="built_in">min</span>(-<span class="number">80</span>, -<span class="number">20</span>, -<span class="number">10</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;min(0, 100, -400)=: &quot;</span>, <span class="built_in">min</span>(<span class="number">0</span>, <span class="number">100</span>, -<span class="number">400</span>) )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="built_in">min</span>(<span class="number">12</span>,<span class="number">3.2</span>,<span class="number">34.2</span>,<span class="number">12.3</span>)=: <span class="number">3.2</span></span><br><span class="line"><span class="built_in">min</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">1000</span>)=:  <span class="number">80</span></span><br><span class="line"><span class="built_in">min</span>(-<span class="number">20</span>, <span class="number">100</span>, <span class="number">400</span>)=:  -<span class="number">20</span></span><br><span class="line"><span class="built_in">min</span>(-<span class="number">80</span>, -<span class="number">20</span>, -<span class="number">10</span>)=:  -<span class="number">80</span></span><br><span class="line"><span class="built_in">min</span>(<span class="number">0</span>, <span class="number">100</span>, -<span class="number">400</span>)=:  -<span class="number">400</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md.md">返回上一级</a></p><h1 id="十一、Python-math-modf-函数"><a href="#十一、Python-math-modf-函数" class="headerlink" title="十一、Python math.modf() 函数"></a>十一、Python math.modf() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.modf()</strong> 函数返回 x 的小数部分与整数部分组成的二元组，两部分的数值符号与 x 相同</p><p>整数部分以浮点型表示</p><h2 id="导入模块-6"><a href="#导入模块-6" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.modf( x )</span><br></pre></td></tr></table></figure><h2 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h2><p>返回 x 的整数部分与小数部分</p><h2 id="例：-10"><a href="#例：-10" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.modf()</strong> 返回一些数值的整数部分和小数部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.domf(100.12)&quot;</span>,math.modf(<span class="number">100.12</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.modf(100.17)=:&quot;</span>,math.modf(<span class="number">100.17</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.modf(-math.pi)=:&quot;</span>,math.modf(-math.pi))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.domf(<span class="number">100.12</span>) (<span class="number">0.12000000000000455</span>, <span class="number">100.0</span>)</span><br><span class="line">math.modf(<span class="number">100.17</span>)=: (<span class="number">0.1700000000000017</span>, <span class="number">100.0</span>)</span><br><span class="line">math.modf(-math.pi)=: (-<span class="number">0.14159265358979312</span>, -<span class="number">3.0</span>)</span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="十二、Python-math-pow-函数"><a href="#十二、Python-math-pow-函数" class="headerlink" title="十二、Python math.pow() 函数"></a>十二、Python math.pow() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.pow()</strong> 方法返回 xy ( x 的 y 次方 ) 的值</p><h2 id="导入模块-7"><a href="#导入模块-7" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.<span class="built_in">pow</span>( x, y [,z])</span><br></pre></td></tr></table></figure><p><strong>函数是计算 x 的 y 次方，如果 z 在存在，则再对结果进行取模，其结果等效于 pow(x,y) %z。</strong></p><p><strong>注意：</strong>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p><blockquote><p><strong>注意：</strong></p><p>内置的 **pow()**会把参数作为整型</p><p>而 math.pow() 方法则会把参数转换为 float</p></blockquote><h2 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr><tr><td>y</td><td>数值表达式</td></tr><tr><td>z</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h2><p>返回 xy ( x 的 y 次方 ) 的值</p><h2 id="例：-11"><a href="#例：-11" class="headerlink" title="例："></a>例：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math   <span class="comment"># 导入 math 模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;math.pow(100, 2) : &quot;</span>, math.<span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 使用内置，查看输出结果区别</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;pow(100, 2) : &quot;</span>, <span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pow(10,2,2) :&quot;</span>,<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;math.pow(100, -2) : &quot;</span>, math.<span class="built_in">pow</span>(<span class="number">100</span>, -<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;math.pow(2, 4) : &quot;</span>, math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;math.pow(3, 0) : &quot;</span>, math.<span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.<span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>) :  <span class="number">10000.0</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>) :  <span class="number">10000</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">2</span>,<span class="number">2</span>) : <span class="number">0</span></span><br><span class="line">math.<span class="built_in">pow</span>(<span class="number">100</span>, -<span class="number">2</span>) :  <span class="number">0.0001</span></span><br><span class="line">math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>) :  <span class="number">16.0</span></span><br><span class="line">math.<span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">0</span>) :  <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="十三、Python-round-函数"><a href="#十三、Python-round-函数" class="headerlink" title="十三、Python round() 函数"></a>十三、Python round() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python 内建的 <strong>round()</strong> 函数用于返回浮点数 x 的四舍五入值</p><h2 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>( x [, n]  )</span><br></pre></td></tr></table></figure><p>如果只写round(x)默认保留整数。</p><h2 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr><tr><td>n</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h2><p>返回浮点数 x 的四舍五入值</p><h2 id="例：-12"><a href="#例：-12" class="headerlink" title="例："></a>例：</h2><p>下面的代码列出了一些浮点数的四舍五入值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(math.pi,2)=:&quot;</span>,<span class="built_in">round</span>(math.pi,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(2.022,2)=:&quot;</span>,<span class="built_in">round</span>(<span class="number">2.022</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(20.22)=:&quot;</span>,<span class="built_in">round</span>(<span class="number">20.22</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="built_in">round</span>(math.pi,<span class="number">2</span>)=: <span class="number">3.14</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">2.022</span>,<span class="number">2</span>)=: <span class="number">2.02</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">20.22</span>)=: <span class="number">20</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><h1 id="十四、Python-math-sqrt-函数"><a href="#十四、Python-math-sqrt-函数" class="headerlink" title="十四、Python math.sqrt() 函数"></a>十四、Python math.sqrt() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.sqrt()</strong> 函数返回数字 x 的平方根</p><h2 id="导入模块-8"><a href="#导入模块-8" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.sqrt( x )</span><br></pre></td></tr></table></figure><h2 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>数值表达式</td></tr></tbody></table><h2 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h2><p>数字 x 的平方根</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>下面的代码使用 <strong>math.sqrt()</strong> 函数返回一些数值的平方根</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math             <span class="comment">#平方根</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.sqrt(20)=:&quot;</span>,math.sqrt(<span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.sqrt(4)=:&quot;</span>,math.sqrt(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;math.sqrt(20.22)=:&quot;</span>,math.sqrt(<span class="number">20.22</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">math.sqrt(<span class="number">20</span>)=: <span class="number">4.47213595499958</span></span><br><span class="line">math.sqrt(<span class="number">4</span>)=: <span class="number">2.0</span></span><br><span class="line">math.sqrt(<span class="number">20.22</span>)=: <span class="number">4.496665431183423</span></span><br></pre></td></tr></table></figure><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python随机数函数</title>
      <link href="/posts/ede7602f/"/>
      <url>/posts/ede7602f/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python-random-choice-函数"><a href="#一、Python-random-choice-函数" class="headerlink" title="一、Python random.choice() 函数"></a>一、Python random.choice() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>random.choice()</strong> 函数随机的返回一个列表，元组或字符串的元素(字符)</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.choice( seq  )</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>seq</td><td>一个列表，元组或字符串</td></tr></tbody></table><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回随机项</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>random.choice()</strong> 函数返回参数中的随机项</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random<span class="comment">#随机抽出一个</span></span><br><span class="line">ls=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(random.choice(ls))</span><br><span class="line"><span class="built_in">print</span>(random.choice(<span class="built_in">range</span>(<span class="number">12</span>)))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">2</span>  <span class="number">9</span></span><br><span class="line"><span class="number">6</span>  <span class="number">10.</span>.....</span><br></pre></td></tr></table></figure><h1 id="二、Python-random-randrange-函数"><a href="#二、Python-random-randrange-函数" class="headerlink" title="二、Python random.randrange() 函数"></a>二、Python random.randrange() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>random.randrange()</strong> 函数返回指定递增基数集合中的一个随机数，基数缺省值为 1</p><h2 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randrange ([start,] stop [,step])</span><br></pre></td></tr></table></figure><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>指定范围内的开始值，包含在范围内</td></tr><tr><td>stop</td><td>指定范围内的结束值，不包含在范围内</td></tr><tr><td>step</td><td>指定递增基数</td></tr></tbody></table><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>从给定的范围随机的返回一项</p><h2 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h2><p>下面的范例使用 <strong>random.randrange()</strong> 函数从范围内随机返回一项</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random           <span class="comment">#范围随机抽取</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>,<span class="number">20</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1.</span>.....</span><br></pre></td></tr></table></figure><h1 id="三、Python-random-random-函数"><a href="#三、Python-random-random-函数" class="headerlink" title="三、Python random.random() 函数"></a>三、Python random.random() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>random.random()</strong> 函数返回随机生成的一个实数，值在 [0,1) 范围内</p><h2 id="导入模块-2"><a href="#导入模块-2" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.random()</span><br></pre></td></tr></table></figure><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><p>无</p><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h2><p>返回随机生成的一个实数，值在 [0,1) 范围内</p><h2 id="例：-2"><a href="#例：-2" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>random.random()</strong> 随机返回 [0,1) 之间的浮点数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random           <span class="comment">#随机生成一个实数在[0,1)</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.7275297730621284</span>......</span><br></pre></td></tr></table></figure><h1 id="四、Python-random-seed-函数"><a href="#四、Python-random-seed-函数" class="headerlink" title="四、Python random.seed() 函数"></a>四、Python random.seed() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>random.seed()</strong> 函数改变随机数生成器的种子</p><p>可以在调用其它的随机模块函数之前调用此函数</p><h2 id="导入模块-3"><a href="#导入模块-3" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed ( [x] )</span><br></pre></td></tr></table></figure><h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>改变随机数生成器的种子 seed 默认情况下，Python 会自动播种，所以这个函数是否调用不太重要</td></tr></tbody></table><h2 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h2><p>无</p><h2 id="例：-3"><a href="#例：-3" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 random.seed() 函数给随机数生成器播种</p><blockquote><p>注意，同样的种子的返回值是一样的</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">101</span>)</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.5811521325045647</span></span><br></pre></td></tr></table></figure><h1 id="五、Python-random-shuffle-函数"><a href="#五、Python-random-shuffle-函数" class="headerlink" title="五、Python random.shuffle() 函数"></a>五、Python random.shuffle() 函数</h1><p><a href="https://www.twle.cn/l/yufei/python30/python-30-number.html">返回上一级</a></p><p>Python <strong>random.shuffle()</strong> 函数将序列中的元素随机打乱</p><p>该方法会修改原序列</p><h2 id="导入模块-4"><a href="#导入模块-4" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.shuffle (lst )</span><br></pre></td></tr></table></figure><h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>lst</td><td>可以是一个序列或者元组</td></tr></tbody></table><h2 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h2><p>无</p><h2 id="例：-4"><a href="#例：-4" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>random.shuffle()</strong> 随机打乱序列</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;zhi&#x27;</span>,<span class="string">&#x27;guo&#x27;</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="string">&#x27;guo&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;zhi&#x27;</span>]......</span><br></pre></td></tr></table></figure><h1 id="六、Python-random-uniform-函数"><a href="#六、Python-random-uniform-函数" class="headerlink" title="六、Python random.uniform() 函数"></a>六、Python random.uniform() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>random.uniform()</strong> 函数随机生成下一个浮点数，值在 [x, y) 范围内</p><h2 id="导入模块-5"><a href="#导入模块-5" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.uniform(x, y)</span><br></pre></td></tr></table></figure><h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>随机数的最小值，包含该值</td></tr><tr><td>y</td><td>随机数的最大值，不包含该值</td></tr></tbody></table><h2 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个浮点数</p><h2 id="例：-5"><a href="#例：-5" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>random.uniform()</strong> 随机返回区间内的一个浮点数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">2.294256403223642</span>......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本用法</title>
      <link href="/posts/a97415ad/"/>
      <url>/posts/a97415ad/</url>
      
        <content type="html"><![CDATA[<h1 id="python学习日记"><a href="#python学习日记" class="headerlink" title="python学习日记"></a>python学习日记</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.py">python简单实例</a></p><h2 id="一、标准数据类型"><a href="#一、标准数据类型" class="headerlink" title="一、标准数据类型"></a>一、标准数据类型</h2><p>内存中存储的数据可以有多种类型</p><p>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储</p><p>Python 3 定义了一些标准类型，用于存储各种类型的数据</p><p>Python 3 有六个标准的数据类型</p><ol><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set ( 集合 )</li><li>Dictionary（字典）</li></ol><h2 id="Python数字"><a href="#Python数字" class="headerlink" title="Python数字"></a>Python数字</h2><p>数字数据类型用于存储数值</p><p>它们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象</p><p>当指定一个值时，Number 对象就会被创建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var1=<span class="number">1</span></span><br><span class="line">var2=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>还有del语法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><p><img src="/.io//QQ%E6%88%AA%E5%9B%BE20220529234744.png" alt="QQ截图20220529234744"></p><p>如上图是删除单个元素的，如果print（var1）就会报错。</p><p>删除完这个元素就不存在了。</p><p>还可以使用del语句删除单个或多个对象的引用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> vardel var_a, var_b</span><br></pre></td></tr></table></figure><p><img src="/.io//QQ%E6%88%AA%E5%9B%BE20220530000140.png" alt="QQ截图20220530000140"></p><p>就像前面的一样，简单理解就是删除就没有了。</p><p>Python 3 支持四种不同的数字类型</p><ul><li><p>int (有符号整型 )</p></li><li><p>float ( 浮点型 )</p></li><li><p>bool ( 布尔 )</p></li><li><p>complex ( 复数 )</p><h3 id="各种数字类型范例"><a href="#各种数字类型范例" class="headerlink" title="各种数字类型范例"></a>各种数字类型范例</h3><table><thead><tr><th align="center">int（整数）</th><th align="center">float（浮点型）</th><th align="center">complex（复数）</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">0.0</td><td align="center">3.14j</td></tr><tr><td align="center">100</td><td align="center">15.20</td><td align="center">45.j</td></tr><tr><td align="center">-786</td><td align="center">-21.9</td><td align="center">9.322e-36j</td></tr><tr><td align="center">080</td><td align="center">32.3+e18</td><td align="center">.876j</td></tr><tr><td align="center">-0490</td><td align="center">-90.</td><td align="center">-.6545+0J</td></tr><tr><td align="center">-0x260</td><td align="center">-32.54e100</td><td align="center">3e+26J</td></tr><tr><td align="center">0x69</td><td align="center">70.2-E12</td><td align="center">4.53e-7j</td></tr></tbody></table></li></ul><p>round(_,x)表示这个数字类型的”__“保留x位数。</p><h2 id="Python-3-字符串"><a href="#Python-3-字符串" class="headerlink" title="Python 3 字符串"></a>Python 3 字符串</h2><p>字符串 (string )是由数字、字母、下划线组成的一串字符</p><p>一般记为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;a1a2···an&quot;</span> (n&gt;=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>字符串通常用于表示文本常见的数据</p><p>python的字串列表有2种取值顺序</p><ol><li>从左到右索引默认0开始的，最大范围是字符串长度少 1</li><li>从右到左索引默认-1开始的，最大范围是字符串开头</li></ol><p>如果要实现从字符串中获取一段子字符串的话，可以使用区间运算符 <strong>[头下标:尾下标]</strong> ，截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;I love study&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>需要注意的是，s[2:6]中2是字符的开始，6是字符的结束，还有就是默认的第一个字符是从0开始的,其中的“：”是用来分割首尾；当定义的字符串中含有空格时，空格也是一个字符，想要输出love就应该如图所写。</p><p>在python中字符串是可以相加的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>]+s[<span class="number">2</span>:<span class="number">6</span>])</span><br></pre></td></tr></table></figure><p>如果是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>意思是输出第三个字符后面所有的字符。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(s*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这个意思是s这个字符串输出两遍。</p><h2 id="Python-列表"><a href="#Python-列表" class="headerlink" title="Python 列表"></a>Python 列表</h2><p>列表 ( list ) 是 Python 中使用最频繁的数据类型</p><p>列表可以完成大多数集合类的数据结构实现</p><p>列表支持字符，数字，字符串甚至可以包含列表 ( 嵌套 )</p><p>列表用 <code>[ ]</code> 标识</p><p>列表中值的切割也可以用到变量 $\textcolor{red}{[头下标:尾下标]}$，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾</p><p>同样列表可以使用加号 ( + ) 运算符连接两个列表 使用星号 (*) 是重复列表元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">30</span> , <span class="number">2022</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])          <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist)    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure><p>需要注意的是输出的时候与字符串是有区别的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">30</span>, <span class="number">2022</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">python学习日记</span><br><span class="line">[<span class="number">30</span>, <span class="number">2022</span>]</span><br><span class="line">[<span class="number">2022</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">30</span>, <span class="number">2022</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br></pre></td></tr></table></figure><p>还有就是在列表中数字和字符是可以在一起的。</p><h2 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python 元组"></a>Python 元组</h2><p>元组是另一个数据类型，类似于列表</p><p>元组用 <code>()</code> 标识，内部元素用逗号隔开</p><p>元组是不可变的，不能二次赋值，相当于只读列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">2022</span> , <span class="number">2.23</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">tuple</span> )              <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">tuple</span>[<span class="number">0</span>]  )          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>] )         <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">tuple</span>[<span class="number">2</span>:] )          <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> ( tinytuple * <span class="number">2</span> )      <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">tuple</span> + tinytuple )  <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure><p>输出的结果也是有元组标识的$\textcolor{red}{()}$ </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">2022</span>, <span class="number">2.23</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">python学习日记</span><br><span class="line">(<span class="number">2022</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;start&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;python学习日记&#x27;</span>, <span class="number">2022</span>, <span class="number">2.23</span>, <span class="string">&#x27;python&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;start&#x27;</span>)</span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注意：}$</p><p>元组是不允许更新的，像下面的表示就是错误的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplo=(<span class="string">&#x27;python学习日记&#x27;</span>，<span class="number">2022</span>)</span><br><span class="line">tuplo[<span class="number">2</span>]=<span class="number">2023</span><span class="comment">#元组中是非法应用</span></span><br></pre></td></tr></table></figure><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set ( 集合 )"></a>set ( 集合 )</h2><p>集合 (set ) 是一个无序不重复元素的序列</p><p>集合 (set ) 的基本作用是进行成员关系测试和删除重复元素</p><p>可以使用大括号 <code>&#123; &#125;</code> 或者 <code>set()</code> 函数创建集合</p><p>但要注意的是，<strong>创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123; &#125;</code> ，因为 <code>&#123; &#125;</code> 是用来创建一个空字典</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st=&#123;<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;study&#x27;</span>,<span class="string">&#x27;PHP&#x27;</span>,<span class="string">&#x27;字典&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(st)</span><br><span class="line"><span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> st</span><br></pre></td></tr></table></figure><p><img src="/.io//QQ%E6%88%AA%E5%9B%BE20220530211755.png" alt="QQ截图20220530211755"></p><p>集合创造以后在输入一定条件后，python会自动判断。</p><p>集合是可以进行逻辑运算的：</p><p><img src="/.io//QQ%E6%88%AA%E5%9B%BE20220530212557.png" alt="QQ截图20220530212557"></p><p>区别一下”列表、元组、集合“的表示：</p><p>列表用”[  ]“;</p><p>元组用”(  )“;</p><p>集合用”{  }“;</p><h2 id="Python-字典"><a href="#Python-字典" class="headerlink" title="Python 字典"></a>Python 字典</h2><p>字典 (dictionary) 是由<strong>键值对</strong>组成的集合，由键 (key) 和它对应的值 value 组成</p><p><strong>列表是有序的对象结合，字典是无序的对象集合</strong></p><p>两者之间的区别在于：<strong>字典当中的元素是通过键来存取的，而不是通过偏移存取</strong></p><p>字典用 <code>&#123; &#125;</code> 标识，可以使用 <code>&#123;&#125;</code> 创建，也可以使用 <code>dict()</code> 函数创建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>=&#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]=<span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]=<span class="string">&quot;This is two&quot;</span></span><br><span class="line"></span><br><span class="line">pythondict=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;guo&#x27;</span>,<span class="string">&#x27;ID&#x27;</span>:<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;year&#x27;</span>:<span class="string">&#x27;2022&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])         <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (pythondict)             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (pythondict.keys())      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (pythondict.values())    <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">This <span class="keyword">is</span> one</span><br><span class="line">This <span class="keyword">is</span> two</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;guo&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>: <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;2022&#x27;</span>&#125;</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;year&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;guo&#x27;</span>, <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;2022&#x27;</span>])</span><br><span class="line"><span class="comment"># &#x27;:&#x27;前面为key后面为values</span></span><br></pre></td></tr></table></figure><h2 id="Python-数据类型转换"><a href="#Python-数据类型转换" class="headerlink" title="Python 数据类型转换"></a>Python 数据类型转换</h2><p>有时候，我们需要将一种类型转换成另一种类型，比如将字符串 ‘3.1415926’ 转换成浮点型</p><p>这种过程，我们称之为 <strong>数据类型转换</strong></p><p>Python 中，将一种类型转换成另一种类型非常简单，<strong>只需要数据类型作为函数名即可</strong>，比如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;3.141596&#x27;</span>)</span><br></pre></td></tr></table></figure><p>就能完成我们刚刚的需求了</p><p>下表列出了 Python 用于数据类型转换的函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将 x 转换为一个整数</td></tr><tr><td>float(x)</td><td>将 x 转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>计算在字符串中的有效 Python 表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value) 元组</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>例如float型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;3.141596&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="built_in">float</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(s)))</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.141596</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="number">3.141596</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>还有一些例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&#x27;123&#x27;</span><span class="comment">#str型</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">s=<span class="number">123</span><span class="comment">#int型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="built_in">int</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(x)))</span><br><span class="line"><span class="built_in">float</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(x)))</span><br><span class="line"><span class="built_in">complex</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">complex</span>(x)))</span><br><span class="line"><span class="built_in">str</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(s)))</span><br><span class="line"><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">repr</span>(s)))</span><br><span class="line"><span class="built_in">tuple</span>(x)<span class="comment">#元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(x)))</span><br><span class="line"><span class="built_in">list</span>(x)<span class="comment">#列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(x)))</span><br><span class="line"><span class="built_in">set</span>(x)<span class="comment">#集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">set</span>(x)))</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line">(<span class="number">123</span>+<span class="number">0j</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;complex&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line">&#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;     <span class="comment">#注意：这里集合是倒过来的</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="二、Python-3-注释"><a href="#二、Python-3-注释" class="headerlink" title="二、Python 3 注释"></a>二、Python 3 注释</h1><p>程序的注释是解释性语句，所有的编程语言都允许某种形式的注释</p><p>因此，注释就是为了增强源代码的可读性</p><p>Python 3 支持单行注释和多行注释</p><p>注释中的所有字符会被 Python 解释器忽略</p><p>Python中单行注释以 <code>#</code> 开头</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, python!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>多行注释用三个单引号 ‘’’ 或者三个双引号 “”” 将注释括起来</p><h3 id="1、单引号（’’’）"><a href="#1、单引号（’’’）" class="headerlink" title="1、单引号（’’’）"></a>1、单引号（’’’）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, python!!!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、双引号（”””）"><a href="#2、双引号（”””）" class="headerlink" title="2、双引号（”””）"></a>2、双引号（”””）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, python!!!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="三、Python-3-运算符"><a href="#三、Python-3-运算符" class="headerlink" title="三、Python 3 运算符"></a>三、Python 3 运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号</p><p>举个简单的例子 <strong>4 + 5 &#x3D; 9</strong></p><p>例子中， <strong>4</strong> 和 <strong>5</strong> 被称为 <strong>操作数</strong> ，” <strong>+</strong> “ 称为运算符</p><p>Python 支持以下几种运算符</p><h2 id="python支持以下几种运算符："><a href="#python支持以下几种运算符：" class="headerlink" title="python支持以下几种运算符："></a>python支持以下几种运算符：</h2><p><a href="#1%E3%80%81python%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6">1.算数运算符</a></p><p><a href="#2%E3%80%81python%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6">2.比较（关系）运算符</a></p><p><a href="#3%E3%80%81python%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">3.赋值运算符</a></p><p><a href="#4%E3%80%81python%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6">4.逻辑运算符</a></p><p><a href="#5%E3%80%81python%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">5.位运算符</a></p><p><a href="#6%E3%80%81python%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6">6.成员运算符</a></p><p><a href="#7%E3%80%81python%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6">7.身份运算符</a></p><p><a href="#8%E3%80%81python%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7">8.运算符的优先级</a></p><h2 id="1、python算数运算符"><a href="#1、python算数运算符" class="headerlink" title="1、python算数运算符"></a>1、python算数运算符</h2><p>下表中，列出了 Python 支持的算术运算符</p><p>我们假定 <strong>a&#x3D;10，b&#x3D;2</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>+</td><td>加 - 两个对象相加</td><td>a + b 输出结果 12</td></tr><tr><td>-</td><td>减 - 得到负数或是一个数减去另一个数</td><td>a - b 输出结果 8</td></tr><tr><td>*</td><td>乘 - 两个数相乘或重复若干次字符串</td><td>a * b 输出结果 20</td></tr><tr><td>&#x2F;</td><td>除 - x除以y</td><td>b &#x2F; a 输出结果 5.0</td></tr><tr><td>%</td><td>取模 - 返回除法的余数</td><td>b % a 输出结果 0</td></tr><tr><td>**</td><td>幂 - 返回x的y次幂</td><td>a**b 为 10 的 2 次方 输出结果 100</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整除 - 返回商的整数部分</td><td>9&#x2F;&#x2F;2 输出结果 4 9.0&#x2F;&#x2F;2.0 输出 4.0</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c = a - b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a * b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a / b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a % b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 、b 、c</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = a**b </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">c = a//b </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;7 - c 的值为：&quot;</span>, c)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">8</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">20</span></span><br><span class="line"><span class="number">4</span> - c 的值为： <span class="number">5.0</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">0</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">8</span></span><br><span class="line"><span class="number">7</span> - c 的值为： <span class="number">2</span></span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="2、python比较运算符"><a href="#2、python比较运算符" class="headerlink" title="2、python比较运算符"></a>2、python比较运算符</h2><p>所有比较运算符返回 1 表示真，返回 0 表示假</p><p>这分别与特殊的变量 True 和 False 等价。注意首字母为大写</p><p>下表列出了 Python 支持的比较运算符</p><p>我们假定 <strong>a&#x3D;10，b&#x3D;2</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于 - 比较对象是否相等</td><td>(a &#x3D;&#x3D; b) 返回 False</td></tr><tr><td>!&#x3D;</td><td>不等于 - 比较两个对象是否不相等</td><td>(a !&#x3D; b) 返回 true.</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等</td><td>(a &lt;&gt; b) 返回 true。类似 !&#x3D;</td></tr><tr><td>&gt;</td><td>大于 - 返回 x 是否大于y</td><td>(a &gt; b) 返回 True</td></tr><tr><td>&lt;</td><td>小于 - 返回 x 是否小于y</td><td>(a &lt; b) 返回 False</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于 - 返回 x 是否大于等于 y</td><td>(a &gt;&#x3D; b) 返回 True</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于 - 返回 x 是否小于等于 y</td><td>(a &lt;&#x3D; b) 返回 False</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a == b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - a 等于 b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - a 不等于 b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a != b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - a 不等于 b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - a 等于 b&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &lt; b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;4 - a 小于 b&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;4 - a 大于等于 b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;5 - a 大于 b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;5 - a 小于等于 b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 和 b 的值</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> ( a &lt;= b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;6 - a 小于等于 b&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;6 - a 大于  b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b &gt;= a ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;7 - b 大于等于 a&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;7 - b 小于 a&quot;</span>)</span><br><span class="line"><span class="comment">#运算结果</span></span><br><span class="line"><span class="number">1</span> - a 不等于 b</span><br><span class="line"><span class="number">2</span> - a 不等于 b</span><br><span class="line"><span class="number">4</span> - a 大于等于 b</span><br><span class="line"><span class="number">5</span> - a 大于 b</span><br><span class="line"><span class="number">6</span> - a 小于等于 b</span><br><span class="line"><span class="number">7</span> - b 大于等于 a</span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="3、python赋值运算符"><a href="#3、python赋值运算符" class="headerlink" title="3、python赋值运算符"></a>3、python赋值运算符</h2><p>下表列出了 Python 支持的赋值运算符</p><p>我们假定 a&#x3D; 10 , b &#x3D; 2</p><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c <strong>&#x3D; a 等效于 c &#x3D; c</strong> a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">c += a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c *= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c /= a </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">c %= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c **= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c //= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;7 - c 的值为：&quot;</span>, c )<span class="comment">#这里要注意这里的’//‘意思是除完一次以后取整</span></span><br><span class="line"><span class="comment">#需要注意的是 c 每进行一次赋值运算，其值也会进行改变</span></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">22</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">220</span></span><br><span class="line"><span class="number">4</span> - c 的值为： <span class="number">22.0</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">2</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">1024</span></span><br><span class="line"><span class="number">7</span> - c 的值为： <span class="number">102</span></span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="4、python逻辑运算符"><a href="#4、python逻辑运算符" class="headerlink" title="4、python逻辑运算符"></a>4、python逻辑运算符</h2><p>下表列出了 Python 语言支持逻辑运算符</p><p>我们假定 a &#x3D; 10, b &#x3D; 2</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则返回 y 的计算值</td><td>(a and b) 返回 2</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是非 0，返回 x 的值，否则返回 y 的计算值</td><td>(a or b) 返回 10</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，返回 True</td><td>not(a and b) 返回 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - 变量 a 和 b 都为 true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - 变量 a 和 b 有一个不为 true&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - 变量 a 和 b 都不为 true&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - 变量 a 和 b 都为 true&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - 变量 a 和 b 有一个不为 true&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;4 - 变量 a 和 b 都不为 true&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>( a <span class="keyword">and</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;5 - 变量 a 和 b 都为 true&quot;</span> )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> - 变量 a 和 b 都为 true</span><br><span class="line"><span class="number">2</span> - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line"><span class="number">3</span> - 变量 a 和 b 有一个不为 true</span><br><span class="line"><span class="number">4</span> - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="line"><span class="number">5</span> - 变量 a 和 b 都为 false，或其中一个变量为 false</span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="5、python位运算符"><a href="#5、python位运算符" class="headerlink" title="5、python位运算符"></a>5、python位运算符</h2><p>位运算符是把数字看作二进制来进行计算的</p><p>Python 中的位运算法则如下</p><p>下表中变量 a 为 60，b 为 13，二进制格式如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a   = 0011 <span class="number">1100</span></span><br><span class="line">b   = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = 0011 <span class="number">1101</span></span><br><span class="line">a^b = 0011 0001</span><br><span class="line">~a  = <span class="number">1100</span> 0011</span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符 参与运算的两个值,如果两个相应位都为 1 则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 二进制 0000 1100</td></tr><tr><td>|</td><td>按位或运算符 只要对应的两个二进位有一个为1时，结果位就为1。</td><td>(a | b) 输出结果 61 二进制 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符 当两对应的二进位相异时，结果为1</td><td>(a ^ b) 输出结果 49 二进制 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符 对数据的每个二进制位取反 即把 1 变为0,把0变为1 ~x 类似于 -x-1</td><td>(~a ) 输出结果 -61 二进制 1100 0011 一个有符号二进制数的补码形式</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符 运算数的各二进位全部左移若干位 由 “&lt;&lt;”右边的数指定移动的位数 高位丢弃，低位补0。</td><td>a &lt;&lt; 2 输出结果 240 二进制 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符 把”&gt;&gt;”左边的运算数的各二进位全部右移若干位 “&gt;&gt;”右边的数指定移动的位数</td><td>a &gt;&gt; 2 输出结果 15 二进制 0000 1111</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100 </span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101 </span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a &amp; b;        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;1 - c 的值为：&quot;</span>, c ) </span><br><span class="line"></span><br><span class="line">c = a | b;        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;2 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a ^ b;        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;3 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = ~a;           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;4 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;5 - c 的值为：&quot;</span>, c )</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;6 - c 的值为：&quot;</span>, c )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">1</span> - c 的值为： <span class="number">12</span></span><br><span class="line"><span class="number">2</span> - c 的值为： <span class="number">61</span></span><br><span class="line"><span class="number">3</span> - c 的值为： <span class="number">49</span></span><br><span class="line"><span class="number">4</span> - c 的值为： -<span class="number">61</span></span><br><span class="line"><span class="number">5</span> - c 的值为： <span class="number">240</span></span><br><span class="line"><span class="number">6</span> - c 的值为： <span class="number">15</span></span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="6、python成员运算符"><a href="#6、python成员运算符" class="headerlink" title="6、python成员运算符"></a>6、python成员运算符</h2><p>Python 还支持成员运算符</p><p>范例中包含了一系列的成员，包括字符串，列表或元组</p><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td>如果 x 在 y 序列中返回 True</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td>如果 x 不在 y 序列中返回 True</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span> ) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span> )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">1</span> - 变量 a 不在给定的列表中 <span class="built_in">list</span> 中</span><br><span class="line"><span class="number">2</span> - 变量 b 不在给定的列表中 <span class="built_in">list</span> 中</span><br><span class="line"><span class="number">3</span> - 变量 a 在给定的列表中 <span class="built_in">list</span> 中</span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="7、python身份运算符"><a href="#7、python身份运算符" class="headerlink" title="7、python身份运算符"></a>7、python身份运算符</h2><p>Python 中的身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th>运算符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td>x is y, 类似id(x) &#x3D;&#x3D; id(y), 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td>x is not y， 类似id(a) !&#x3D; id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False</td></tr></tbody></table><blockquote><p><strong>注：</strong> <a href="https://www.twle.cn/l/yufei/python30/python-30-func-id.html">id()</a> 函数用于获取对象内存地址</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;1 - a 和 b 有相同的标识&quot;</span> ) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;1 - a 和 b 没有相同的标识&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;2 - a 和 b 没有相同的标识&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;2 - a 和 b 有相同的标识&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - a 和 b 没有相同的标识&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;3 - a 和 b 有相同的标识&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改变量 b 的值</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;4 - a 和 b 有相同的标识&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;4 - a 和 b 没有相同的标识&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;5 - a 和 b 没有相同的标识&quot;</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> ( <span class="string">&quot;5 - a 和 b 有相同的标识&quot;</span> )</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> - a 和 b 有相同的标识</span><br><span class="line"><span class="number">2</span> - a 和 b 没有相同的标识</span><br><span class="line"><span class="number">3</span> - a 和 b 有相同的标识</span><br><span class="line"><span class="number">4</span> - a 和 b 没有相同的标识</span><br><span class="line"><span class="number">5</span> - a 和 b 没有相同的标识</span><br></pre></td></tr></table></figure><p>简单理解一下”成员运算符“与”身份运算符“的区别：</p><p>表面意思”成员运算符“是用来判断某个元素或集合是是否在这个集合或列表等中；”身份运算符“则是判断两个元素或集合是否相等或内存地址是否相同。</p><p><strong>is与&#x3D;&#x3D;的区别</strong></p><p>is 用于判断两个变量引用对象是否为同一个</p><p>&#x3D;&#x3D; 用于判断引用变量的值是否相等</p><p>例：<br><img src="/.io//QQ%E6%88%AA%E5%9B%BE20220531114742.png" alt="QQ截图20220531114742"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line"><span class="keyword">if</span>(b <span class="keyword">is</span> a):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(b==a):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">b=a[:]</span><br><span class="line"><span class="keyword">if</span>(b <span class="keyword">is</span> a):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(b==a):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">no</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="8、python运算符的优先级"><a href="#8、python运算符的优先级" class="headerlink" title="8、python运算符的优先级"></a>8、python运算符的优先级</h2><p>下表列出了从最高到最低优先级的所有运算符</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td>比较运算符</td></tr><tr><td>&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td>等于运算符</td></tr><tr><td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; <em>&#x3D;</em> *&#x3D;</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><p>例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">15</span></span><br><span class="line">d = <span class="number">5</span></span><br><span class="line">e = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">e = (a + b) * c / d       <span class="comment">#( 30 * 15 ) / 5</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;(a + b) * c / d 运算结果为：&quot;</span>,  e ) </span><br><span class="line"></span><br><span class="line">e = ((a + b) * c) / d     <span class="comment"># (30 * 15 ) / 5</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;((a + b) * c) / d 运算结果为：&quot;</span>,  e )</span><br><span class="line"></span><br><span class="line">e = (a + b) * (c / d);    <span class="comment"># (30) * (15/5)</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;(a + b) * (c / d) 运算结果为：&quot;</span>,  e )</span><br><span class="line"></span><br><span class="line">e = a + (b * c) / d;      <span class="comment">#  20 + (150/5)</span></span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;a + (b * c) / d 运算结果为：&quot;</span>,  e </span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">       </span><br><span class="line">(a + b) * c / d 运算结果为： <span class="number">90.0</span></span><br><span class="line">((a + b) * c) / d 运算结果为： <span class="number">90.0</span></span><br><span class="line">(a + b) * (c / d) 运算结果为： <span class="number">90.0</span></span><br><span class="line">a + (b * c) / d 运算结果为： <span class="number">50.0</span></span><br></pre></td></tr></table></figure><p><a href="#python%E6%94%AF%E6%8C%81%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%E8%BF%90%E7%AE%97%E7%AC%A6"><strong>return</strong></a></p><h2 id="四、Python数学函数"><a href="#四、Python数学函数" class="headerlink" title="四、Python数学函数"></a>四、Python数学函数</h2><p><strong>导入模块</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>下表列出了 Python <strong>math</strong> 模块提供的数学函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">abs(x)</a></td><td>返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">ceil(x)</a></td><td>返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">operator.lt(x,y)</a></td><td>如果 x &lt; y 返回 -1, 如果 x &#x3D;&#x3D; y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">exp(x)</a></td><td>返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">fabs(x)</a></td><td>返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">floor(x)</a></td><td>返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">log(x)</a></td><td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">log10(x)</a></td><td>返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">max(x1, x2,…)</a></td><td>返回给定参数的最大值，参数可以为序列</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">min(x1, x2,…)</a></td><td>返回给定参数的最小值，参数可以为序列</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">modf(x)</a></td><td>返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">pow(x, y)</a></td><td>xy 运算后的值</td></tr><tr><td>[<a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">round(x [,n])]</a></td><td>返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数</td></tr><tr><td><a href="./python%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0.md">sqrt(x)</a></td><td>返回数字x的平方根</td></tr></tbody></table><h2 id="五、Python-随机数函数"><a href="#五、Python-随机数函数" class="headerlink" title="五、Python 随机数函数"></a>五、Python 随机数函数</h2><p>Python <strong>random</strong> 模块提供了许多的随机数生成函数</p><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性</p><p><strong>导入模块</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><p>下表列出了 <strong>random</strong> 模块提供的随机数函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">random.choice(seq)</a></td><td>从序列的元素中随机挑选一个元素，比如 choice(range(10))，从0到9中随机挑选一个整数</td></tr><tr><td>[random.randrange (<a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">start,] stop [,step])</a></td><td>从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td></tr><tr><td><a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">random.random()</a></td><td>随机生成下一个实数，它在[0,1)范围内</td></tr><tr><td><a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">random.seed([x])</a></td><td>改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择 seed</td></tr><tr><td><a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">random.shuffle(lst)</a></td><td>将序列的所有元素随机排序</td></tr><tr><td><a href="./python%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0">random.uniform(x, y)</a></td><td>随机生成下一个实数，它在[x,y]范围内</td></tr></tbody></table><h2 id="六、Python-math-模块中的三角函数"><a href="#六、Python-math-模块中的三角函数" class="headerlink" title="六、Python math 模块中的三角函数"></a>六、Python <strong>math</strong> 模块中的三角函数</h2><p><strong>导入模块</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>下表列出了 <strong>math</strong> 模块提供的三角函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>[math.acos(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回x的反余弦弧度值</td></tr><tr><td>[math.asin(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回x的反正弦弧度值</td></tr><tr><td>[math.atan(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回x的反正切弧度值</td></tr><tr><td>[math.atan2(y, x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回给定的 X 及 Y 坐标值的反正切值</td></tr><tr><td>[math.cos(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回x的弧度的余弦值</td></tr><tr><td>[math.hypot(x, y)](.&#x2F;Python math 模块中的三角函数)</td><td>返回欧几里德范数 sqrt(x<em>x + y</em>y)</td></tr><tr><td>[math.sin(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回的x弧度的正弦值</td></tr><tr><td>[math.tan(x)](.&#x2F;Python math 模块中的三角函数)</td><td>返回x弧度的正切值</td></tr><tr><td>[math.degrees(x)](.&#x2F;Python math 模块中的三角函数)</td><td>将弧度转换为角度,如 degrees (math.pi&#x2F;2) ， 返回 90.0</td></tr><tr><td>[math.radians(x)](.&#x2F;Python math 模块中的三角函数)</td><td>将角度转换为弧度</td></tr></tbody></table><h2 id="七、Python-math-模块常量"><a href="#七、Python-math-模块常量" class="headerlink" title="七、Python math 模块常量"></a>七、Python <strong>math</strong> 模块常量</h2><p><strong>导入模块</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>math.pi</td><td>数学常量 pi ( 圆周率，一般以 π 来表示 )</td></tr><tr><td>math.e</td><td>数学常量 e，e 即自然常数（自然常数）</td></tr></tbody></table><h1 id="八、Python-3-字符串"><a href="#八、Python-3-字符串" class="headerlink" title="八、Python 3 字符串"></a>八、Python 3 字符串</h1><p>字符串是 Python 中最常用的数据类型</p><p>Python 中可以有 4 中创建字符串的方法</p><ol><li><p>使用单引号引起来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&#x27;Hello \n World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (s1)</span><br><span class="line">Hello </span><br><span class="line"> World</span><br></pre></td></tr></table></figure></li><li><p>使用双引号引起来的字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&quot;Hello \n World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (s1)</span><br><span class="line">Hello </span><br><span class="line"> World</span><br></pre></td></tr></table></figure></li><li><p>使用三个单引号引起来的字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&#x27;&#x27;&#x27;Hello</span></span><br><span class="line"><span class="string">World</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Nice to see you</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (s1)</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line"></span><br><span class="line">Nice to see you</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用三个单引号引起来的字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&quot;&quot;&quot;Hello</span></span><br><span class="line"><span class="string">World</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Nice to see you</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (s1)</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line"></span><br><span class="line">Nice to see you</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><p>是不是很简单，创建字符串变量也是跟创建其它的变量一样</p><h2 id="1、Python-访问字符串中的值"><a href="#1、Python-访问字符串中的值" class="headerlink" title="1、Python 访问字符串中的值"></a>1、Python 访问字符串中的值</h2><p>Python 可以使用下标索引访问字符串中单个字符</p><p>下标索引是一种特殊的访问方法，在变量后跟一对中括号，中括号里填入整形数字就能访问对应的元素</p><p>索引从 0 开始，第一个元素是 0 ，第二个元素是 1 … 以此类推</p><p>最后一个元素是 -1 ，倒数第二个元素是 -2 … 以此类推</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&#x27;Hello Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;o&#x27;</span></span><br></pre></td></tr></table></figure><p>我们还可以使用下标索引来截取一段字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&#x27;Hello Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ell&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;ello Pytho&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2、Python-字符串更新"><a href="#2、Python-字符串更新" class="headerlink" title="2、Python 字符串更新"></a>2、Python 字符串更新</h2><p>字符串本身是不能更改的，但可以使用下标索引将字符串中的一部分赋值给另一个字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">&#x27;Hello Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">3</span>] = <span class="string">&#x27;w&#x27;</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#205&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s1[<span class="number">3</span>] = <span class="string">&#x27;w&#x27;</span></span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = s1[<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2</span><br><span class="line"><span class="string">&#x27;ello &#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Python-转义字符"><a href="#Python-转义字符" class="headerlink" title="Python 转义字符"></a>Python 转义字符</h2><p>如果要在字符串中使用下表列出的特殊字符，就要使用 反斜杠( \ ) 转义字符</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\ (在行尾时)</td><td>续行符</td></tr><tr><td>\</td><td>反斜杠符号</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table><h2 id="3、Python-字符串运算符"><a href="#3、Python-字符串运算符" class="headerlink" title="3、Python 字符串运算符"></a>3、Python 字符串运算符</h2><p>下表列出了 Python 支持的字符串操作符</p><p>我们假定 a&#x3D; “Hello”，b &#x3D; “Python”</p><table><thead><tr><th>操作符</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>+</td><td>字符串连接</td><td>&gt;&gt;&gt;a+b ‘HelloPython’</td></tr><tr><td>*</td><td>重复输出字符串</td><td>&gt;&gt;&gt;a*2 ‘HelloHello’</td></tr><tr><td>[]</td><td>通过索引获取字符串中字符</td><td>&gt;&gt;&gt;a[1] ‘e’</td></tr><tr><td>[ : ]</td><td>截取字符串中的一部分</td><td>&gt;&gt;&gt;a[1:4] ‘ell’</td></tr><tr><td>in</td><td>成员运算符 如果字符串中包含给定的字符返回 True</td><td>&gt;&gt;&gt;”H” in a True</td></tr><tr><td>not in</td><td>成员运算符 如果字符串中不包含给定的字符返回 True</td><td>&gt;&gt;&gt;”M” not in a True</td></tr><tr><td>r&#x2F;R</td><td>原始字符串 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符  原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法</td><td>&gt;&gt;&gt;print (r’\n’) \n &gt;&gt;&gt;print R’\n’ \n</td></tr><tr><td>%</td><td>格式字符串</td><td>情况后面介绍</td></tr></tbody></table><p>下面的代码演示了这些运算符的使用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line"><span class="string">&#x27;HelloPython&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a * <span class="number">2</span></span><br><span class="line"><span class="string">&#x27;HelloHello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ell&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;H&#x27;</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;M&#x27;</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">r&#x27;\n&#x27;</span>)</span><br><span class="line">\n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">R&#x27;\n&#x27;</span>)</span><br><span class="line">\n</span><br></pre></td></tr></table></figure><h1 id="九、Python-字符串格式化"><a href="#九、Python-字符串格式化" class="headerlink" title="九、Python 字符串格式化"></a>九、Python 字符串格式化</h1><p>Python 支持格式化字符串的输出</p><p>尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 <code>%s</code> 的字符串中</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello %s&#x27;</span> %(<span class="string">&#x27;world&#x27;</span>))</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="1、格式化符"><a href="#1、格式化符" class="headerlink" title="1、格式化符"></a>1、格式化符</h3><p>下表列出了 Python 支持的字符串格式化符号</p><table><thead><tr><th>格式化符</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其 ASCII 码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整型</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr><tr><td>%e</td><td>用科学计数法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e，用科学计数法格式化浮点数</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f 和 %E 的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h3 id="2、格式化操作符辅助指令"><a href="#2、格式化操作符辅助指令" class="headerlink" title="2、格式化操作符辅助指令"></a>2、格式化操作符辅助指令</h3><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>定义宽度或者小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在正数前面显示加号 ( + )</td></tr><tr><td></td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制数前面显示零 (‘0’) 在十六进制前面显示 ‘0x’ 或者 ‘0X’ ( 取决于用的是 ‘x’ 还是’X’)</td></tr><tr><td>0</td><td>显示的数字前面填充 ‘0’ 而不是默认的空格</td></tr><tr><td>%</td><td>‘%%’ 输出一个单一的 ‘%’</td></tr><tr><td>( var )</td><td>映射变量(字典参数)</td></tr><tr><td>m.n.</td><td>m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h2 id="3、str-format-格式化字符串"><a href="#3、str-format-格式化字符串" class="headerlink" title="3、str.format() 格式化字符串"></a>3、str.format() 格式化字符串</h2><p>Python 还内置了 <a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-format.html"><strong>format</strong></a> 用于格式化字符串，具体说明你可以直接点击链接查看</p><h2 id="4、Python-三引号-triple-quotes"><a href="#4、Python-三引号-triple-quotes" class="headerlink" title="4、Python 三引号 ( triple quotes )"></a>4、Python 三引号 ( triple quotes )</h2><p>在本章的开始我们已经介绍过了 Python 可以使用三个引号来创建字符串</p><p>python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其它的特殊字符</p><p>三引号的语法是一对连续的单引号或者双引号，通常都是成对的用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;&#x27;&#x27;Hello</span></span><br><span class="line"><span class="string">World&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s            <span class="comment"># repr()</span></span><br><span class="line"><span class="string">&#x27;Hello\nWorld&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (s)      <span class="comment"># str()</span></span><br><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure><p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的 WYSIWYG ( 所见即所得 ) 格式的</p><p>一个典型的场景是，当需要一大块 <a href="https://www.twle.cn/l/yufei/html/html-basic-index.html">HTML</a> 或者 <a href="https://www.twle.cn/l/yufei/sql/sql-basic-index.html">SQL</a> 时，这时用字符串组合，特殊字符串转义将会非常的繁琐</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">errHTML = <span class="string">&#x27;&#x27;&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;Friends CGI Demo&lt;/title&gt;&lt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;ERROR&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;b&gt;%s&lt;/b&gt;</span></span><br><span class="line"><span class="string">&lt;form&gt;&lt;input type=&quot;button&quot; value=&quot;Back&quot; </span></span><br><span class="line"><span class="string">onclick=&quot;window.history.back()&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">CREATE TABLE users (  </span></span><br><span class="line"><span class="string">login VARCHAR(8), </span></span><br><span class="line"><span class="string">uid INTEGER,</span></span><br><span class="line"><span class="string">prid INTEGER)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5、Unicode-字符串"><a href="#5、Unicode-字符串" class="headerlink" title="5、Unicode 字符串"></a>5、Unicode 字符串</h2><p>Python 3 中，所有的字符串都是 Unicode 字符串</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u&#x27;你好&#x27;</span></span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">u&#x27;你好&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="6、Python-字符串内建函数"><a href="#6、Python-字符串内建函数" class="headerlink" title="6、Python 字符串内建函数"></a>6、Python 字符串内建函数</h2><p>下表列出了 Python 内建的字符串方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-capitalize.html">string.capitalize()</a></td><td>把字符串的第一个字符大写</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-center.html">string.center(width)</a></td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-count.html">string.count(str, beg&#x3D;0, end&#x3D;len(string))</a></td><td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-decode.html">string.decode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td>以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除 非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-encode.html">string.encode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td>以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-endswith.html">string.endswith(obj, beg&#x3D;0, end&#x3D;len(string))</a></td><td>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-expandtabs.html">string.expandtabs(tabsize&#x3D;8)</a></td><td>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-find.html">string.find(str, beg&#x3D;0, end&#x3D;len(string))</a></td><td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-format.html">string.format()</a></td><td>格式化字符串</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-index.html">string.index(str, beg&#x3D;0, end&#x3D;len(string))</a></td><td>跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isalnum.html">string.isalnum()</a></td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isalpha.html">string.isalpha()</a></td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isdecimal.html">string.isdecimal()</a></td><td>如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isdigit.html">string.isdigit()</a></td><td>如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-islower.html">string.islower()</a></td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isnumeric.html">string.isnumeric()</a></td><td>如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isspace.html">string.isspace()</a></td><td>如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-istitle.html">string.istitle()</a></td><td>如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isupper.html">string.isupper()</a></td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-join.html">string.join(seq)</a></td><td>以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-ljust.html">string.ljust(width)</a></td><td>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-lower.html">string.lower()</a></td><td>转换 string 中所有大写字符为小写.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-lstrip.html">string.lstrip()</a></td><td>截掉 string 左边的空格</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-maketrans.html">string.maketrans(frm, to)</a></td><td>maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-max.html">max(str)</a></td><td>返回字符串str中最大的字母</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-min.html">min(str)</a></td><td>返回字符串str中最小的字母</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-partition.html">string.partition(str)</a></td><td>有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str &#x3D;&#x3D; string.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-replace.html">string.replace(str1, str2, num&#x3D;string.count(str1))</a></td><td>把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-rfind.html">string.rfind(str, beg&#x3D;0,end&#x3D;len(string) )</a></td><td>类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-rindex.html">string.rindex( str, beg&#x3D;0,end&#x3D;len(string))</a></td><td>类似于 index()，不过是从右边开始.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-rjust.html">string.rjust(width)</a></td><td>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition()函数,不过是从右边开始查找.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-rstrip.html">string.rstrip()</a></td><td>删除 string 字符串末尾的空格.</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-split.html">string.split(str&#x3D;””, num&#x3D;string.count(str))</a></td><td>以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串</td></tr><tr><td>[string.splitlines(<a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-splitlines.html">keepends])</a></td><td>按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-startswith.html">string.startswith(obj, beg&#x3D;0,end&#x3D;len(string))</a></td><td>检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td>[string.strip(<a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-strip.html">obj])</a></td><td>在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-swapcase.html">string.swapcase()</a></td><td>翻转 string 中的大小写</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-title.html">string.title()</a></td><td>返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-translate.html">string.translate(str, del&#x3D;””)</a></td><td>根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-upper.html">string.upper()</a></td><td>转换 string 中的小写字母为大写</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-zfill.html">string.zfill(width)</a></td><td>返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/python30/python-30-att-string-isdecimal.html">string.isdecimal()</a></td><td>isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于 unicode 对象</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三元组顺序表</title>
      <link href="/posts/5eaf58d0/"/>
      <url>/posts/5eaf58d0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.10.11</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="comment">//定义三元组类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">triple</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> i,j;<span class="comment">//行列下标</span></span><br><span class="line"><span class="type">int</span> e;<span class="comment">//非零元的值</span></span><br><span class="line">&#125;triple;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义三元组顺序表的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TS</span>&#123;</span></span><br><span class="line">triple data[N+<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> mu,nu,tu;<span class="comment">//行数,列数,非零元个数</span></span><br><span class="line">&#125;TS;</span><br><span class="line"></span><br><span class="line">TS M,T;<span class="comment">//定义一个三元组顺序表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三元组表的建立</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> r,c,x;M.tu=<span class="number">0</span>;<span class="comment">//行 列 值 下表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入稀疏矩阵的行数和列数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;M.mu,&amp;M.nu);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入值:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">1</span>;r&lt;=M.mu;r++)</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=M.nu;c++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">M.tu++;</span><br><span class="line">M.data[M.tu].i=r;</span><br><span class="line">M.data[M.tu].j=c;</span><br><span class="line">M.data[M.tu].e=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//转置三元组表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fasttrans</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> num[N],cpot[N],col,p,q;</span><br><span class="line">T.nu=M.mu;</span><br><span class="line">T.mu=M.nu;</span><br><span class="line">T.tu=M.tu;</span><br><span class="line"><span class="keyword">if</span>(T.tu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(col=<span class="number">1</span>;col&lt;=M.nu;col++)</span><br><span class="line">num[col]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">1</span>;p&lt;=M.tu;p++)</span><br><span class="line">&#123;</span><br><span class="line">col=M.data[p].j;</span><br><span class="line">num[col]++;</span><br><span class="line">&#125;</span><br><span class="line">cpot[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(col=<span class="number">2</span>;col&lt;=M.nu;col++)</span><br><span class="line">cpot[col]=cpot[col<span class="number">-1</span>]+num[col<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">1</span>;p&lt;=M.tu;p++)</span><br><span class="line">&#123;</span><br><span class="line">col=M.data[p].j;</span><br><span class="line">q=cpot[col];</span><br><span class="line">T.data[q].i=M.data[p].j;</span><br><span class="line">T.data[q].j=M.data[p].i;</span><br><span class="line">T.data[q].e=M.data[p].e;</span><br><span class="line">cpot[col]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(TS A)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">1</span>;p&lt;=A.tu;p++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d%3d%3d\n&quot;</span>,A.data[p].i,A.data[p].j,A.data[p].e );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">creat();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出转置前的:\n&quot;</span>);</span><br><span class="line">output(M);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出转置后的:\n&quot;</span>);</span><br><span class="line">fasttrans();</span><br><span class="line">output(T);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/posts/e8eb0481/"/>
      <url>/posts/e8eb0481/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.12.2二分查找</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> *elem;         </span><br><span class="line"><span class="type">int</span> length;        </span><br><span class="line"><span class="type">int</span> listsize;      </span><br><span class="line">&#125;sql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sql L;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">L.elem=(<span class="type">int</span> *)<span class="built_in">malloc</span>(N*<span class="keyword">sizeof</span>(<span class="type">int</span>));  </span><br><span class="line"><span class="keyword">if</span>(!L.elem)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">L.listsize=N;                         </span><br><span class="line">L.length=<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入值:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;L.elem[i]);</span><br><span class="line">L.length=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L.length;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L.elem[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">binsearch</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> low,high,mid;</span><br><span class="line">low=<span class="number">1</span>;</span><br><span class="line">high=L.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low&lt;=high)</span><br><span class="line">&#123;</span><br><span class="line">x++;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (key&lt;L.elem[mid])</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key==L.elem[mid])</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,key;</span><br><span class="line">InitList();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">input(n);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的值:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;key);</span><br><span class="line"><span class="keyword">if</span> (binsearch(key)!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找成功,在:%d的位置&quot;</span>,binsearch(key));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找失败!&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/e85d694a/"/>
      <url>/posts/e85d694a/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义二叉链表节点的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">bitnode</span> &#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bitnode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line">&#125;bitnode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先建立二叉链表</span></span><br><span class="line">bitnode* <span class="title function_">creat</span><span class="params">()</span> &#123;</span><br><span class="line">bitnode* T;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">T = (bitnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bitnode));</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">T-&gt;data = ch;<span class="comment">//按照根左右的顺序建立</span></span><br><span class="line">T-&gt;lchild = creat();</span><br><span class="line">T-&gt;rchild = creat();</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preorder</span><span class="params">(bitnode* T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;data);    <span class="comment">//访问根</span></span><br><span class="line">preorder(T-&gt;lchild);</span><br><span class="line">preorder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inorder</span><span class="params">(bitnode* T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">inorder(T-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;data);</span><br><span class="line">inorder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postorder</span><span class="params">(bitnode* T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line">inorder(T-&gt;lchild);</span><br><span class="line">inorder(T-&gt;rchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子叶个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">leafsum</span><span class="params">(bitnode* T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!T)<span class="comment">//如果没有元素则没有叶子节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;rchild &amp;&amp; !T-&gt;lchild)<span class="comment">//如果都没有左孩子和右孩子返回1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> leafsum(T-&gt;lchild) + leafsum(T-&gt;rchild);<span class="comment">//若其他情况继续递归执行函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序求结点个数</span></span><br><span class="line"><span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">count</span><span class="params">(bitnode *T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">count(T-&gt;lchild);</span><br><span class="line">count(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序求二叉树的深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">depth</span><span class="params">(bitnode *T)</span>&#123;</span><br><span class="line"><span class="type">int</span> h,l,r;</span><br><span class="line"><span class="keyword">if</span>(!T)</span><br><span class="line">h=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l=depth(T-&gt;lchild);</span><br><span class="line">r=depth(T-&gt;rchild);</span><br><span class="line">h=(l&gt;r?l:r)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">bitnode* root;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入二叉树:&quot;</span>);</span><br><span class="line">root = creat();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;先序建立结果:&quot;</span>);</span><br><span class="line">preorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n先序建立结果:&quot;</span>);</span><br><span class="line">inorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n先序建立结果:&quot;</span>);</span><br><span class="line">postorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n叶子结点的总数:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, leafsum(root));</span><br><span class="line">count(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n结点的个数为:%d&quot;</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n树的深度为:%d&quot;</span>,depth(root));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业1</title>
      <link href="/posts/90018cad/"/>
      <url>/posts/90018cad/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.6数据结构作业</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> *elem;        <span class="comment">//基地址</span></span><br><span class="line"><span class="type">int</span> length;  <span class="comment">//表长</span></span><br><span class="line"><span class="type">int</span> listsize;  <span class="comment">//存储空间大小</span></span><br><span class="line">&#125;sql;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量(顺序表)</span></span><br><span class="line">sql L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">L.elem=(<span class="type">int</span> *)<span class="built_in">malloc</span>(N*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//申请存储空间</span></span><br><span class="line"><span class="keyword">if</span>(!L.elem)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//判断是否申请成功</span></span><br><span class="line">L.listsize=N;<span class="comment">//空间大小</span></span><br><span class="line">L.length=<span class="number">0</span>;<span class="comment">//空间长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;L.elem[i]);</span><br><span class="line">L.length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L.elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListEmpty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L.length==<span class="number">0</span>)<span class="comment">//如果为空返回1,不为空返回0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回空间长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> L.length;<span class="comment">//返回表长</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetList</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length<span class="number">-1</span>)<span class="comment">//找到返回e,找不到退出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到该元素&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">e=L.elem[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,i;</span><br><span class="line">InitList();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入n的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组的值:&quot;</span>);</span><br><span class="line">input(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出值:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(ListEmpty()==<span class="number">1</span>)<span class="comment">//输出结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该表为空\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该表不为空,返回&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ListEmpty());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该表的长度为:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ListLength());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入要找的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到该元素,值为:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,GetList(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业2</title>
      <link href="/posts/908dd17/"/>
      <url>/posts/908dd17/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.16作业,链式表取元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//代表数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link</span> *<span class="title">next</span>;</span><span class="comment">//代表指针域,指向后继元素</span></span><br><span class="line">&#125;link;<span class="comment">//link为节点名,每个节点都是一个link结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义头指针</span></span><br><span class="line">link *L;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Initlink</span><span class="params">()</span>&#123;</span><br><span class="line">L=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建首元节点</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//创建头指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建单链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creatlink</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">Initlink();</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;data);</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历(输出访问)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getlink</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;data!=i&amp;&amp;p)</span><br><span class="line">&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按序号查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Getlink</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=L;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;i&amp;&amp;p)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j&gt;i||!p||i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找的值不存在&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n,i,j;</span><br><span class="line">Initlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">creatlink(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出结果:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n输入要找的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回查找的值:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,getlink(i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n输入要找的值的序号:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回查找的值:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Getlink(j));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向链表</title>
      <link href="/posts/37fd9ed5/"/>
      <url>/posts/37fd9ed5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.16双向链表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dlink</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//代表数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dlink</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span><span class="comment">//prior代表前驱,next代表后继</span></span><br><span class="line">&#125;dlink;<span class="comment">//双链表节点名</span></span><br><span class="line"></span><br><span class="line">dlink *L;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initlink</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">L=(dlink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dlink));</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">L-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建双向链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creatlink</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">dlink *p;</span><br><span class="line">initlink();</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p=(dlink*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dlink));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;data);</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">p-&gt;prior=L;</span><br><span class="line">L-&gt;next-&gt;prior=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历(输出访问)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">dlink *p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertlink</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">dlink *p,*s;</span><br><span class="line">p=L;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;i<span class="number">-1</span>&amp;&amp;p)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;i<span class="number">-1</span>||!p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入位置不存在:\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s=(dlink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dlink));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">s-&gt;prior=p;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">p-&gt;next-&gt;prior=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dellink</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">dlink *p,*q;</span><br><span class="line"><span class="type">int</span> j,e;</span><br><span class="line">p=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;i<span class="number">-1</span>&amp;&amp;p-&gt;next)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;i<span class="number">-1</span>||!p-&gt;next)<span class="comment">//是否合法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入位置不存在:\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">q=p-&gt;next;</span><br><span class="line">e=q-&gt;data;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior=p;</span><br><span class="line"><span class="built_in">free</span>(q);      <span class="comment">//释放已分配的内存</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n,i,e,x;</span><br><span class="line">initlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入像创建的元素个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">creatlink(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出结果为:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n输入插入位置:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入插入的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">insertlink(i,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出插入后的链表:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除的值位置:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回删除的值:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dellink(x));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n返回删除后的链表:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树</title>
      <link href="/posts/b0c16ae4/"/>
      <url>/posts/b0c16ae4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HUGE 100</span></span><br><span class="line"><span class="comment">//定义哈夫曼树的结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hnode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> weight;  <span class="comment">//权值</span></span><br><span class="line"><span class="type">int</span> parent;<span class="comment">//双亲</span></span><br><span class="line"><span class="type">int</span> lchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="type">int</span> rchild; <span class="comment">//右孩子</span></span><br><span class="line">&#125;hnode;</span><br><span class="line"></span><br><span class="line">hnode h[N];<span class="comment">//存放所有节点</span></span><br><span class="line"><span class="type">int</span> w[N] = &#123; <span class="number">0</span> &#125;;<span class="comment">//存放权值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入叶子结点的个数和权值</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入叶子的个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入%d个叶子结点的权值:&quot;</span>, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">n = <span class="number">2</span> * m - <span class="number">1</span>;<span class="comment">//所有节点的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化,说明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">h[i].weight = w[i];</span><br><span class="line">h[i].parent = <span class="number">-1</span>;</span><br><span class="line">h[i].lchild = <span class="number">-1</span>;</span><br><span class="line">h[i].rchild = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">minmun</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> min, k;</span><br><span class="line">min = w[<span class="number">0</span>];</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (w[i] &lt; min &amp;&amp; w[i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">min = w[i];</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">w[k] = HUGE;<span class="comment">//把挑走的值改掉,防止重复挑选</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;<span class="comment">//最小值下标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = m; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">l = minmun();</span><br><span class="line">r = minmun();</span><br><span class="line">h[i].lchild = l;</span><br><span class="line">h[i].rchild = r;</span><br><span class="line">h[i].weight = h[l].weight + h[r].weight;</span><br><span class="line">h[l].parent = i;</span><br><span class="line">h[r].parent = i;</span><br><span class="line">w[i] = h[i].weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d%5d%5d%5d%5d\n&quot;</span>, i, h[i].weight, h[i].parent, h[i].lchild, h[i].rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">input();</span><br><span class="line">init();</span><br><span class="line">creat();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  下标  权值  双亲  左孩子  右孩子\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------\n&quot;</span>);</span><br><span class="line">output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文</title>
      <link href="/posts/f5aa3c09/"/>
      <url>/posts/f5aa3c09/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.28 回文的实现(数值)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义单链表节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qlink</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qlink</span>* <span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;qlink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义链队列的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linkqueue</span> &#123;</span></span><br><span class="line">qlink* front;<span class="comment">//队头指针</span></span><br><span class="line">qlink* rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;linkq;</span><br><span class="line"></span><br><span class="line">linkq q;<span class="comment">//定义一个链队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initqlink</span><span class="params">()</span> &#123;</span><br><span class="line">q.front = (qlink*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!q.front)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">q.rear = q.front;<span class="comment">//空队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队(插入)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqlink</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">qlink* p;</span><br><span class="line">p = (qlink*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">q.rear-&gt;next = p;<span class="comment">//连接作用</span></span><br><span class="line">q.rear = p;<span class="comment">//修改队尾指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队(删除)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deqlink</span><span class="params">()</span> &#123;</span><br><span class="line">qlink* p;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">if</span> (q.rear == q.front) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空队列,不进行删除\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p = q.front-&gt;next;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line">q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == q.rear)<span class="comment">//如果队尾指针没有,空队列</span></span><br><span class="line">q.rear = q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义顺序栈的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqstack</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* base;  <span class="comment">//栈底指针</span></span><br><span class="line"><span class="type">int</span>* top;  <span class="comment">//栈顶指针</span></span><br><span class="line"><span class="type">int</span> stacksize; <span class="comment">//存储空间大小</span></span><br><span class="line">&#125;sqs;</span><br><span class="line"></span><br><span class="line">sqs s; <span class="comment">//定义一个顺序栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">()</span> &#123;</span><br><span class="line">s.base = (<span class="type">int</span>*)<span class="built_in">malloc</span>(N * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (!s.base)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">s.top = s.base;  <span class="comment">//空栈</span></span><br><span class="line">s.stacksize = N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈(插入元素)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top - s.base &gt;= s.stacksize) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*s.base=(int *)realloc(s.base,(N+M)*sizeof(int))</span></span><br><span class="line"><span class="comment">if(!s.base) exit(0);</span></span><br><span class="line"><span class="comment">s.top=s.base+s.stacksize;</span></span><br><span class="line"><span class="comment">s.stacksize+=M;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">*s.top = e;<span class="comment">//插入</span></span><br><span class="line">s.top++;<span class="comment">//修改栈顶指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈(删除)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空栈\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s.top--;<span class="comment">//修改栈顶指针</span></span><br><span class="line">e = *s.top;<span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为回文</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">judge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> e, n, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">initstack();</span><br><span class="line">initqlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数值长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数值:&quot;</span>);<span class="comment">//逐个输入元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">push(e);</span><br><span class="line">enqlink(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> b = n;<span class="comment">//第一个循环n--到0了,需要将n赋给另一个变量</span></span><br><span class="line"><span class="keyword">while</span> (s.top != s.base)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = x + pop() * <span class="built_in">pow</span>(<span class="number">10</span>,n);</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出x的值&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x/<span class="number">10</span>);<span class="comment">//将各个元素合在一起化成数值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (q.rear != q.front)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">y = y + deqlink() * <span class="built_in">pow</span>(<span class="number">10</span>, b );</span><br><span class="line">b--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出y的值&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, y/<span class="number">10</span>);<span class="comment">//将各个元素合在一起化成数值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (x == y)<span class="comment">//比较是否相等判断是否为回文</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该数值是回文&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该数值不是回文&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里面有个问题,就是pow()里面的n如果等于n-1的话出来的结果不正确,不知道为什么,</span></span><br><span class="line"><span class="comment">在vs studio里面是正常的,但只要把他变成n,在输出的时候再除上一个10就行了*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">judge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文(字符)</title>
      <link href="/posts/b177b124/"/>
      <url>/posts/b177b124/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.28 回文的实现(字符)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义单链表节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qlink</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qlink</span>* <span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;qlink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义链队列的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linkqueue</span> &#123;</span></span><br><span class="line">qlink* front;<span class="comment">//队头指针</span></span><br><span class="line">qlink* rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;linkq;</span><br><span class="line"></span><br><span class="line">linkq q;<span class="comment">//定义一个链队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initqlink</span><span class="params">()</span> &#123;</span><br><span class="line">q.front = (qlink*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!q.front)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">q.rear = q.front;<span class="comment">//空队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队(插入)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqlink</span><span class="params">(<span class="type">char</span> e)</span> &#123;</span><br><span class="line">qlink* p;</span><br><span class="line">p = (qlink*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">q.rear-&gt;next = p;<span class="comment">//连接作用</span></span><br><span class="line">q.rear = p;<span class="comment">//修改队尾指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队(删除)</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">deqlink</span><span class="params">()</span> &#123;</span><br><span class="line">qlink* p;</span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line"><span class="keyword">if</span> (q.rear == q.front) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空队列,不进行删除\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p = q.front-&gt;next;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line">q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == q.rear)<span class="comment">//如果队尾指针没有,空队列</span></span><br><span class="line">q.rear = q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义顺序栈的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqstack</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* base;  <span class="comment">//栈底指针</span></span><br><span class="line"><span class="type">int</span>* top;  <span class="comment">//栈顶指针</span></span><br><span class="line"><span class="type">int</span> stacksize; <span class="comment">//存储空间大小</span></span><br><span class="line">&#125;sqs;</span><br><span class="line"></span><br><span class="line">sqs s; <span class="comment">//定义一个顺序栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">()</span> &#123;</span><br><span class="line">s.base = (<span class="type">int</span>*)<span class="built_in">malloc</span>(N * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (!s.base)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">s.top = s.base;  <span class="comment">//空栈</span></span><br><span class="line">s.stacksize = N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈(插入元素)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">char</span> e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top - s.base &gt;= s.stacksize) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*s.base=(int *)realloc(s.base,(N+M)*sizeof(int))</span></span><br><span class="line"><span class="comment">if(!s.base) exit(0);</span></span><br><span class="line"><span class="comment">s.top=s.base+s.stacksize;</span></span><br><span class="line"><span class="comment">s.stacksize+=M;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">*s.top = e;<span class="comment">//插入</span></span><br><span class="line">s.top++;<span class="comment">//修改栈顶指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈(删除)</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> e;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空栈\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s.top--;<span class="comment">//修改栈顶指针</span></span><br><span class="line">e = *s.top;<span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为回文</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">judge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> e;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">initstack();</span><br><span class="line">initqlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第一个字符串长度和元素:&quot;</span>);<span class="comment">//直接输入不要有空格</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">e = getchar();</span><br><span class="line">push(e);</span><br><span class="line">enqlink(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否为回文:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (s.top != s.base&amp;&amp; q.rear != q.front)<span class="comment">//判断是否为回文,因为长度都相同所以要存在都存在,要不存在都不存在</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pop() != deqlink())</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">judge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表(多个)</title>
      <link href="/posts/6f572f5c/"/>
      <url>/posts/6f572f5c/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.28 建立多个正序单链表并合并 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node* <span class="title function_">initlist</span><span class="params">()</span> &#123;</span><br><span class="line">node* l, * t;</span><br><span class="line">l = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (!l)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">t = l;</span><br><span class="line"><span class="keyword">return</span> l;<span class="comment">//返回头指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(node* l, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">node* p, * t;</span><br><span class="line">t = l;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">t = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//历遍(输出)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(node* l)</span> &#123;</span><br><span class="line">node* p;</span><br><span class="line">p = l-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并链表</span></span><br><span class="line">node* <span class="title function_">merge</span><span class="params">(node* l1, node* l2)</span> &#123;</span><br><span class="line">node* p, * i, * j, * t;</span><br><span class="line">i = l1-&gt;next;</span><br><span class="line">j = l2-&gt;next;</span><br><span class="line"><span class="comment">//比较两个链表第一个节点的大小</span></span><br><span class="line"><span class="keyword">if</span>(i-&gt;data&lt;=j-&gt;data)&#123;</span><br><span class="line">t = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t = l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将头节点给临时变量p</span></span><br><span class="line">p = t;</span><br><span class="line"><span class="keyword">while</span> (i &amp;&amp; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (i-&gt;data &lt; j-&gt;data)<span class="comment">//判断那一个作为第一个节点</span></span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = i;</span><br><span class="line">p = i;</span><br><span class="line">i = i-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;next = j;</span><br><span class="line">p = j;</span><br><span class="line">j = j-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果其中一个链表较长将剩余的加在后面</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line">p-&gt;next = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">node* l1, * l2, * l;</span><br><span class="line">l1 = initlist();</span><br><span class="line">l2 = initlist();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入l1链表的长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入了l1中的元素:&quot;</span>);</span><br><span class="line">creat(l1, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出l1的结果:\n&quot;</span>);</span><br><span class="line">output(l1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入l2链表的长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入了l2中的元素:&quot;</span>);</span><br><span class="line">creat(l2, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出l2的结果:\n&quot;</span>);</span><br><span class="line">output(l2);</span><br><span class="line">l = merge(l1, l2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出合并链表l的值:\n&quot;</span>);</span><br><span class="line">output(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表(正序)</title>
      <link href="/posts/864add12/"/>
      <url>/posts/864add12/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.28 建立多个正序单链表并合并 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node* <span class="title function_">initlist</span><span class="params">()</span> &#123;</span><br><span class="line">node* l, * t;</span><br><span class="line">l = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (!l)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">t = l;</span><br><span class="line"><span class="keyword">return</span> l;<span class="comment">//返回头指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(node* l, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">node* p, * t;</span><br><span class="line">t = l;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">t = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//历遍(输出)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(node* l)</span> &#123;</span><br><span class="line">node* p;</span><br><span class="line">p = l-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并链表</span></span><br><span class="line">node* <span class="title function_">merge</span><span class="params">(node* l1, node* l2)</span> &#123;</span><br><span class="line">node* p, * i, * j, * t;</span><br><span class="line">i = l1-&gt;next;</span><br><span class="line">j = l2-&gt;next;</span><br><span class="line"><span class="comment">//比较两个链表第一个节点的大小</span></span><br><span class="line"><span class="keyword">if</span>(i-&gt;data&lt;=j-&gt;data)&#123;</span><br><span class="line">t = l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t = l2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将头节点给临时变量p</span></span><br><span class="line">p = t;</span><br><span class="line"><span class="keyword">while</span> (i &amp;&amp; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (i-&gt;data &lt; j-&gt;data)<span class="comment">//判断那一个作为第一个节点</span></span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = i;</span><br><span class="line">p = i;</span><br><span class="line">i = i-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;next = j;</span><br><span class="line">p = j;</span><br><span class="line">j = j-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果其中一个链表较长将剩余的加在后面</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line">p-&gt;next = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">node* l1, * l2, * l;</span><br><span class="line">l1 = initlist();</span><br><span class="line">l2 = initlist();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入l1链表的长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入了l1中的元素:&quot;</span>);</span><br><span class="line">creat(l1, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出l1的结果:\n&quot;</span>);</span><br><span class="line">output(l1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入l2链表的长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入了l2中的元素:&quot;</span>);</span><br><span class="line">creat(l2, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出l2的结果:\n&quot;</span>);</span><br><span class="line">output(l2);</span><br><span class="line">l = merge(l1, l2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出合并链表l的值:\n&quot;</span>);</span><br><span class="line">output(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/posts/b66774c1/"/>
      <url>/posts/b66774c1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.30循环队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义顺序队列的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqque</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> *base;<span class="comment">//基地址</span></span><br><span class="line"><span class="type">int</span> front;<span class="comment">//队头指针(下标)</span></span><br><span class="line"><span class="type">int</span> rear;<span class="comment">//队尾指针(下表)</span></span><br><span class="line">&#125;sqq;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个顺序队列</span></span><br><span class="line">sqq q;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initque</span><span class="params">()</span>&#123;</span><br><span class="line">q.base=(<span class="type">int</span> *)<span class="built_in">malloc</span>(N*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span>(!q.base)</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">q.front=q.rear=<span class="number">0</span>;<span class="comment">//空队列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enque</span><span class="params">(<span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q.front==(q.rear+<span class="number">1</span>)%N)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">q.base[q.rear]=e;<span class="comment">//元素的插入</span></span><br><span class="line">q.rear=(q.rear+<span class="number">1</span>)%N;<span class="comment">//修改的队尾指针</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delque</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="keyword">if</span>(q.base==q.rear)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">e=q.rear[q.front];</span><br><span class="line">q.front=(q.front+<span class="number">1</span>)%N;<span class="comment">//修改队头指针</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/posts/1f4ac2fb/"/>
      <url>/posts/1f4ac2fb/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2020.9.23栈</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义顺序栈的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqstack</span>&#123;</span></span><br><span class="line"><span class="type">int</span> *base;  <span class="comment">//栈底指针</span></span><br><span class="line"><span class="type">int</span> *top;  <span class="comment">//栈顶指针</span></span><br><span class="line"><span class="type">int</span> stacksize; <span class="comment">//存储空间大小</span></span><br><span class="line">&#125;sqs;</span><br><span class="line"></span><br><span class="line">sqs s; <span class="comment">//定义一个顺序栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">()</span>&#123;</span><br><span class="line">s.base=(<span class="type">int</span> *)<span class="built_in">malloc</span>(N*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span>(!s.base)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">s.top=s.base;  <span class="comment">//空栈</span></span><br><span class="line">s.stacksize=N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈(插入元素)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.top-s.base&gt;=s.stacksize)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*s.base=(int *)realloc(s.base,(N+M)*sizeof(int))</span></span><br><span class="line"><span class="comment">if(!s.base) exit(0);</span></span><br><span class="line"><span class="comment">s.top=s.base+s.stacksize;</span></span><br><span class="line"><span class="comment">s.stacksize+=M;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">*s.top=e;<span class="comment">//插入</span></span><br><span class="line">s.top++;<span class="comment">//修改栈顶指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈(删除)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="keyword">if</span>(s.top==s.base)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空栈\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s.top--;<span class="comment">//修改栈顶指针</span></span><br><span class="line">e=*s.top;<span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数值转换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">conversion</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">initstack();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入十进制数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">x=n%<span class="number">2</span>;</span><br><span class="line">push(x);</span><br><span class="line">n=n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;转换为二进制数:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(s.top!=s.base)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,pop());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e,n;</span><br><span class="line">initstack();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入入栈元素个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入入栈元素:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">push(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回删除的值:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(s.top!=s.base)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,pop());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">conversion();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正序单链表</title>
      <link href="/posts/4370830e/"/>
      <url>/posts/4370830e/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">node *l,*t;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initlist</span><span class="params">()</span>&#123;</span><br><span class="line">l=(node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (node));</span><br><span class="line"><span class="keyword">if</span> (!l)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">l-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">t=l;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">node *p;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=(node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (node));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;data);</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">t-&gt;next=p;</span><br><span class="line">t=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">node *p;</span><br><span class="line">p=l-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">initlist();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入链表长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">creat(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出结果:\n&quot;</span>);</span><br><span class="line">output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度搜索</title>
      <link href="/posts/2a44ed31/"/>
      <url>/posts/2a44ed31/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//代表数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link</span> *<span class="title">next</span>;</span><span class="comment">//代表指针域,指向后继元素</span></span><br><span class="line">&#125;link;<span class="comment">//link为节点名,每个节点都是一个link结构体</span></span><br><span class="line"></span><br><span class="line">link *b[N];<span class="comment">//头节点</span></span><br><span class="line"><span class="comment">//定义链队列的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linkqueue</span>&#123;</span></span><br><span class="line">link *front;<span class="comment">//队头指针</span></span><br><span class="line">link *rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;linkq;</span><br><span class="line"></span><br><span class="line">linkq q;<span class="comment">//定义一个链队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initqlink</span><span class="params">()</span>&#123;</span><br><span class="line">q.front=(link *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="keyword">if</span> (!q.front)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q.rear=q.front;<span class="comment">//空队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队(插入)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqlink</span><span class="params">(<span class="type">int</span> e)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=(link *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">p-&gt;data=e;</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q.rear-&gt;next=p;<span class="comment">//连接作用</span></span><br><span class="line">q.rear=p;<span class="comment">//修改队尾指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队(删除)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deqlink</span><span class="params">()</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">if</span>(q.rear==q.front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空队列,不进行删除\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p=q.front-&gt;next;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">q.front-&gt;next=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p==q.rear)<span class="comment">//如果队尾指针没有,空队列</span></span><br><span class="line">q.rear=q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建邻接链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line">link *p;</span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">b[u]=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="keyword">while</span>(u&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">p-&gt;data=v;</span><br><span class="line">p-&gt;next=b[u];</span><br><span class="line">b[u]=p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,u);</span><br><span class="line">p=b[u];</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="type">int</span> vst[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span>&#123;</span><br><span class="line">    link *p;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">    vst[u]=<span class="number">1</span>;       <span class="comment">//已被访问</span></span><br><span class="line"></span><br><span class="line">    p=b[u];</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        v=p-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(vst[v]==<span class="number">0</span>)</span><br><span class="line">            dfs(v);         <span class="comment">//递归</span></span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="type">int</span> bvst[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bsf</span><span class="params">(<span class="type">int</span> u)</span>&#123;</span><br><span class="line">    link *p;</span><br><span class="line">    <span class="type">int</span> v,x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">    bvst[u]=<span class="number">1</span>;</span><br><span class="line">    enqlink(u);</span><br><span class="line">    <span class="keyword">while</span>(q.front!=q.rear)&#123;</span><br><span class="line">    v=deqlink();</span><br><span class="line">    p=b[v];</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(bvst[x]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">        bvst[x]=<span class="number">1</span>;</span><br><span class="line">        enqlink(x);</span><br><span class="line">    &#125;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">initqlink();</span><br><span class="line">creat(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;邻接表为:\n&quot;</span>);</span><br><span class="line">output(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;深度优先搜索结果:&quot;</span>);</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;广度优先搜索结果:&quot;</span>);</span><br><span class="line">    bsf(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接表</title>
      <link href="/posts/3f6e82d2/"/>
      <url>/posts/3f6e82d2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//代表数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link</span> *<span class="title">next</span>;</span><span class="comment">//代表指针域,指向后继元素</span></span><br><span class="line">&#125;link;<span class="comment">//link为节点名,每个节点都是一个link结构体</span></span><br><span class="line"></span><br><span class="line">link *b[N];<span class="comment">//头节点</span></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line">link *p;</span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">b[u]=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="keyword">while</span>(u&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">p-&gt;data=v;</span><br><span class="line">p-&gt;next=b[u];</span><br><span class="line">b[u]=p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,u);</span><br><span class="line">p=b[u];</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">creat(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;邻接表为:\n&quot;</span>);</span><br><span class="line">output(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式表</title>
      <link href="/posts/4fbd4ad2/"/>
      <url>/posts/4fbd4ad2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.13链式表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//代表数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link</span> *<span class="title">next</span>;</span><span class="comment">//代表指针域,指向后继元素</span></span><br><span class="line">&#125;link;<span class="comment">//link为节点名,每个节点都是一个link结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义头指针</span></span><br><span class="line">link *L;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Initlink</span><span class="params">()</span>&#123;</span><br><span class="line">L=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建首元节点</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//创建头指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建单链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creatlink</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">Initlink();</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;data);</span><br><span class="line">p-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历(输出访问)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertlink</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">link *p,*s;</span><br><span class="line">p=L;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;i<span class="number">-1</span>&amp;&amp;p)</span><br><span class="line">&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;i<span class="number">-1</span>||!p)<span class="comment">//是否合法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入位置不存在:\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">s=(link *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link)); <span class="comment">//在插入地方分配内存</span></span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dellink</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">link *p,*q;</span><br><span class="line"><span class="type">int</span> j,e;</span><br><span class="line">p=L;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;i<span class="number">-1</span>&amp;&amp;p-&gt;next)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;i<span class="number">-1</span>||!p-&gt;next)<span class="comment">//是否合法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入位置不存在:\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">q=p-&gt;next;</span><br><span class="line">e=q-&gt;data;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);      <span class="comment">//释放已分配的内存</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> i,e,n,x;</span><br><span class="line">Initlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入像创建的元素个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">creatlink(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出结果为:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n输入插入位置:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入插入的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">insertlink(i,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出插入后的结果:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除的值位置:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回删除的值:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dellink(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/posts/b6c47025/"/>
      <url>/posts/b6c47025/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.27 队列</span></span><br><span class="line"><span class="comment">//队列的特点,插入在队尾,删除在队前,先进先出.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义单链表节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qlink</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qlink</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;qlink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义链队列的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linkqueue</span>&#123;</span></span><br><span class="line">qlink *front;<span class="comment">//队头指针</span></span><br><span class="line">qlink *rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;linkq;</span><br><span class="line"></span><br><span class="line">linkq q;<span class="comment">//定义一个链队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initqlink</span><span class="params">()</span>&#123;</span><br><span class="line">q.front=(qlink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!q.front)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q.rear=q.front;<span class="comment">//空队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队(插入)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqlink</span><span class="params">(<span class="type">int</span> e)</span>&#123;</span><br><span class="line">qlink *p;</span><br><span class="line">p=(qlink *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qlink));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">p-&gt;data=e;</span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">q.rear-&gt;next=p;<span class="comment">//连接作用</span></span><br><span class="line">q.rear=p;<span class="comment">//修改队尾指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队(删除)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deqlink</span><span class="params">()</span>&#123;</span><br><span class="line">qlink *p;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">if</span>(q.rear==q.front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空队列,不进行删除\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p=q.front-&gt;next;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">q.front-&gt;next=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p==q.rear)<span class="comment">//如果队尾指针没有,空队列</span></span><br><span class="line">q.rear=q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e,n;</span><br><span class="line">initqlink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入创建的队列的长度:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入元素:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">enqlink(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;返回删除的值:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(q.rear!=q.front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,deqlink());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="/posts/f35acf61/"/>
      <url>/posts/f35acf61/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2022.9.1 顺序表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> *elem;         <span class="comment">//基地址</span></span><br><span class="line"><span class="type">int</span> length;        <span class="comment">//线性表长度</span></span><br><span class="line"><span class="type">int</span> listsize;      <span class="comment">//存储空间的大小</span></span><br><span class="line">&#125;sql;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量(顺序表)</span></span><br><span class="line"></span><br><span class="line">sql L;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">L.elem=(<span class="type">int</span> *)<span class="built_in">malloc</span>(N*<span class="keyword">sizeof</span>(<span class="type">int</span>));  <span class="comment">//获取整型需要的存储空间</span></span><br><span class="line"><span class="keyword">if</span>(!L.elem)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);  <span class="comment">//空间申请失败,退出</span></span><br><span class="line">L.listsize=N;                         <span class="comment">//空间大小</span></span><br><span class="line">L.length=<span class="number">0</span>;  <span class="comment">//空间长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组的值:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;L.elem[i]);</span><br><span class="line">L.length=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L.elem[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertNode</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> e)</span>  <span class="comment">//插入节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p,*q,k=i;</span><br><span class="line">q=L.elem+i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>||k&gt;L.length+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;超出范围无法插入\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L.length&gt;=L.listsize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;存储空间不足!!!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">newbase=(int *)realloc(L.elem,(N+M)*sizeof(int))   //追加存储空间</span></span><br><span class="line"><span class="comment">if(!newbase)</span></span><br><span class="line"><span class="comment">exit(0);</span></span><br><span class="line"><span class="comment">L.elem=newbase:</span></span><br><span class="line"><span class="comment">L.listsize+=M;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p = L.elem+L.length<span class="number">-1</span>; p &gt;=q ; p--)</span><br><span class="line">*(p+<span class="number">1</span>)=*p;<span class="comment">//移动元素</span></span><br><span class="line">*q=e;</span><br><span class="line">L.length++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line">q=L.elem+i<span class="number">-1</span>;</span><br><span class="line">e=*q;</span><br><span class="line"><span class="keyword">for</span>(p=q+<span class="number">1</span>;p&lt;=L.elem+L.length<span class="number">-1</span>;p++)</span><br><span class="line">*(p<span class="number">-1</span>)=*p;</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n,i=<span class="number">3</span>,e=<span class="number">7</span>;</span><br><span class="line">InitList();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入n的值:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">input(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入前的值:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line">insertNode(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入后的值:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line">delNode(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除后的值:&quot;</span>);</span><br><span class="line">output();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/posts/cd988ed5/"/>
      <url>/posts/cd988ed5/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><h2 id="一-Hello-world"><a href="#一-Hello-world" class="headerlink" title="一.Hello world"></a>一.Hello world</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run ubuntu /bin/bash <span class="string">&quot;Helllo World&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311131646753.png"></p><p>各个参数解析：</p><ul><li><strong>docker:</strong> Docker 的二进制执行文件。</li><li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>&#x2F;bin&#x2F;echo “Hello world”:</strong> 在启动的容器里执行的命令</li></ul><h2 id="二-运行交互式的容器"><a href="#二-运行交互式的容器" class="headerlink" title="二.运行交互式的容器"></a>二.运行交互式的容器</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-i</span> <span class="literal">-t</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311131646754.png"></p><p>各个参数解析：</p><ul><li><strong>-t:</strong> 在新容器内指定一个伪终端或终端。</li><li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互。</li></ul><p>注意第二行 **root@90d70a6e1a87:&#x2F;#**，此时我们已进入一个 ubuntu 系统的容器</p><p>我们尝试在容器中运行命令 <strong>cat &#x2F;proc&#x2F;version</strong>和<strong>ls</strong>分别查看当前系统的版本信息和当前目录下的文件列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311131646756.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311131646757.png"></p><p>我们可以通过运行 exit 命令或者使用 CTRL+D 来退出容器。</p><p><img src="https://oss.lingkongstudy.com.cn/202311131646758.png"></p><p>注意第三行中 <strong> pwsh      羽3m 38s 460ms⠀</strong> 表明我们已经退出了当前的容器，返回到当前的主机中。</p><h2 id="三-启动容器-后台模式"><a href="#三-启动容器-后台模式" class="headerlink" title="三.启动容器(后台模式)"></a>三.启动容器(后台模式)</h2><p>使用以下命令创建一个以进程方式运行的容器</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d ubuntu /bin/sh -c <span class="string">&quot;while ture; do echo Hello World; sleep 1; done&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/202311131646759.png"></p><p>在输出中，我们没有看到期望的 “hello world”，而是一串长字符</p><p><strong>2e05e471e05c98deb9815a656b1a81df205e4847d361c6fbaa0937a8822e43fc</strong></p><p>这个长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么。</p><p>首先，我们需要确认容器有在运行，可以通过 <strong>docker ps</strong> 来查看：</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python三角函数</title>
      <link href="/posts/731e0c8c/"/>
      <url>/posts/731e0c8c/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python-math-acos-函数"><a href="#一、Python-math-acos-函数" class="headerlink" title="一、Python math.acos() 函数"></a>一、Python math.acos() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.acos()</strong> 函数返回 x 的反余弦弧度值</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">math.acos(x)</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>-1 到 1 之间的数值。如果 x 是大于 1，会触发一个异常 ValueError</td></tr></tbody></table><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回 x 的反余弦弧度值</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.acos()</strong> 返回一些数值的反余弦弧度值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math          <span class="comment">#可以使用随机数函数定义x</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(math.acos(random.random()))</span><br><span class="line"><span class="built_in">print</span>(math.acos(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.792167546749833</span></span><br><span class="line"><span class="number">1.0471975511965979</span></span><br></pre></td></tr></table></figure><h1 id="二、Python-math-asin-函数"><a href="#二、Python-math-asin-函数" class="headerlink" title="二、Python math.asin() 函数"></a>二、Python math.asin() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.asin()</strong> 函数返回 x 的反正弦弧度值</p><h2 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br></pre></td></tr></table></figure><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>-1 到 1 之间的数值，如果 x 是大于 1，会触发一个错误 ValueError</td></tr></tbody></table><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>返回 x 的反正弦弧度值</p><h2 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.asin()</strong> 函数返回一些数值的反正弦弧度值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math          <span class="comment">#可以使用随机数函数定义x</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(math.asin(random.random()))</span><br><span class="line"><span class="built_in">print</span>(math.asin(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.8446233027366341</span></span><br><span class="line"><span class="number">0.5235987755982989</span></span><br></pre></td></tr></table></figure><h1 id="三、Python-math-atan-函数"><a href="#三、Python-math-atan-函数" class="headerlink" title="三、Python math.atan() 函数"></a>三、Python math.atan() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.atan()</strong> 函数返回 x 的反正切弧度值</p><h2 id="导入模块-2"><a href="#导入模块-2" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.atan(x)</span><br></pre></td></tr></table></figure><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h2><p>返回 x 的反正切弧度值</p><h2 id="例：-2"><a href="#例：-2" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.atan()</strong> 函数返回一些数值的反正切弧度值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math          <span class="comment">#可以使用随机数函数定义x</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed()</span><br><span class="line"><span class="built_in">print</span>(math.atan(random.random()))</span><br><span class="line"><span class="built_in">print</span>(math.atan(<span class="number">5</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.02367134887956436</span></span><br><span class="line"><span class="number">1.373400766945016</span></span><br></pre></td></tr></table></figure><h1 id="四、Python-math-atan2-函数"><a href="#四、Python-math-atan2-函数" class="headerlink" title="四、Python math.atan2() 函数"></a>四、Python math.atan2() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.atan2()</strong> 返回给定的 X 及 Y 坐标值的反正切值</p><h2 id="导入模块-3"><a href="#导入模块-3" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.atan2(y, x)</span><br></pre></td></tr></table></figure><h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr><tr><td>y</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h2><p>返回给定的 X 及 Y 坐标值的反正切值</p><h2 id="例：-3"><a href="#例：-3" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.atan2()</strong> 函数返回一些坐标值的反正切</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.atan2(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(math.atan2(-<span class="number">1</span>,-<span class="number">2</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">0.4636476090008061</span></span><br><span class="line">-<span class="number">2.677945044588987</span></span><br></pre></td></tr></table></figure><h1 id="五、Python-math-cos-函数"><a href="#五、Python-math-cos-函数" class="headerlink" title="五、Python math.cos() 函数"></a>五、Python math.cos() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.cos(x)</strong> 函数返回弧度 x 的余弦</p><h2 id="导入模块-4"><a href="#导入模块-4" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.cos(x)</span><br></pre></td></tr></table></figure><h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h2><p>返回弧度 x 的余弦值, 值在 [-1,1] 之间</p><h2 id="例：-4"><a href="#例：-4" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.cos()</strong> 函数返回一些数值的余弦</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.cos(math.pi))</span><br><span class="line"><span class="built_in">print</span>(math.cos(<span class="number">2</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">-<span class="number">1.0</span></span><br><span class="line">-<span class="number">0.4161468365471424</span></span><br></pre></td></tr></table></figure><h1 id="六、Python-math-hypot-函数"><a href="#六、Python-math-hypot-函数" class="headerlink" title="六、Python math.hypot() 函数"></a>六、Python math.hypot() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.hypot(x,y)</strong> 函数返回欧几里德范数 sqrt(x<em>x + y</em>y)</p><h2 id="导入模块-5"><a href="#导入模块-5" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.hypot(x, y)</span><br></pre></td></tr></table></figure><h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr><tr><td>y 一个数值</td><td></td></tr></tbody></table><h2 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h2><p>返回欧几里德范数 sqrt(x* <em>x + y</em> *y)</p><h2 id="例：-5"><a href="#例：-5" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.hypot()</strong> 函数求欧几里德范数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.hypot(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(math.hypot(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="number">6.4031242374328485</span></span><br></pre></td></tr></table></figure><h1 id="七、Python-math-sin-函数"><a href="#七、Python-math-sin-函数" class="headerlink" title="七、Python math.sin() 函数"></a>七、Python math.sin() 函数</h1><p><a href="./python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8">返回上一级</a></p><p>Python <strong>math.sin()</strong> 返回的弧度 x 的正弦值</p><h2 id="导入模块-6"><a href="#导入模块-6" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.sin(x)</span><br></pre></td></tr></table></figure><h2 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h2><p>返回的 x 弧度的正弦值，数值在 -1 到 1 之间</p><h2 id="例：-6"><a href="#例：-6" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.sin()</strong> 函数返回一些数值的正弦</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sin(math.pi))</span><br><span class="line"><span class="built_in">print</span>(math.sin(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(math.sin(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">1.2246467991473532e-16</span></span><br><span class="line"><span class="number">0.8414709848078965</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><h1 id="八、Python2-math-tan-函数"><a href="#八、Python2-math-tan-函数" class="headerlink" title="八、Python2 math.tan() 函数"></a>八、Python2 math.tan() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.tan( x )</strong> 返回弧度 x 的正切值</p><h2 id="导入模块-7"><a href="#导入模块-7" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.tan(x)</span><br></pre></td></tr></table></figure><h2 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h2><p>返回弧度 x 的正切值，值在 -1 到 1 之间</p><h2 id="例：-7"><a href="#例：-7" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.tan()</strong> 函数返回一些数值的正切值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.tan(math.pi))</span><br><span class="line"><span class="built_in">print</span>(math.tan(<span class="number">1.5</span>))</span><br><span class="line"><span class="built_in">print</span>(math.tan(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">-<span class="number">1.2246467991473532e-16</span></span><br><span class="line"><span class="number">14.101419947171719</span></span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure><h1 id="九、Python-math-degrees-函数"><a href="#九、Python-math-degrees-函数" class="headerlink" title="九、Python math.degrees() 函数"></a>九、Python math.degrees() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.degrees()</strong> 函数将弧度转换为角度</p><h2 id="导入模块-8"><a href="#导入模块-8" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.degrees( x )</span><br></pre></td></tr></table></figure><h2 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个角度值</p><h2 id="例：-8"><a href="#例：-8" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.degrees()</strong> 函数将一些数值转换为角度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.degrees(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(math.degrees(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(math.degrees(<span class="number">5.2</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">114.59155902616465</span></span><br><span class="line"><span class="number">171.88733853924697</span></span><br><span class="line"><span class="number">297.9380534680281</span></span><br></pre></td></tr></table></figure><h1 id="十、Python-math-radians-函数"><a href="#十、Python-math-radians-函数" class="headerlink" title="十、Python math.radians() 函数"></a>十、Python math.radians() 函数</h1><p><a href="python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0.md">返回上一级</a></p><p>Python <strong>math.radians()</strong> 方法将角度转换为弧度</p><h2 id="导入模块-9"><a href="#导入模块-9" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math.radians(x)</span><br></pre></td></tr></table></figure><h2 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>一个数值</td></tr></tbody></table><h2 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个角度的弧度值</p><h2 id="例：-9"><a href="#例：-9" class="headerlink" title="例："></a>例：</h2><p>下面的代码使用 <strong>math.radians()</strong> 方法计算一些数值的弧度</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.radians(<span class="number">360</span>))</span><br><span class="line"><span class="built_in">print</span>(math.radians(<span class="number">200</span>))</span><br><span class="line"><span class="built_in">print</span>(math.radians(<span class="number">100</span>))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">6.283185307179586</span></span><br><span class="line"><span class="number">3.490658503988659</span></span><br><span class="line"><span class="number">1.7453292519943295</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控系统</title>
      <link href="/posts/436f9440/"/>
      <url>/posts/436f9440/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-监控系统"><a href="#第七章-监控系统" class="headerlink" title="第七章 监控系统"></a>第七章 监控系统</h1><h2 id="一-监控系统简介"><a href="#一-监控系统简介" class="headerlink" title="一.监控系统简介"></a>一.监控系统简介</h2><p>监控系统监测的对象需基本涵盖IT行业软、硬件环境的各个环节，包括机房环境、硬件、网络、软件、服务等，也要涵盖各个环节中的各项细节。例如，在硬件环境监控中服务器的工作温度、风扇转速，在系统环境监控中操作系统的运行状况、CPU、内存、、 I&#x2F;O、 存储空间使用情况、网络流量、进程数量，服务监控中服务器的状态等。</p><p>本章我们就以<code>Zabbix</code>监控系统来进行监控系统的配置。</p><h2 id="二-Zabbix的安装与配置"><a href="#二-Zabbix的安装与配置" class="headerlink" title="二.Zabbix的安装与配置"></a>二.Zabbix的安装与配置</h2><p>本节将讲解Zabbix安装、配置方式，并在安装、配置后对服务器端和客户端的连通性进行测试。由于 Zabbix Server集成了 Web 界面,人们一般将 Zabbix 安装在 Web环境——LAMP 或LNMP 中，我们这次做的不完全按照书本上面的做，但是在看本文之前建议还是把书本上的内容过一遍。</p><h3 id="2-1基础准备"><a href="#2-1基础准备" class="headerlink" title="2.1基础准备"></a>2.1基础准备</h3><p>关闭防火墙以及selinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">Removed /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># sed -i &quot;s/enforcing/permissive/g&quot; /etc/selinux/config</span></span><br></pre></td></tr></table></figure><h3 id="2-2搭建zabbix监控-server端"><a href="#2-2搭建zabbix监控-server端" class="headerlink" title="2.2搭建zabbix监控(server端)"></a>2.2搭建zabbix监控(server端)</h3><h4 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1.安装mysql"></a>1.安装mysql</h4><p>这个在<code>SHELL</code>那一章也讲过<a href="https://acwwt.github.io/2023/11/16/codenotes/linux%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/%E7%AC%AC%E4%B8%89%E7%AB%A0.SHELL/">SHELL | 苹果屋🍎</a></p><h4 id="2-安装zabbix6-0源"><a href="#2-安装zabbix6-0源" class="headerlink" title="2.安装zabbix6.0源"></a>2.安装zabbix6.0源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbix-release-6.0-1.el8.noarch.rpm</span></span><br><span class="line">获取https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbix-release-6.0-1.el8.noarch.rpm</span><br><span class="line">警告：/var/tmp/rpm-tmp.YYhyFM: 头V4 RSA/SHA512 Signature, 密钥 ID a14fe591: NOKEY</span><br><span class="line">Verifying...                          <span class="comment">################################# [100%]</span></span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:zabbix-release-6.0-1.el8         <span class="comment">################################# [100%]</span></span><br><span class="line">[root@gzh-cs8 ~]<span class="comment"># dnf clean all </span></span><br><span class="line">18 文件已删除</span><br><span class="line"><span class="comment"># 修改zabbix.repo</span></span><br><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># cat zabbix.repo </span></span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix Official Repository - <span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#baseurl=https://repo.zabbix.com/zabbix/6.0/rhel/8/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/8/x86_64/ <span class="comment"># zabbix清华源</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line"></span><br><span class="line">[zabbix-non-supported]</span><br><span class="line">name=Zabbix Official Repository (non-supported) - <span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#baseurl=https://repo.zabbix.com/non-supported/rhel/8/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/zabbix/non-supported/rhel/8/x86_64/ <span class="comment"># zabbix-non-supported清华源</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">[zabbix-unstable]</span><br><span class="line">name=Zabbix Official Repository (unstable) - <span class="variable">$basearch</span></span><br><span class="line">baseurl=https://repo.zabbix.com/zabbix/5.5/rhel/8/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line"><span class="comment"># 修改zabbix-agent2-plugins.repo</span></span><br><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># cat zabbix-agent2-plugins.repo </span></span><br><span class="line">[zabbix-agent2-plugins]</span><br><span class="line">name=Zabbix Official Repository (Agent2 Plugins) - <span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#baseurl=https://repo.zabbix.com/zabbix-agent2-plugins/1/rhel/8/$basearch/</span></span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix-agent2-plugins/1/rhel/8/x86_64/ <span class="comment"># agent2清华源</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><h4 id="3-安装zabbix6-0服务端和客户端"><a href="#3-安装zabbix6-0服务端和客户端" class="headerlink" title="3.安装zabbix6.0服务端和客户端"></a>3.安装zabbix6.0服务端和客户端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 ~]<span class="comment"># dnf install zabbix-server-mysql zabbix-web-mysql zabbix-apache-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent2 -y</span></span><br></pre></td></tr></table></figure><h3 id="2-3配置数据库"><a href="#2-3配置数据库" class="headerlink" title="2.3配置数据库"></a>2.3配置数据库</h3><h4 id="1-创建初始数据库"><a href="#1-创建初始数据库" class="headerlink" title="1.创建初始数据库"></a>1.创建初始数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 10</span><br><span class="line">Server version: 8.0.35 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8mb4 collate utf8mb4_bin;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create user zabbix@localhost identified WITH sha256_password BY <span class="string">&#x27;guo123&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global log_bin_trust_function_creators = 1;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; delete from user <span class="built_in">where</span> user=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h4 id="3-导入初始架构和数据"><a href="#3-导入初始架构和数据" class="headerlink" title="3.导入初始架构和数据"></a>3.导入初始架构和数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p zabbix</span><br></pre></td></tr></table></figure><h4 id="4-Zabbix-server配置数据库"><a href="#4-Zabbix-server配置数据库" class="headerlink" title="4.Zabbix server配置数据库"></a>4.Zabbix server配置数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入表完成之后禁用mysql以下功能</span></span><br><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 12</span><br><span class="line">Server version: 8.0.35 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global log_bin_trust_function_creators = 0;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit;</span><br><span class="line">Bye</span><br><span class="line"><span class="comment"># 编辑zabbix_server.conf配置文件</span></span><br><span class="line">vim /etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line">DBPassword=guo123 <span class="comment">#DBPassword密码为guo123</span></span><br></pre></td></tr></table></figure><h3 id="2-4启动Zabbix-server和agent进程"><a href="#2-4启动Zabbix-server和agent进程" class="headerlink" title="2.4启动Zabbix server和agent进程"></a>2.4启动Zabbix server和agent进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># systemctl restart zabbix-server zabbix-agent2 httpd php-fpm</span></span><br><span class="line">[root@gzh-cs8 yum.repos.d]<span class="comment"># systemctl enable zabbix-server zabbix-agent2 httpd php-fpm</span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/zabbix-server.service → /usr/lib/systemd/system/zabbix-server.service.</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/zabbix-agent2.service → /usr/lib/systemd/system/zabbix-agent2.service.</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/php-fpm.service → /usr/lib/systemd/system/php-fpm.service.</span><br></pre></td></tr></table></figure><p><code>注意!</code>如果报以下错误,修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">11月 14 06:54:47 gzh-cs8 httpd[29177]: AH00558: httpd: Could not reliably determine the ser...</span><br><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">找到Servername取消注释并将www.example.com改为localhost</span><br></pre></td></tr></table></figure><p>启动完如下:</p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142008938.png"></p><p>出现上面的图片就代表zabbix服务安装成功了</p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142010329.png"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142011345.png"></p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142012974.png"></p><p>默认账号密码为:</p><p><code>账号: Admin</code></p><p><code>密码: zabbix</code></p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142014512.png"></p><p>登录成功以后就可以看到主页面了</p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142014387.png"></p><p>到这里服务端算是安装成功了,书上有如何用zabbix监控的讲解,这里就不一一演示了,这里就拿<code>zabbix管理linux</code>来举例</p><h2 id="三-Zabbix管理linux主机"><a href="#三-Zabbix管理linux主机" class="headerlink" title="三.Zabbix管理linux主机"></a>三.Zabbix管理linux主机</h2><h4 id="1-监控Linxu主机，关闭防火墙。"><a href="#1-监控Linxu主机，关闭防火墙。" class="headerlink" title="1.监控Linxu主机，关闭防火墙。"></a>1.监控Linxu主机，关闭防火墙。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> --now firewalld</span><br></pre></td></tr></table></figure><h4 id="2-关闭selinux-将SELINUX-enforcing-改为SELINUX-disabled"><a href="#2-关闭selinux-将SELINUX-enforcing-改为SELINUX-disabled" class="headerlink" title="2.关闭selinux,将SELINUX&#x3D;enforcing 改为SELINUX&#x3D;disabled"></a>2.关闭selinux,将SELINUX&#x3D;enforcing 改为SELINUX&#x3D;disabled</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure><h4 id="3-安装zabbix监控代理程序，机器能上网即可。这里选择的是清华大学的源。"><a href="#3-安装zabbix监控代理程序，机器能上网即可。这里选择的是清华大学的源。" class="headerlink" title="3.安装zabbix监控代理程序，机器能上网即可。这里选择的是清华大学的源。"></a>3.安装zabbix监控代理程序，机器能上网即可。这里选择的是清华大学的源。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/8/x86_64/zabbix-agent-6.0.3-1.el8.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="4-编辑zabbix-agent的配置文件。将其中Server的地址改成zabbix-server的地址。"><a href="#4-编辑zabbix-agent的配置文件。将其中Server的地址改成zabbix-server的地址。" class="headerlink" title="4.编辑zabbix-agent的配置文件。将其中Server的地址改成zabbix-server的地址。"></a>4.编辑zabbix-agent的配置文件。将其中Server的地址改成zabbix-server的地址。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/zabbix/zabbix_agentd.conf</span><br></pre></td></tr></table></figure><h4 id="5-启动agent代理程序。"><a href="#5-启动agent代理程序。" class="headerlink" title="5.启动agent代理程序。"></a>5.启动agent代理程序。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="6-把agent代理程序加入开机自启。"><a href="#6-把agent代理程序加入开机自启。" class="headerlink" title="6.把agent代理程序加入开机自启。"></a>6.把agent代理程序加入开机自启。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="7-进入zabbix主页添加主机。"><a href="#7-进入zabbix主页添加主机。" class="headerlink" title="7.进入zabbix主页添加主机。"></a>7.进入zabbix主页添加主机。</h4><p>主机名称，见面的名称随便填写，模板可以选择Linux by Zabbix agent,群组可以选择Linux server,interfaces选择客户端，IP填写被监控主机的IP ,端口默认10050,点击添加。</p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142034466.png"></p><p>过会当ZBX变为绿色表示zabbix-server已经发现被监控主机，可以看到监控的数据了。</p><p><img src="https://oss.lingkongstudy.com.cn/linux/202311142034816.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多媒体</title>
      <link href="/posts/ec65e50/"/>
      <url>/posts/ec65e50/</url>
      
        <content type="html"><![CDATA[<h1 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h1><h2 id="一．多媒体基本概念"><a href="#一．多媒体基本概念" class="headerlink" title="一．多媒体基本概念"></a>一．多媒体基本概念</h2><ul><li>多媒体分类：</li></ul><h3 id="1-感觉媒体：使人直接产生感觉的媒体，如：视觉，听觉、触觉等"><a href="#1-感觉媒体：使人直接产生感觉的媒体，如：视觉，听觉、触觉等" class="headerlink" title="1.感觉媒体：使人直接产生感觉的媒体，如：视觉，听觉、触觉等"></a>1.感觉媒体：使人直接产生感觉的媒体，如：视觉，听觉、触觉等</h3><h3 id="2-表示媒体：传输感觉媒体的中介媒体，即用于数据交换的编码。如：文字、图形、动画、音频和视频等"><a href="#2-表示媒体：传输感觉媒体的中介媒体，即用于数据交换的编码。如：文字、图形、动画、音频和视频等" class="headerlink" title="2.表示媒体：传输感觉媒体的中介媒体，即用于数据交换的编码。如：文字、图形、动画、音频和视频等"></a>2.表示媒体：传输感觉媒体的中介媒体，即用于数据交换的编码。如：文字、图形、动画、音频和视频等</h3><h3 id="3-表现媒体：进行信息输入和信息输出的媒体。如：键盘、鼠标、麦克风、显示器、打印机、音响等"><a href="#3-表现媒体：进行信息输入和信息输出的媒体。如：键盘、鼠标、麦克风、显示器、打印机、音响等" class="headerlink" title="3.表现媒体：进行信息输入和信息输出的媒体。如：键盘、鼠标、麦克风、显示器、打印机、音响等"></a>3.表现媒体：进行信息输入和信息输出的媒体。如：键盘、鼠标、麦克风、显示器、打印机、音响等</h3><h3 id="4-存储媒体：存储表现媒体的物理介质。如：磁盘、光盘、内存等"><a href="#4-存储媒体：存储表现媒体的物理介质。如：磁盘、光盘、内存等" class="headerlink" title="4.存储媒体：存储表现媒体的物理介质。如：磁盘、光盘、内存等"></a>4.存储媒体：存储表现媒体的物理介质。如：磁盘、光盘、内存等</h3><h3 id="5-传输媒体：传输表示媒体的物理介质。如：电缆、光纤、双绞线等"><a href="#5-传输媒体：传输表示媒体的物理介质。如：电缆、光纤、双绞线等" class="headerlink" title="5.传输媒体：传输表示媒体的物理介质。如：电缆、光纤、双绞线等"></a>5.传输媒体：传输表示媒体的物理介质。如：电缆、光纤、双绞线等</h3><h2 id="二．声音"><a href="#二．声音" class="headerlink" title="二．声音"></a>二．声音</h2><h3 id="1-声音的基本属性"><a href="#1-声音的基本属性" class="headerlink" title="1. 声音的基本属性"></a>1. 声音的基本属性</h3><ul><li>声音是一种模拟信号，使用带宽形容声音的大小，单位是HZ，需要进行处理转化为数字信号。</li><li>声音转换过程有三个步骤：采样、量化、编码</li><li>人耳能听到的音频信号的频率范围是 <code>20 HZ - 20 KHZ</code></li><li>声音的采样频率一般为最高频率的两倍才能保证不失真</li></ul><h3 id="2-声音的频率计算"><a href="#2-声音的频率计算" class="headerlink" title="2. 声音的频率计算"></a>2. 声音的频率计算</h3><ul><li>未经压缩的数字音频数据的传输率计算公式如下：<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">数据传输率（bps）= 采样频率（HZ）* 量化位数（bit）* 声道数</span><br></pre></td></tr></table></figure></li><li>生意波形经过数字化后所需占用的存储空间公式如下：<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">声音信号数据量（Byte）= 数据传输率（bps）* 持续时间（s）/ 8</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-声音的合成"><a href="#3-声音的合成" class="headerlink" title="3. 声音的合成"></a>3. 声音的合成</h3><ul><li>数字音乐合成方法<br>数字调频合成法FM：使用高频震荡波的频率按调制信号规律变化的一种调制方式。<br>电子模拟声，能创造出丰富多彩的声音，是真实乐器所不具备的音色。</li><li>波表合成法Wavetable：<br>将各种真实乐器所能发出的所有声音（包括各个音域、声调）录制下来，存储为一个波表文件。<br>播放时，根据MIDI文件记录的乐谱信息向波表发出指令，从波表中逐一找出对应的信息，经过合成、加工后回放出来，合成的音质更好</li></ul><h3 id="4-声音特性："><a href="#4-声音特性：" class="headerlink" title="4.  声音特性："></a>4.  声音特性：</h3><ul><li>音量：即响度，标识声音的强弱程度， 主要取决于声波振幅的大小</li><li>音高：表示各种声音的高低，主要取决于声音的振动频率，真毒频率余越高则音越高</li><li>音调：声音调子的高低，声音本身的频率决定</li><li>音色：音品，有声音波形的谐波频谱和包络决定</li><li>声音文件格式：.wav&#x2F;.snd&#x2F;.au&#x2F;.aif&#x2F;.voc&#x2F;.mp3&#x2F;.ra&#x2F;.mid等</li></ul><h2 id="三．图形和图像"><a href="#三．图形和图像" class="headerlink" title="三．图形和图像"></a>三．图形和图像</h2><h3 id="1-颜色三要素："><a href="#1-颜色三要素：" class="headerlink" title="1.  颜色三要素："></a>1.  颜色三要素：</h3><p>亮度（彩色明暗深浅的程度）、<br>色调（红绿）：颜色的类别、<br>饱和度：某一颜色的深浅程度</p><h3 id="2-色彩空间"><a href="#2-色彩空间" class="headerlink" title="2. 色彩空间"></a>2. 色彩空间</h3><p>彩色空间：即设备显示图片所使用的色彩空间<br>电脑显示器：RGB色彩空间，红、绿、蓝三原色叠加组成</p><p>电视中使用YUV色彩空间：主要兼容黑白电视，使用亮度原理，即不同亮度显示不同颜色</p><p>CMY（CMYK），印刷书籍采用的色彩空间，与RGB相反的减法原理，采用浅蓝、粉红、黄三原色印刷颜料实际上是吸收了本身色彩外的其它颜色<br>HSV（HSB）,艺术家色彩空间，是从艺术的角度划分的</p><h3 id="3-图像的基本特点"><a href="#3-图像的基本特点" class="headerlink" title="3. 图像的基本特点"></a>3. 图像的基本特点</h3><ul><li>图像的属性：分辨率（每英寸像素点数dpi）、像素深度（存储每个像素使用的二进制位数）</li><li>图像文件格式：.bmp&#x2F;.gif&#x2F;.jpg&#x2F;.png&#x2F;.tif&#x2F;.wmf等</li><li>图像深度是图像中记录一个像素点所需要的位数</li><li>显示深度表示显示缓存中记录屏幕上一个点的位数（bit），也即显示器可以显示的颜色数</li><li>水平分辨率：横向上像素点数</li><li>垂直分辨率：纵向上像素点数</li><li>矢量图的基本组成单位是图元，位图的基本组成单位是像素，视频和动画的基本组成单元是帧</li></ul><h2 id="四．多媒体计算"><a href="#四．多媒体计算" class="headerlink" title="四．多媒体计算"></a>四．多媒体计算</h2><h3 id="1-图像容量计算"><a href="#1-图像容量计算" class="headerlink" title="1.图像容量计算"></a>1.图像容量计算</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">每个像素16位，图像是640*480像素</span><br><span class="line">容量= 640*480*16/8 = 614400B 字节</span><br><span class="line">640*480像素，256色的图像，求容量</span><br><span class="line">容量=640*480*log2(256)/8 =307200B 字节</span><br></pre></td></tr></table></figure><h3 id="2-音频容量计算"><a href="#2-音频容量计算" class="headerlink" title="2.音频容量计算"></a>2.音频容量计算</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">容量=采样频率（HZ）* 量化/采样位数（bit）* 声道数 / 8</span><br></pre></td></tr></table></figure><p>###3.视频容量计算</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">容量=每帧图像容量（Byte）* 每秒帧数 * 时间 + 音频容量 * 时间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第10章 网路与信息安全基础知识</title>
      <link href="/posts/e22bd2a4/"/>
      <url>/posts/e22bd2a4/</url>
      
        <content type="html"><![CDATA[<h1 id="第10章-网路与信息安全基础知识"><a href="#第10章-网路与信息安全基础知识" class="headerlink" title="第10章 网路与信息安全基础知识"></a>第10章 网路与信息安全基础知识</h1><h2 id="一．计算机网络概念"><a href="#一．计算机网络概念" class="headerlink" title="一．计算机网络概念"></a>一．计算机网络概念</h2><h3 id="1-计算机网络概念"><a href="#1-计算机网络概念" class="headerlink" title="1. 计算机网络概念"></a>1. 计算机网络概念</h3><ul><li><p>计算机网络是计算机技术与通信技术相结合的产物，他实现了远程通信、远程信息处理和资源共享</p></li><li><p>计算机网络功能：数据通信、资源共享、负载均衡、高可靠性</p></li></ul><h3 id="2-网络分类："><a href="#2-网络分类：" class="headerlink" title="2. 网络分类："></a>2. 网络分类：</h3><table width="568">    <tbody>        <tr style="height:21px" class="firstRow">            <td width="114" valign="center" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">网络分类</span>                </p>            </td>            <td width="78" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">缩写</span>                </p>            </td>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">分布距离</span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">计算机分布范围</span>                </p>            </td>            <td width="126" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">阐述速率范围</span>                </p>            </td>        </tr>        <tr>            <td width="114" valign="center" rowspan="3" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">局域网</span>                </p>            </td>            <td width="78" valign="center" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">LAN</span>                </p>            </td>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">10m<span style="font-family:宋体">左右</span></span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">房间</span>                </p>            </td>            <td width="126" valign="center" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">4mbpx~1Gbps</span>                </p>            </td>        </tr>        <tr>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">100m<span style="font-family:宋体">左右</span></span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">楼宇</span>                </p>            </td>        </tr>        <tr>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">1000m<span style="font-family:宋体">左右</span></span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">校园</span>                </p>            </td>        </tr>        <tr>            <td width="114" valign="center" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">城域网</span>                </p>            </td>            <td width="78" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">MAN</span>                </p>            </td>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">10KM</span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">城市</span>                </p>            </td>            <td width="126" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">50Kbps~100Mbps</span>                </p>            </td>        </tr>        <tr>            <td width="114" valign="center" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">广域网</span>                </p>            </td>            <td width="78" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">WAN</span>                </p>            </td>            <td width="114" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">100KM<span style="font-family:宋体">以上</span></span>                </p>            </td>            <td width="136" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">国家或全球</span>                </p>            </td>            <td width="126" valign="center" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:justify;text-justify:inter-ideograph">                    <span style=";font-family:宋体;font-size:14px">9.6Kbps~45Mbps</span>                </p>            </td>        </tr>    </tbody></table><h3 id="3-网络拓扑结构："><a href="#3-网络拓扑结构：" class="headerlink" title="3. 网络拓扑结构："></a>3. 网络拓扑结构：</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/10-1.png" alt="软件设计师教程知识点整理"></p><ul><li>总线型：利用率低、干扰大、价格低</li><li>星型：交换机形成的局域网、中央单元负荷大</li><li>环型：流动方向固定、效率扩充难</li><li>树型：总线型的扩充、分级结构</li><li>分布式：任意节点连接、管理难成本高</li></ul><h3 id="4-网路体系结构"><a href="#4-网路体系结构" class="headerlink" title="4. 网路体系结构"></a>4. 网路体系结构</h3><ul><li>七层网络模型（OSI&#x2F;RM）（由ISO&#x2F;OSI 组织发布）<table width="560">  <tbody>      <tr style="height:19px" class="firstRow">          <td width="118" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">七层模型</span></strong>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">传输方式</span></strong>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">1<span style="font-family:宋体">应用层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">实现具体的应用功能，直接进程间的通信</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">2<span style="font-family:宋体">表示层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">数据间格式转换、压缩、加密等操作，对数据进行处理</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">3<span style="font-family:宋体">会话层</span></span><span style="font-family: 宋体;font-size: 14px">会话</span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">会话管理服务：建立、维护、结束回话</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">4<span style="font-family:宋体">传输层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">端口到端口的链接，传送数据到主机端口上</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">5<span style="font-family:宋体">网络层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">分组传输和路由选择，准确传送至互联网网络主机上</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">6<span style="font-family:宋体">数据链路层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">封装成帧传送，准确传送至局域网内的物理主机上</span>              </p>          </td>      </tr>      <tr>          <td width="118" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">7<span style="font-family:宋体">物理层</span></span>              </p>          </td>          <td width="442" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">二进制传输，物理链路和物理特性相关</span>              </p>          </td>      </tr>  </tbody></table></li></ul><h2 id="二．网络互联硬件"><a href="#二．网络互联硬件" class="headerlink" title="二．网络互联硬件"></a>二．网络互联硬件</h2><ul><li><p>网络设备</p><table width="566">  <tbody>      <tr style="height:19px" class="firstRow">          <td width="566" valign="top" colspan="2" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">七层模型硬件</span></strong>              </p>          </td>      </tr>      <tr>          <td width="140" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">1<span style="font-family:宋体">应用层</span></span>              </p>          </td>          <td width="426" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网关（连</span><span style="font-family: 宋体;font-size: 14px">不同型</span><span style="font-family: 宋体;font-size: 14px">且协议差别较大的网络，协议转换）</span>              </p>          </td>      </tr>      <tr>          <td width="140" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">5<span style="font-family:宋体">网络层</span></span>              </p>          </td>          <td width="426" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">路由器（连接多个逻辑上分开的网络，路由选择）</span>              </p>          </td>      </tr>      <tr>          <td width="140" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">6<span style="font-family:宋体">数据链路层</span></span>              </p>          </td>          <td width="426" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网桥（分析帧地址）、交换机（多口网桥，<span style="font-family:Calibri">Mac</span><span style="font-family:宋体">地址表）</span></span>              </p>          </td>      </tr>      <tr>          <td width="140" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">7<span style="font-family:宋体">物理层</span></span>              </p>          </td>          <td width="426" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">中继器（扩大信号）、集线器<span style="font-family:Calibri">Hub(</span><span style="font-family:宋体">多路中继器</span><span style="font-family:Calibri">)</span></span>              </p>          </td>      </tr>  </tbody></table></li><li><p>传输介质：<br>有线介质：双绞线（最长100m,每端一RJ45插件），同轴电缆，光纤<br>无线介质：微波、红外线和激光、卫星通信</p></li><li><p>组建网络：<br>服务器、客户端、网络设备、通信介质、网络软件</p></li></ul><h2 id="三．网络协议"><a href="#三．网络协议" class="headerlink" title="三．网络协议"></a>三．网络协议</h2><h3 id="1-局域网协议：b-为bit，不是-字节byte"><a href="#1-局域网协议：b-为bit，不是-字节byte" class="headerlink" title="1. 局域网协议：b 为bit，不是 字节byte"></a>1. 局域网协议：b 为bit，不是 字节byte</h3><p>IEEE802.3 标准以太网（CSMA&#x2F;CD）,速度为 10Mbps,传输介质为同轴电缆<br>IEEE802.3u 快速以太网（CSMA&#x2F;CD）,速度为 100Mbps,传输介质为双绞线<br>IEEE802.3z 千兆以太网（CSMA&#x2F;CD）,速度为 1000Mbps,传输介质为同轴电缆<br>IEEE802.4 令牌总线网<br>IEEE802.5 令牌环网<br>无线局域网CSMA&#x2F;CA（载波监听多路访问方法）</p><h3 id="2-广域网协议："><a href="#2-广域网协议：" class="headerlink" title="2. 广域网协议："></a>2. 广域网协议：</h3><p>点对点协议PPP（拨号上网），数字用户线xDSL（ADSL上传网速和下载网速不对等，下载网速一般很快），数字专线DDN（长途的数据电路），帧中继（以帧为传输单位）</p><h3 id="3．TCP-IP协议族"><a href="#3．TCP-IP协议族" class="headerlink" title="3．TCP&#x2F;IP协议族"></a>3．TCP&#x2F;IP协议族</h3><ul><li><p>特性：<br>逻辑编址、路由选择、域名解析、错误检测和流量控制</p></li><li><p>3.1 TCP&#x2F;IP模型：<br>应用层：具体应用功能<br>传输层：应用程序间端口到端口的通信<br>网际层：又称IP层，处理机器间的通信，数据以组为单位<br>网络接口层协议：称为数据链路层，负责接收IP数据报，并把数据报通过选定的网络发送出去</p><table>  <tbody>      <tr style="height:19px" class="firstRow">          <td width="82" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">ISO<span style="font-family:宋体">模型</span></span></strong>              </p>          </td>          <td width="395" valign="top" colspan="5" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">TCP/IP<span style="font-family:宋体">协议</span></span></strong>              </p>          </td>          <td width="80" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p style="text-align:center">                  <strong><span style="font-family: 宋体;font-size: 14px">TCP/IP<span style="font-family:宋体">模型</span></span></strong>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">1<span style="font-family:宋体">应用层</span></span>              </p>          </td>          <td width="81" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">&nbsp;</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">文件传输</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">FTP</span>              </p>          </td>          <td width="81" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">远程登录</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">Telnet</span>              </p>          </td>          <td width="81" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">电子邮件</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">SMTP</span>              </p>          </td>          <td width="81" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网络文件</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">服务</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">NFS</span>              </p>          </td>          <td width="70" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网络管理</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">SNMP</span>              </p>          </td>          <td width="80" valign="top" rowspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">应用层</span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">2<span style="font-family:宋体">表示层</span></span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">3<span style="font-family:宋体">会话层</span></span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">4<span style="font-family:宋体">传输层</span></span>              </p>          </td>          <td width="395" valign="top" colspan="5" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p style="text-align:center">                  <span style="font-family: 宋体;font-size: 14px">TCP UDP</span>              </p>          </td>          <td width="80" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">传输层</span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">5<span style="font-family:宋体">网络层</span></span>              </p>          </td>          <td width="395" valign="top" colspan="5" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p style="text-align:center">                  <span style="font-family: 宋体;font-size: 14px">&nbsp;IP ICMP ARP RARP</span>              </p>          </td>          <td width="80" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网际层</span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">6<span style="font-family:宋体">数据链路层</span></span>              </p>          </td>          <td width="81" valign="top" rowspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">Ethernet</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">IEEE802.3</span>              </p>          </td>          <td width="81" valign="top" rowspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">FDDI</span>              </p>          </td>          <td width="81" valign="top" rowspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">Ethernet</span>              </p>              <p>                  <span style="font-family: 宋体;font-size: 14px">IEEE802.5</span>              </p>          </td>          <td width="81" valign="top" rowspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">ARCnet</span>              </p>          </td>          <td width="70" valign="top" rowspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">PPP/SLIP</span>              </p>          </td>          <td width="80" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">网络接口层</span>              </p>          </td>      </tr>      <tr>          <td width="82" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">7<span style="font-family:宋体">物理层</span></span>              </p>          </td>          <td width="91" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style="font-family: 宋体;font-size: 14px">硬件层</span>              </p>          </td>      </tr>  </tbody></table></li><li><p>3.2 网络接口层协议：PPP&#x2F;FDDI….</p></li><li><p>3.3 网际层协议</p><ul><li>IP：最重要很细的协议，无连接、不可靠</li><li>ICMP：因特网控制信息协议，用来检测网络通信是否通畅</li><li>ARP和RARP：地址解析协议，ARP将ip地转换为物理地址，RARP是将物理地址转换为IP地址</li></ul></li><li><p>3.4 传输层协议 TCP</p></li><li><p>3.5 传输层协议 UDP</p>  <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">UDP协议：不可靠连接，因为数据传输只管发送，不用对方确认，因此可能会有丢包现象，一般用于视频、音频数据传输</span><br><span class="line">TCP协议：可靠连接，因为有验证机制，每发送一个数据包，都要求对方回复确认，三次握手机制</span><br><span class="line">1.停止等待协议：TCP保证可靠传输的协议，就是发送完一个分组就停止发送，等待对方的确认，只有对方确认过，才发送下一个分组</span><br><span class="line">2.连续ARQ协议：TCP保证可靠传输的协议，发送方维持一个窗口，这个窗口有多个分组，窗口大小由接收方返回的WIN值决定，所以窗口是动态变化的，大大提高了通道利用率，并且采用累积确认的方式，对按序到达的最后一个分组发送确认</span><br><span class="line">3.滑动窗口协议：TCP流量控制协议，该协议允许发送方在停止并等待确认前发送多个数据分组，不用停下来等待确认，因此可以加速数据的传输还可以控制流量的问题</span><br></pre></td></tr></table></figure></li><li><p>3.6 应用层协议：</p><ul><li><p>可靠传输：基于TCP的FTP&#x2F;HTTP&#x2F;HTTPS&#x2F;SMTP&#x2F;POP3&#x2F;TELNET等</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">FTP：可靠的文本传输协议基于TCPP</span><br><span class="line">HTTP：超文本传输协议，用于上网，使用ssl加密后的安全网页协议为HTTPS基于TCP</span><br><span class="line">SMTP和POP3：邮件传输协议，邮件报文采用ASCII格式表示基于TCP</span><br><span class="line">Telnet：远程传输协议 基于TCP</span><br></pre></td></tr></table></figure></li><li><p>不可靠传输：基于UDP的TFTP&#x2F;SNMP&#x2F;DHCP&#x2F;DNS等</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">TFTP：不可靠的小文件传输协议 基于UDP</span><br><span class="line">SNMP：简单网络管理协议，必须以管理员的身份登录才能完成配置 基于UDP</span><br><span class="line">DHCP：动态分配IP地址协议，客户机/服务器模型，租约默认为8天，当租约过半时，客户机需要向DHCP服务器申请续约，当租约超过87.5%时，如果仍然没有和当初提供IP地址的DHCP服务器联系上，择开始联系其他DHCP服务器 基于UDP</span><br><span class="line">可以从DHCP服务器获取DHCP服务器IP，DNS服务器IP地址，默认网关IP</span><br><span class="line">DNS：域名解析协议，将域名解析为IP地址 基于UDP</span><br><span class="line">DNS服务器：维持ip地址对应的代表，层次结构为：本地域名服务器、权威域名服务器、顶级域名服务器、根域名服务器</span><br><span class="line">DNS递归查询，主机提出一个查询请求，本地服务器会一层一层的查询下去，直接找到满足查询请求的IP地址，再返回给主机，即问一次就得到最终结果</span><br><span class="line">DNS迭代查询：服务器收到一次请求，就回答一次，但是回答的不一定是最终地址，也可能是其他服务器的地址，需要客户机再次发出请求，直至问道最终结果</span><br><span class="line">主机箱本地域名服务器查询采用递归查询；本地域名服务器箱根域名服务器的查询通常采用迭代查询（依据的是域名服务器是否空闲）</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="四-Internet-及应用"><a href="#四-Internet-及应用" class="headerlink" title="四 Internet 及应用"></a>四 Internet 及应用</h2><h3 id="1．路由选择策略"><a href="#1．路由选择策略" class="headerlink" title="1．路由选择策略"></a>1．路由选择策略</h3><ul><li><p>静态路由选择</p><ul><li>不能根据网络流量和拓扑结构的变化来调整自身的路由表，也就不能找出最佳路由</li><li>固定式路由选择：每个网络节点存储一张表格，表格中每一项记录着对应某个目的下一节点或链路，当一个分组到达某节点时，该节点只要根据分组上的地址信息，便可以从固定的路由表中查出对应的目的节点及所应选择的下一节点。</li><li>洪泛式路由选择：又叫扩散法，一个分组路由源站发送到与其相邻的所有节点，最先到达目的节点的一个或若干个分组肯定经过了最短的路径，其主要应用在诸如军事网络等强壮性要求很高的场合</li><li>随机路由选择：一个分组只在与其相邻的节点中随机的选择一条转发</li></ul></li><li><p>动态路由选择</p><ul><li>节点的路由选择依靠网络当前的状态信息来决定，这种策略能较好地适应网络流量、拓扑结构的变化，有利于改善网络的性能。算法复杂，会增加网络的负担</li><li>分布式路由选择：①距离向量算法（各节点周期性的向所有相邻节点发送路由刷新报文）②链路状态算法（各节点独立计算最短通路、能够快速适应网络变化、交换的路由信息少，复杂难以实现）</li><li>集中式路由选择：有网络控制中心负责全网状态信息的收集、路由计算及最佳路由的实现。最简单的方法是将最新路由定期发送到网络中各节点上去。</li><li>混合式动态路由选择：将分布路由选择与集中路由选择、以及其它路由选择方法混合使用。</li></ul></li></ul><h3 id="2．IP地址"><a href="#2．IP地址" class="headerlink" title="2．IP地址"></a>2．IP地址</h3><ul><li>2.1 IPV4分类编址<br>格式：IP地址分四段，每段8位，共32位二进制数组成<br>逻辑上分为网络号和主机号（主机号全0或全1不能分配，是特殊地址）<table width="415">  <tbody>      <tr class="firstRow">          <td width="77" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">类别</span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;"></td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">网络号</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">主机号</span>              </p>          </td>      </tr>      <tr>          <td width="77" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">A<span style="font-family:宋体">类</span></span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">0.0.0.0-127.255.255.255</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">8<span style="font-family:宋体">位</span></span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">24<span style="font-family:宋体">位</span></span>              </p>          </td>      </tr>      <tr>          <td width="77" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">B<span style="font-family:宋体">类</span></span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">128.0.0.0-191.255.255.255</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">16<span style="font-family:宋体">位</span></span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">16<span style="font-family:宋体">位</span></span>              </p>          </td>      </tr>      <tr>          <td width="77" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">C<span style="font-family:宋体">类</span></span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">192.0.0.0-223.255.255.255</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">24<span style="font-family:宋体">位</span></span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">8<span style="font-family:宋体">位</span></span>              </p>          </td>      </tr>      <tr>          <td width="77" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">D<span style="font-family:宋体">类组播</span></span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">224.0.0.0-239.255.255.255</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;"></td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;"></td>      </tr>      <tr>          <td width="77" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">E<span style="font-family:宋体">类保留</span></span>              </p>          </td>          <td width="184" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">240.0.0.0-255.255.255.255</span>              </p>          </td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;"></td>          <td width="77" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;"></td>      </tr>  </tbody></table></li></ul><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ABC类规则划分为：网络号 + 主机号</span><br><span class="line">按照ABC类规则，将主机号拆分为：子网号+主机号 用于划分子网</span><br><span class="line">子网：网络号+子网号+主机号</span><br><span class="line">网络号全为1，主机号全为0，这样的地址为子网掩码</span><br><span class="line">注意：子网号可以为全0或全1，主机号不能为全0或全1，因此主机需要-2，而子网不用</span><br></pre></td></tr></table></figure><p><img src="https://oss.lingkongstudy.com.cn/rjsj/10-2.png" alt="软件设计师教程知识点整理"></p><ul><li><p>2.2 IPV4无分类编址<br>格式：IP地址&#x2F;网络号<br>示例：128.168.0.11&#x2F;20 标识IP地址为128.168.0.11，其网络号占20位，因此主机号占32-20&#x3D;12位，也可以划分子网。</p><table width="568">  <tbody>      <tr class="firstRow">          <td width="284" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">IP</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">说明</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">127<span style="font-family:宋体">网段</span></span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">回播地址</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">网络号全<span style="font-family:Calibri">0</span><span style="font-family:宋体">地址</span></span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">当前子网中的主机</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">全<span style="font-family:Calibri">1</span><span style="font-family:宋体">地址</span></span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">本地子网中的广播</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">主机号全<span style="font-family:Calibri">1</span><span style="font-family:宋体">地址</span></span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">特定子网中的广播</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">10.0.0.0/8</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">10.0.0.0-10.255.255.254</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">172.16.0.0/12</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">172.16.0.1-172.31.255.254</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">192.168.0.0/16</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">192.168.0.1-192.168.255.254</span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">169.254.0.0</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">保留地址，用于<span style="font-family:Calibri">DHCP</span><span style="font-family:宋体">失效（</span><span style="font-family:Calibri">win</span><span style="font-family:宋体">）</span></span>              </p>          </td>      </tr>      <tr>          <td width="284" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">0.0.0.0</span>              </p>          </td>          <td width="284" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">              <p>                  <span style=";font-family:宋体;font-size:14px">保留地址，用于<span style="font-family:Calibri">DHCP</span><span style="font-family:宋体">失效（</span><span style="font-family:Calibri">Linux</span><span style="font-family:宋体">）</span></span>              </p>          </td>      </tr>  </tbody></table></li><li><p>2.3 IPV6<br>主要是为了解决IPv4地址数量不够用而设计的<br>特性：①地址长度128位，地址空间增大了2^96倍<br>②灵活的IP报文头部格式，使用一系列固定格式的扩展头部取代了IPv4中可变长度的选项字段。选项部分出现格式也有所变化，使路由器可以简单撸过选项而不做任何处理，加快了报文处理速度<br>③简化了报文头部格式，加快报文转发，提高了吞吐量<br>④提高安全性，身份认证和隐私权是v6的关键特性<br>⑤支持更多的服务类型<br>⑥允许协议继续演变，增加新的功能，使之适应未来技术的发展</p></li><li><p>2.4 IPV4 过渡到 IPV6：<br>①双协议栈：主机同时运行IPV4和IPV6两套协议栈，同时支持两套协议<br>②隧道技术：用于在IPV4网络之上连接IPV6的站点，站点可以是一个或多个主机<br>③翻译技术：利用转换网关来在IPV4和IPV6网络之间转换报头地址，同时根据协议不同做对应的语义翻译，从而使纯IPV4和纯IPV6站点之间能够透明通用</p></li></ul><h3 id="3-常用应用"><a href="#3-常用应用" class="headerlink" title="3. 常用应用"></a>3. 常用应用</h3><ul><li><p>3.1 层次化网络模型从下至上分为三层：<br>接入层：功能单一，向本地网段提供用户接入<br>汇聚层：功能多样，可以有多层，包括网络访问策略、数据包的处理、过滤、地址等中间操作<br>核心层：功能单一，只负责高速的数据交换</p></li><li><p>3.2 网络地址翻译NAT：<br>公司内容有很多电脑，但是使用少量IP地址访问因特网<br>大量内网IP地址集合 映射到 少量因特网IP地址集合就称为NAT<br>可以大大减少IP地址的使用量</p></li><li><p>3.3 默认网关：<br>一台主机可以有多个网关。默认网关是指找不到可用的网关，九堡数据包发给默认指定的网关，由这个网关来处理数据包。现在主机使用的网关一般指的就是默认网关<br>默认网关的IP地址必须与本机IP地址在同一网段内，即同网络号</p></li><li><p>3.4 冲突域和广播域：<br>路由器可以阻断广播域和冲突域；交换机只能阻断冲突域<br>路由器下可以划分多个广播域和多个冲突域；一个交换机整体是一个广播域，可划分多个冲突域<br>物理层设备集线器下整体作为一个冲突域和一个广播域</p></li><li><p>3.5 虚拟局域网VLAN：<br>VLAN是建立在物理网络基础上的一种逻辑子网。通过虚拟技术，把局域网（LAN）划分成好几个不同的VLAN，而且使得网络接入不再局限于物理地址上的约束。VLAN内部可以相互沟通，不过VLAN之间不能直接沟通，必须经过特殊设置的路由器才可以。<br>  这样做的实际意义主要有两个。一个是通过分割，在较大的LAN中创建不同的VLAN，可以抵御广播风暴的影响，同时可以多设置防火墙来大大提高网络的安全性。另外一个是有助于提高工作效率和接入速度。<br>虚拟专用网VPN:<br>是在公用网络上建立专用网络的技术，其之所以成为虚拟网，主要是因为整个VPN网络的任意两个节点之间的网络并没有传统专用所需的端到端的物理链路，而是架构在用公用网络服务商所提供的网络平台，如Internet、atm（异步传输模式）、frame relay等之上的逻辑网络，用户数据在路基链路中传输。</p></li></ul><h2 id="六．网络安全"><a href="#六．网络安全" class="headerlink" title="六．网络安全"></a>六．网络安全</h2><table width="443">    <tbody>        <tr class="firstRow">            <td width="135" valign="top" rowspan="3" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">Pgp,HTTPS</span>                </p>            </td>            <td width="129" valign="top" rowspan="4" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">SSL<span style="font-family:宋体">协议</span></span>                </p>            </td>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">应用层</span>                </p>            </td>        </tr>        <tr>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">表示层</span>                </p>            </td>        </tr>        <tr style="height:19px">            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">会话层</span>                </p>            </td>        </tr>        <tr>            <td width="135" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">TLS &nbsp;&nbsp;SET</span>                </p>            </td>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">传输层</span>                </p>            </td>        </tr>        <tr style="height:21px">            <td width="264" valign="top" colspan="2" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">防火墙 <span style="font-family:Calibri">IPSec</span></span>                </p>            </td>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">网络层</span>                </p>            </td>        </tr>        <tr>            <td width="264" valign="top" colspan="2" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">链路加密 <span style="font-family:Calibri">PPTP L2TP</span></span>                </p>            </td>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">数据链路层</span>                </p>            </td>        </tr>        <tr>            <td width="264" valign="top" colspan="2" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">隔离 屏蔽</span>                </p>            </td>            <td width="179" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">物理层</span>                </p>            </td>        </tr>    </tbody></table><ul><li>SSL协议用于网银交易</li><li>用户和服务器的合法性验证</li><li>加密数据以隐藏被传输的数据</li><li>保护数据的完整性</li></ul><h3 id="1．防火墙"><a href="#1．防火墙" class="headerlink" title="1．防火墙"></a>1．防火墙</h3><ul><li><p>概念：是在内部网络和外部因特网之间增加的一道安全防护措施，它认为内部网络是安全的，外部网络是不安全的。分为网络级防火墙和应用级防火墙，两级之间的安全手段如下：</p></li><li><p>网络技术防火墙：<br>层次低，但是效率高，使用包过滤及状态监测手段，若异常过滤掉，不与内网通信，不拆分包</p></li><li><p>应用级防火墙：<br>层次高，效率低，拆分包，具体检查里面的数据，会消耗大量的时间，但安全性高</p></li><li><p>屏蔽子网方法：<br>在内网和外网之间增加一个屏蔽子网，称为DMZ非军事区，内网和外网通信必须多经过一道防火墙，屏蔽子网中一般存放的是邮件服务器、WEB服务器这些内外网数据交互服务器，可以屏蔽掉一些内部攻击，但是无法全部屏蔽内部攻击</p></li></ul><h3 id="2．计算机的病毒和木马"><a href="#2．计算机的病毒和木马" class="headerlink" title="2．计算机的病毒和木马"></a>2．计算机的病毒和木马</h3><ul><li>病毒：编制或者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码<br>病毒具有传染性、隐蔽性、潜伏性、破坏性、针对性、衍生性、寄生性、未知性</li><li>木马：是一种后门程序，被黑客用作控制远程计算机的工具，隐藏在被控制电脑上的一个小程序监控电脑一切操作并盗取信息<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">常见种类：</span><br><span class="line">系统引导型病毒</span><br><span class="line">文件外壳型病毒</span><br><span class="line">目录性病毒</span><br><span class="line">蠕虫病毒（感染exe文件）：爱虫病毒、熊猫烧香、罗密欧与朱丽叶、恶鹰、尼姆达、冲击波</span><br><span class="line">木马：QQ消息尾巴木马，特洛伊木马</span><br><span class="line">宏病毒（感染WORD，EXCLE等文件中的宏变量）：美丽沙、台湾1号</span><br><span class="line">CIH病毒：史上唯一破坏硬件的病毒</span><br><span class="line">红色代码：蠕虫病毒+木马</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第11章 标准化和软件知识产权基础知识</title>
      <link href="/posts/153feb95/"/>
      <url>/posts/153feb95/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-标准化和软件知识产权基础知识"><a href="#第11章-标准化和软件知识产权基础知识" class="headerlink" title="第11章 标准化和软件知识产权基础知识"></a>第11章 标准化和软件知识产权基础知识</h1><h2 id="一-知识产权的基础知识"><a href="#一-知识产权的基础知识" class="headerlink" title="一.知识产权的基础知识"></a>一.知识产权的基础知识</h2><h3 id="1-知识产权的保护期限"><a href="#1-知识产权的保护期限" class="headerlink" title="1. 知识产权的保护期限"></a>1. 知识产权的保护期限</h3><ul><li>当以单位为主体时，是没有署名权和修改权的，因为属于集体<br><img src="https://oss.lingkongstudy.com.cn/rjsj/11-1.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-知识产权人的确定"><a href="#2-知识产权人的确定" class="headerlink" title="2. 知识产权人的确定"></a>2. 知识产权人的确定</h3><ul><li><p>著作权和专利权 在 单位和个人情况下的归属<br><img src="https://oss.lingkongstudy.com.cn/rjsj/11-2.png" alt="软件设计师教程知识点整理"></p></li><li><p>单位和委托的区别在于，当合同中未确定著作权归属是，著作权默认归于单位，而委托创作中，著作权默认过属于创作方个人<br><img src="https://oss.lingkongstudy.com.cn/rjsj/11-3.png" alt="软件设计师教程知识点整理"></p></li></ul><h3 id="3-侵权判定"><a href="#3-侵权判定" class="headerlink" title="3. 侵权判定"></a>3. 侵权判定</h3><ul><li><p>个人未发表的东西被抢先发表属于侵权<br><img src="https://oss.lingkongstudy.com.cn/rjsj/11-4.png" alt="软件设计师教程知识点整理"></p></li><li><p>只要不进行传播、公开发表、盈利都不算侵权，具体如下：、<br><img src="https://oss.lingkongstudy.com.cn/rjsj/11-5.png" alt="软件设计师教程知识点整理"></p></li></ul><h3 id="4-相关法律名词解释"><a href="#4-相关法律名词解释" class="headerlink" title="4. 相关法律名词解释"></a>4. 相关法律名词解释</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/11-6.png" alt="软件设计师教程知识点整理"></p><h3 id="二-标准化基础知识"><a href="#二-标准化基础知识" class="headerlink" title="二 标准化基础知识"></a>二 标准化基础知识</h3><h3 id="1-标准的分类"><a href="#1-标准的分类" class="headerlink" title="1. 标准的分类"></a>1. 标准的分类</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/11-7.png" alt="软件设计师教程知识点整理"></p><h3 id="2-标准的编号"><a href="#2-标准的编号" class="headerlink" title="2. 标准的编号"></a>2. 标准的编号</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/11-8.png" alt="软件设计师教程知识点整理"></p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第12章 软件系统分析与设计</title>
      <link href="/posts/209a1cae/"/>
      <url>/posts/209a1cae/</url>
      
        <content type="html"><![CDATA[<h1 id="第12章-软件系统分析与设计"><a href="#第12章-软件系统分析与设计" class="headerlink" title="第12章 软件系统分析与设计"></a>第12章 软件系统分析与设计</h1><h2 id="二-数据库分析和设计"><a href="#二-数据库分析和设计" class="headerlink" title="二 数据库分析和设计"></a>二 数据库分析和设计</h2><h3 id="1-数据库的设计步骤"><a href="#1-数据库的设计步骤" class="headerlink" title="1. 数据库的设计步骤"></a>1. 数据库的设计步骤</h3><table width="635">    <tbody>        <tr style="height:43px" class="firstRow">            <td width="173" valign="top" colspan="5" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">需求分析阶段</span>                </p>            </td>            <td width="136" valign="top" colspan="4" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">概念结构设计阶段</span>                </p>            </td>            <td width="148" valign="top" colspan="4" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">逻辑结构设计阶段</span>                </p>            </td>            <td width="69" valign="top" colspan="2" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">物理设计阶段</span>                </p>            </td>            <td width="109" valign="top" colspan="3" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="text-align:center">                    <span style=";font-family:宋体;font-size:14px">数据库实施</span>                </p>            </td>        </tr>        <tr style="height:240px">            <td width="35" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">调查机构情况</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">熟悉业务活动</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">明确用户需求</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">分析系统功能</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">编写分析报告</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">抽象数据</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">设计局部视图</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">合并取消冲突</span>                </p>            </td>            <td width="32" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">修改重构消除冗余</span>                </p>            </td>            <td width="37" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">转化为数据模型</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">关系规范化</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">模式优化</span>                </p>            </td>            <td width="41" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">设计用户子模型</span>                </p>            </td>            <td width="36" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">确定数据库物理模型</span>                </p>            </td>            <td width="32" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">评价数据库物理模型</span>                </p>            </td>            <td width="40" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">定义数据库</span>                </p>            </td>            <td width="35" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">数据库装入<span style="font-family:Calibri">/</span><span style="font-family:宋体">编写应用程序</span></span>                </p>            </td>            <td width="34" valign="top" style="padding: 0px 7px; border-left: none; border-right-width: 1px; border-right-color: windowtext; border-top-width: 1px; border-top-color: windowtext; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p style="margin-right:8px;margin-left:8px">                    <span style=";font-family:宋体;font-size:14px">数据库试运行</span>                </p>            </td>        </tr>    </tbody></table><p>    <br></p>### 2. 实施与维护]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第1章 计算机系统知识</title>
      <link href="/posts/190ca395/"/>
      <url>/posts/190ca395/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-计算机系统知识"><a href="#第1章-计算机系统知识" class="headerlink" title="第1章 计算机系统知识"></a>第1章 计算机系统知识</h1><h2 id="一-计算机硬件组成"><a href="#一-计算机硬件组成" class="headerlink" title="一 计算机硬件组成"></a>一 计算机硬件组成</h2><h4 id="1-五大组成部件"><a href="#1-五大组成部件" class="headerlink" title="1. 五大组成部件"></a>1. 五大组成部件</h4><ul><li>运算器</li><li>控制器</li><li>存储器（内存、外存、cache）</li><li>输入设备</li><li>输出设备<br>CPU &#x3D; 运算器 + 控制器<br>主机 &#x3D; CPU + 存储器</li></ul><h4 id="2-中央处理器-CPU"><a href="#2-中央处理器-CPU" class="headerlink" title="2. 中央处理器 CPU"></a>2. 中央处理器 CPU</h4><ul><li><p>组成：运算器、控制器、寄存器组、内部总线</p></li><li><p>功能：程序控制，操作控制，时间控制，数据处理功能</p></li><li><p>运算器组成（执行算数和逻辑运算，并进行逻辑测试，如与或非比较等）</p><ul><li>算数逻辑单元ALU：实现对数据的算数和运算逻辑</li><li>累积寄存器AC：运算结果和源操作数的存放区</li><li>数据缓冲寄存器DR：暂时存放内存指令和数据</li><li>状态条件寄存器PSW：保存运行结果的条件码内容</li></ul></li><li><p>控制器组成：（控制整个CPU的工作，最为重要，包括程序控制、时序控制等）</p><ul><li>指令寄存器IR：暂存CPU执行指令</li><li>程序计数器PC：存放指令执行地址</li><li>地址寄存器AR：保存当前CPU所访问内存地址</li><li>指令译码器ID：分析指令操作码<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d1-1.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h4 id="3-存储器"><a href="#3-存储器" class="headerlink" title="3. 存储器"></a>3. 存储器</h4><ul><li>存储器结构（速度从高到低）：寄存器 – 高速缓存Cache – 主存 – 外存</li></ul><h2 id="二-计算机体系结构"><a href="#二-计算机体系结构" class="headerlink" title="二 计算机体系结构"></a>二 计算机体系结构</h2><h4 id="1-计算机体系结构分类"><a href="#1-计算机体系结构分类" class="headerlink" title="1. 计算机体系结构分类"></a>1. 计算机体系结构分类</h4><ul><li>Flynn分类法<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d1-4.png" alt="软件设计师教程知识点整理"></li></ul><h4 id="2-指令系统"><a href="#2-指令系统" class="headerlink" title="2. 指令系统"></a>2. 指令系统</h4><ul><li>复杂指令系统 CISC ： 兼容性强，长度可变，有微程序实现</li><li>精简指令系统 RISC：指令少，使用频率接近，主要依靠硬件实现<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d1-2.png" alt="软件设计师教程知识点整理"></li></ul><h4 id="3-指令流水线原理"><a href="#3-指令流水线原理" class="headerlink" title="3. 指令流水线原理"></a>3. 指令流水线原理</h4><ul><li><p>RISC流水线技术</p><ul><li>1)超流水线（时间换空间）</li><li>2)超标量（空间换时间）</li><li>3)超长指令字VLIM(执行多条指令，发挥软件作用)<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d1-3.png" alt="软件设计师教程知识点整理"></li></ul></li><li><p>流水线时间计算：</p>  <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">设：总指令数为 n ; 单条指令总执行时间为 t单 ; 单条指令在流水线中耗时时间最长段时间 t周</span><br><span class="line">流水线周期： 指令执行时耗时最长的那个时间段 公式为： t周</span><br><span class="line">流水线执行总时间： 单条指令总执行时间 + （指令数 - 1） * 流水线周期 公式为： t总 = t单 + （n-1）* t周</span><br><span class="line">流水线吞吐率： 总指令数 / 流水线执行总时间 公式为：( n / t总 ) = ( n / t单 + （n-1）* t周 )</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-总线结构"><a href="#3-总线结构" class="headerlink" title="3. 总线结构"></a>3. 总线结构</h4><ul><li>按功能分：总线的分类：数据总线（DB），地址总线（AB），控制总线（CB）</li><li>按位置分：<ul><li>内部总线（处理器内部通信总线）</li><li>外部总线（设备一级的总线，计算机外部设通信的总线）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第2章 程序设计语言基础知识</title>
      <link href="/posts/8f4dd89e/"/>
      <url>/posts/8f4dd89e/</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-程序设计语言基础知识"><a href="#第2章-程序设计语言基础知识" class="headerlink" title="第2章 程序设计语言基础知识"></a>第2章 程序设计语言基础知识</h1><h2 id="一-程序设计语言概述"><a href="#一-程序设计语言概述" class="headerlink" title="一  程序设计语言概述"></a>一  程序设计语言概述</h2><ul><li>程序设计语言是为了书写计算机程序而人为设计的符号语言，用于对计算过程进行描述、组织和推导</li></ul><h3 id="1-各语言特点"><a href="#1-各语言特点" class="headerlink" title="1. 各语言特点"></a>1. 各语言特点</h3><ul><li>低级语言：机器语言（计算机硬件只能识别0和1的指令程序），汇编语言</li><li>高级语言：功能更强，抽象级别更高，与人们使用的自然语言比较接近</li></ul><table width="568">    <tbody>        <tr class="firstRow">            <td width="568" valign="top" style="padding: 0px 7px; border-width: 1px; border-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Fortran<span style="font-family:宋体">语言，科学计算，执行效率高</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Pascal<span style="font-family:宋体">语言，为教学而开发的，表达能力强，</span><span style="font-family:Calibri">delphi</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C<span style="font-family:宋体">语言，指针操作能力强，高效</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Lisp<span style="font-family:宋体">语言，函数式程序语言，符号处理，人工智能</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C++<span style="font-family:宋体">语言，面向对象，高效</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Java<span style="font-family:宋体">语言，面向对象，中间代码，跨平台</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">C#<span style="font-family:宋体">语言，面向对象，中间代码，</span><span style="font-family:Calibri">.NET</span></span>                </p>            </td>        </tr>        <tr>            <td width="568" valign="top" style="padding: 0px 7px; border-left-width: 1px; border-left-color: windowtext; border-right-width: 1px; border-right-color: windowtext; border-top: none; border-bottom-width: 1px; border-bottom-color: windowtext;">                <p>                    <span style=";font-family:宋体;font-size:14px">Prolog<span style="font-family:宋体">语言，逻辑推理，间接性，表达能力强，数据库和专家系统</span></span>                </p>            </td>        </tr>    </tbody></table><h3 id="2-解释和编译"><a href="#2-解释和编译" class="headerlink" title="2. 解释和编译"></a>2. 解释和编译</h3><ul><li>都是将高级语言翻译成计算机硬件认识的及其语言。</li><li>编译：生成独立的可执行文件，直接运行，运行时无法控制源程序，效率高。</li><li>解释：不生成可执行文件，可以逐条解释执行，用于调试模式，可以控制源程序，因为还需要控制程序，因此执行速度慢，相对于编译效率低。</li></ul><h3 id="3-程序语言组成"><a href="#3-程序语言组成" class="headerlink" title="3. 程序语言组成"></a>3. 程序语言组成</h3><ul><li>语法（一组规则）</li><li>语义（语法成分的含义）</li><li>语用（构成语言的各个记号和使用者的关系）</li></ul><h2 id="二．程序设计语言的基本成分"><a href="#二．程序设计语言的基本成分" class="headerlink" title="二．程序设计语言的基本成分"></a>二．程序设计语言的基本成分</h2><h3 id="1-数据成分"><a href="#1-数据成分" class="headerlink" title="1.  数据成分"></a>1.  数据成分</h3><p>是一种程序设计语言的数据和数据类型，数据分为常量（程序运行时不可改变）、变量（可以改变）、全局量（存储空间在静态数据区分配）、局部量（存储空间在堆栈区分配）</p><h3 id="2-数据类型有："><a href="#2-数据类型有：" class="headerlink" title="2.  数据类型有："></a>2.  数据类型有：</h3><p>整型、字符型、双精度、单精度浮点型、布尔型等</p><h3 id="3-运算成分："><a href="#3-运算成分：" class="headerlink" title="3.  运算成分："></a>3.  运算成分：</h3><p>指明允许使用的运算符号即运算规则，包括算数运算、逻辑运算、关系运算、位运算等。</p><h3 id="4-控制成分："><a href="#4-控制成分：" class="headerlink" title="4.  控制成分："></a>4.  控制成分：</h3><p>指明语言允许标书的控制结构。包括顺序结构、选择结构、循环结构（初始化+循环体+循环条件）<br><img src="https://oss.lingkongstudy.com.cn/rjsj/2-2.png" alt="软件设计师教程知识点整理"></p><h3 id="5-传输成分："><a href="#5-传输成分：" class="headerlink" title="5.  传输成分："></a>5.  传输成分：</h3><p>指明语言允许的数据传输方式。如：赋值处理、数据的输入输出等</p><h3 id="6-函数："><a href="#6-函数：" class="headerlink" title="6.  函数："></a>6.  函数：</h3><p>C程序有一个或多个函数组成，每个函数都有一个名字，其中有且仅有一个名字为main函数作为运行时的起点。函数式程序模块的主要成分，是一段具有独立功能的程序。函数使用涉及三个概念：函数定义、函数声明（先声明后使用）、函数调用</p><h3 id="7-调用："><a href="#7-调用：" class="headerlink" title="7 调用："></a>7 调用：</h3><ul><li>传值调用：将实参的值传递给形参，形参的改变不会导致调用点所传的实参的值改变。实参可是是合法的变量、常量、表达式</li><li>传址调用：即引用调用，将实参的地址传值给形参，即相当于实参存储单元的地址引用，因此其值改变的同时就改变了实参的值，实参不能为常-量，只能是合法的变量和表达式。</li><li>因此，在编程时，要改变参数值，就传址，不改变，就传值</li></ul><h2 id="三．编译程序基本原理"><a href="#三．编译程序基本原理" class="headerlink" title="三．编译程序基本原理"></a>三．编译程序基本原理</h2><h3 id="1-功能："><a href="#1-功能：" class="headerlink" title="1.  功能："></a>1.  功能：</h3><p>是把高级语言书写的程序翻译成汇编语言或机器语言<br>分为6个阶段：</p><ul><li>1.词法分析：对源程序字符进行扫描根据构词规则识别单词（也称单词符号或符号）</li><li>2.语法分析：逻辑阶段，根据识别的单词组合成各类语法短语，如：程序，语句，表达式等，分析判断源程序在结构是否正确</li><li>3.语义分析：逻辑阶段，对结构上正确的源程序进行上下文有关性质的审查。如：类型匹配、除法除数不为0等。分为静态语义错误（编译阶段能够发现）、动态语义错误（运行时能发现）</li><li>4.中间代码和目标代码生成：中间代码是语义分析产生的需要经过优化链接，最终生成可执行的目标代码。引入中间代码的目的是进行与机器无关的代码优化处理。常用的中间代码有后缀式（逆波兰式）、三元式（三地址码）、四元式和树等形式。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/2-2.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-文法定义："><a href="#2-文法定义：" class="headerlink" title="2.  文法定义："></a>2.  文法定义：</h3><ul><li><p>2.1 形式文法四元组G&#x3D;（V,T,S,P）<br>  1.S: 文法开始符号<br>  2.V: 不是语言组成部分，可理解为占位符；非终结符：能够推导出其他元素<br>  3.P：产生式。用终结符替代非终结符的规则；即非终结符推导出终结符的公式<br>  4.T: 终结符，语言组成部分，是最终结果；不能推导出其他元素</p></li><li><p>2.2 闭包：如下图，一般闭包可以为0个的情况代付运算<br><img src="https://oss.lingkongstudy.com.cn/rjsj/2-4.png" alt="软件设计师教程知识点整理"></p></li><li><p>2.3 文法类型：<br><img src="https://oss.lingkongstudy.com.cn/rjsj/2-5.png" alt="软件设计师教程知识点整理"></p><ul><li>1型 -》 语义分析（上下文有关）</li><li>2型 -》 语法分析（上下文无关）</li></ul></li></ul><h2 id="四．正规式"><a href="#四．正规式" class="headerlink" title="四．正规式"></a>四．正规式</h2><p><img src="https://oss.lingkongstudy.com.cn/rjsj/2-6.png" alt="软件设计师教程知识点整理"></p><h2 id="五．有限自动机"><a href="#五．有限自动机" class="headerlink" title="五．有限自动机"></a>五．有限自动机</h2><p><img src="https://oss.lingkongstudy.com.cn/rjsj/2-7.png" alt="软件设计师教程知识点整理"></p><h3 id="例：如下图：S-开始，ACB转换，F-两个圈是最终结果"><a href="#例：如下图：S-开始，ACB转换，F-两个圈是最终结果" class="headerlink" title="例：如下图：S 开始，ACB转换，F 两个圈是最终结果"></a>例：如下图：S 开始，ACB转换，F 两个圈是最终结果</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/2-8.png" alt="软件设计师教程知识点整理"></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">S输入1，得到A输入0 得到F</span><br><span class="line">S输入1，得到A输入1 ,得到C输入0,1 得到F</span><br><span class="line">S输入0，得到B输入0 得到F</span><br><span class="line">S输入0，得到B输入1，得到C输入0,1 得到F</span><br><span class="line">每一条线路都是唯一的，得出此图为确定有限自动机</span><br></pre></td></tr></table></figure><ul><li><p>确定有限自动机：输入同一个值，得出的后继是唯一的</p></li><li><p>不确定的有限自动机：输入同一个值，得出多个后继,下面例子是不确定的</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">例：S输入1，得到B</span><br><span class="line">S输入1，得到A</span><br></pre></td></tr></table></figure></li></ul><h2 id="六．语法分析方法"><a href="#六．语法分析方法" class="headerlink" title="六．语法分析方法"></a>六．语法分析方法</h2><h3 id="1-自上而下语法分析："><a href="#1-自上而下语法分析：" class="headerlink" title="1. 自上而下语法分析："></a>1. 自上而下语法分析：</h3><p>最左推导，从左至右。给定文法G和源程序串r,从G的开始符号出S出发，通过反复使用产生式对举行中的非终结符进行替换（推导），逐步推出r<br>递归下降：利用函数之间的递归调用模拟语法树自上而下的构造过程，是一种自上而下的语法分析方法</p><h3 id="2-自下而上语法分析："><a href="#2-自下而上语法分析：" class="headerlink" title="2. 自下而上语法分析："></a>2. 自下而上语法分析：</h3><p>最右推导，从右至左<br>移进-归约思想：设置一个栈，将输入符号逐个移进栈中，栈顶形成某产生式的又不时，就用左部去替换，称为归约。从右部推导出左部，是一种自下而上的语法分析方法</p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第3章 数据结构</title>
      <link href="/posts/725d6812/"/>
      <url>/posts/725d6812/</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-数据结构"><a href="#第3章-数据结构" class="headerlink" title="第3章 数据结构"></a>第3章 数据结构</h1><h2 id="一-线性结构"><a href="#一-线性结构" class="headerlink" title="一.线性结构"></a>一.线性结构</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>每个元素最多只有一个出度和一个入度,表现为一条线装.线性表按照存储范式分为顺序表和链表.</li></ul><h3 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2. 存储结构"></a>2. 存储结构</h3><ul><li>顺序存储: 用一组地址联系度的存储单元一次存储线性表中的数据元素,使得逻辑上相邻的元素物理上也相邻</li><li>链式存储: 存储各数据元素的结点的地址并不要求是连续的,数据元素逻辑上相邻,物理上分开</li></ul><h3 id="3-线性表"><a href="#3-线性表" class="headerlink" title="3. 线性表"></a>3. 线性表</h3><ul><li><p>顺序存储和链式存储的对比<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-1.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-2.png" alt="软件设计师教程知识点整理"></p></li><li><p>空间性能: 因为链表还要存储指针,所以有空间浪费的情况,因此密度小与顺序存储,因为可以动态改变容量分配更优化</p></li><li><p>时间方面: 因为指针的存在,每次查找需要耗费更多的时间,因此读取和查找顺序表更优,但是删除和插入因为顺序表每次操作完后需要依次前移或后移,因此链式更优</p></li></ul><h3 id="4-单链表-线性表的一种"><a href="#4-单链表-线性表的一种" class="headerlink" title="4. 单链表(线性表的一种)"></a>4. 单链表(线性表的一种)</h3><ul><li>单链表的插入和删除<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-3.png" alt="软件设计师教程知识点整理"><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">上图中p所执行的节点后插入s指向的节点,操作为:(像是变量赋值)</span><br><span class="line">s-&gt;next = p -&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">同理,在单链表中删除p所指向节点的后继节点q时,操作为:</span><br><span class="line">p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">free(q)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-栈和队列"><a href="#5-栈和队列" class="headerlink" title="5. 栈和队列"></a>5. 栈和队列</h3><ul><li><p>队列: 先进先出,分队尾和队头</p></li><li><p>栈: 先进后出,只有栈顶能进出<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-4.png" alt="软件设计师教程知识点整理"></p></li><li><p>循环队列: 当指针指向第一个元素,尾指针指向最后一个元素的下一个位置,因此队列空时:head&#x3D;tail,队列满时:head&#x3D;tail,这样就无法区分了.因此队列少存一个元素,这样队列满时:tail+1&#x3D;head.而考虑是循环队列,必须除以最大元素数来取余数,即(tail+1)%size&#x3D;head.</p></li><li><p>循环队列长度公式为:(Q.tail-Q.head)%size</p></li><li><p>优先队列: 元素被赋予优先级.当访问元素时,具有最高优先级的元素最先删除.使用堆来存储,因为其不是按照元素进队列的顺序决定的.</p></li></ul><h3 id="6-串"><a href="#6-串" class="headerlink" title="6. 串"></a>6. 串</h3><p>字符串是一种特殊的线性表,其数据元素都为字符<br>子串: 长度为0的字符串,没有任何字符.<br>空格串: 有一个或多个空格组成的串,空格是空白字符串,占一个字符长度<br>子串: 串中任意长度的连续字符构成的序列成为子串.含有子串的串为主串,空串是任意串的子串<br>串的模式匹配算法: 子串的定位操作,用于查找子串在串中第一次出现的位置的算法.<br>基本的模式匹配算法: 也称为布鲁特一福斯算法,子串从头依次开始匹配,直到匹配成功就称为子串<br>KMP算法: 是对基本模式匹配算法的改进: 每当匹配过程中出现相比较的字符不相等时,不需要回溯主串的字符位置指针,而是利用已经得到的”部分匹配”结果将模式串向有”滑动”尽可能远的距离,再继续比较.</p><h3 id="7-数组"><a href="#7-数组" class="headerlink" title="7. 数组"></a>7. 数组</h3><ul><li>数组是定长线性表的扩展,N维数组是一个”同构”的数据结构,其每个数据元素类型相同,结构一致<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-5.png" alt="软件设计师教程知识点整理"><br>可以表示为行向量形式或者列向量形式线性表,单个关系最多只有一个前驱和一个后继,本质是线性的.</li><li>数组结构特点: 元素数目固定,元素类型相同,下标关系具有上下界的约束且有下标序列一般不做插入和删除运算,适用于顺序结构</li><li>数组存储地址计算: 假设每个元素占用存储长度len,起始地址a<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-6.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="8-矩阵"><a href="#8-矩阵" class="headerlink" title="8. 矩阵"></a>8. 矩阵</h3><ul><li>特殊矩阵: 矩阵中的元素(或非0的元素)的分布有一定的规律.常见的特殊矩阵有对称矩阵,三角矩阵,对角矩阵</li><li>稀疏矩阵: 在一个矩阵中,若非零元素的个数远远少于零元素个数,且非零元素的分布没有规律.</li><li>存储方式为三元组结构,即存储每个非零元素的(行,列,值)<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-7.png" alt="软件设计师教程知识点整理"></li></ul><h2 id="二-广义表"><a href="#二-广义表" class="headerlink" title="二.广义表"></a>二.广义表</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念:"></a>1. 概念:</h3><p>广义表是线性表的推广,是由0个或多个单元素或字表组成的有限序列.</p><h3 id="2-广义表与线性表的区别"><a href="#2-广义表与线性表的区别" class="headerlink" title="2. 广义表与线性表的区别:"></a>2. 广义表与线性表的区别:</h3><ul><li>线性表的元素都是结构上不可分得单元素,而广义表的元素即可以单元素,也可以是有结构的表.</li><li>广义表一般记为: LS&#x3D;(a1,a2,a3,…..an)</li><li>广义表中,LS 是表名,ai是表元素,它可以是子表,也可以是单元素.</li><li>n是广义表的长度,n&#x3D;0的广义表为空表;而递归意义的重数就是广义表的深度,即定义中包含括号的重数(单边括号的个数, 原子的深度是0, 空表的深度为1 )</li><li>head()取表头:<br>可以是第一个表元素,也可以是子表也可以是单元素</li><li>tail()取表尾:<br>除了第一个表元素,其它所有表元素构成的表称为表尾.非空广义表的表尾必定是一个表,即使表尾是单元素</li></ul><h2 id="三-树"><a href="#三-树" class="headerlink" title="三.树"></a>三.树</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念:"></a>1. 概念:</h3><ul><li>树结构是一种非线性结构,树中的每一个数据元素可以有两个或两个以上的直接后继元素,用来描述层次结构关系</li><li>树是n个节点的有限集合(n&gt;&#x3D;0),单n&#x3D;0时称为空树,在任一颗费空树中,有且仅有一个根节点;其余节点可分为m(m&gt;0)个互不相交的有限子集T1,T2,….Tm其中每个Ti又都是一棵树,并且成为根节点的子树.<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-8.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-9.png" alt="软件设计师教程知识点整理"></li></ul><h2 id="四-二叉树"><a href="#四-二叉树" class="headerlink" title="四.二叉树"></a>四.二叉树</h2><h3 id="1-二叉树概念"><a href="#1-二叉树概念" class="headerlink" title="1. 二叉树概念"></a>1. 二叉树概念</h3><ul><li>二叉树是个n个节点的有限集合,它或者是空树,或者是一个节点及两颗互不相交的且分别成为左,右子树的二叉树所组成.与树的区别在于每个根节点最多只有两个孩子节点.</li><li>二叉树的特性:<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-10.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-二叉树的存储结构"><a href="#2-二叉树的存储结构" class="headerlink" title="2. 二叉树的存储结构"></a>2. 二叉树的存储结构</h3><ul><li><p>二叉树的存储结构</p><ul><li>用一组连续的存储单元,从上到下,从左到右依次存储每个节点<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-11.png" alt="软件设计师教程知识点整理"></li><li>深度为K的完全二叉树,除k层外,其余每层 中节点数都是上一层的两倍,因此,从一个节点的标号可推知其双亲,左海子,右孩子节点的编号.<br>假设节点为i</li></ul></li><li><p>二叉树的链式存储结构<br>一般用二叉树表来存储二叉树节点,二叉树表中除了节点本身的数据外,还存储有左孩子节点的指针,右孩子节点的指针,即有一个数据+两个指针.<br>每个二叉链表节点存储一个二叉树节点,头指针则指向根节点.</p></li></ul><h3 id="3-二叉树的遍历"><a href="#3-二叉树的遍历" class="headerlink" title="3. 二叉树的遍历"></a>3. 二叉树的遍历</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/3-12.png" alt="软件设计师教程知识点整理"></p><h3 id="4-线索二叉树"><a href="#4-线索二叉树" class="headerlink" title="4. 线索二叉树"></a>4. 线索二叉树</h3><ul><li><p>使用线索二叉树目的:<br>获取节点的前驱后后继信息</p></li><li><p>使用线索二叉树原因:<br>二叉树的链式存储只能获取到某节点的左孩子和右孩子节点,无法获取其遍历时的前驱和后继节点.因此可以在链式存储中增加两个指针域,使其分别指向前驱和后继节点,但是这样太浪费存储空间</p></li><li><p>可考虑以下实现方法:<br>若N个节点的二叉树使用二叉链表存储,必然有N+1个空指针域,利用这些空指针来存放节点的前驱和后继节点信息,为此,需要增加两个标志,以区分指针域存放的到底是孩子几点还是遍历节点,如下:<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-13.png" alt="软件设计师教程知识点整理"></p></li></ul><h3 id="5-最优二叉树"><a href="#5-最优二叉树" class="headerlink" title="5. 最优二叉树"></a>5. 最优二叉树</h3><ul><li>哈夫曼树: 最优二叉树</li><li>路径: 两个节点之间的通路</li><li>节点路径长度: 路径上的分支数目</li><li>权: 节点代表的值</li><li>节点带全路径长度: 节点路径长度 * 节点的值</li><li>数的路径长度: 根节点-&gt;每一个子节点路径长度 之和</li><li>输的带权路径长度(输的代价) : 所有子节点带权路径长度 之和<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-14.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-15.png" alt="软件设计师教程知识点整理"></li></ul><h2 id="五-树和森林"><a href="#五-树和森林" class="headerlink" title="五.树和森林"></a>五.树和森林</h2><h3 id="1-树的存储结构"><a href="#1-树的存储结构" class="headerlink" title="1.树的存储结构"></a>1.树的存储结构</h3><ul><li>双亲表示法: 用一组连续的地址单元存储树的节点,并在每个节点中附带一个指示器,指出其双亲节点所在数组元素的下标.</li><li>孩子表示法: 在存储结构中用指针指出节点的每个孩子,为树中的每个节点的孩子建立一个链表.</li><li>孩子兄弟表示法: 又称为二叉链表表示法,为每个存储节点设置两个指针域,分别指向该节点的第一个孩子和下一个兄弟节点.</li></ul><h3 id="2-树和森林的遍历"><a href="#2-树和森林的遍历" class="headerlink" title="2.树和森林的遍历"></a>2.树和森林的遍历</h3><p>由于树中的每个节点可能有多个子树,因此遍历树的方法有两种:<br>先根遍历: 先访问根节点,再依次遍历根的各颗子树.<br>后根遍历: 先遍历根的各颗子树,再访问根节点.<br>森林中有很多颗树,森林的遍历方法也分为两种,与树的遍历类似,就是对森林中的每颗树都依次做先根遍历或后根遍历.</p><h3 id="3-树和二叉树的转换"><a href="#3-树和二叉树的转换" class="headerlink" title="3.树和二叉树的转换"></a>3.树和二叉树的转换</h3><p>规则是: 树的最左边节点作为二叉树的左子树,树的其他兄弟节点作为二叉树的右子树节点.<br>示例如下图: 采用连线法,将最左边节点和其兄弟节点都连接起来,而原来的父节点和兄弟节点的连线则断开,这种方法最简单:<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-16.png" alt="软件设计师教程知识点整理"></p><h3 id="4-查找二叉树"><a href="#4-查找二叉树" class="headerlink" title="4.查找二叉树"></a>4.查找二叉树</h3><p>查找二叉树上的每个节点都存储一个值,且每个节点的所有左孩子节点值都小于父节点值,而所有右孩子节点值都大于父节点值,是一个有规则排列的二叉树,这种数据结构可以方便查找,插入等数据操作.<br>二叉排序树的查找效率取决于二叉排序树的深度,对于结点个数相同的二叉排序树,平衡二叉树的深度最小,而单枝树的深度是最大的,故效率是最差的.<br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-17.png" alt="软件设计师教程知识点整理"></p><h3 id="5-平衡二叉树"><a href="#5-平衡二叉树" class="headerlink" title="5.平衡二叉树"></a>5.平衡二叉树</h3><p>平衡二叉树: 特点是所有左子树值小于根节点值,所有右子树值大于根节点值,而这个节点可以构造出多个不同的二叉树,并不唯一,因此提出平衡二叉的概念.在查找二叉树的特点基础上,要求每个节点的平衡度只能为0或1或-1.<br>节点的左右子树深度就是其左右子树各自的层数,而后将左子树深度减去右子树深度,就得到了该节点的平衡度,因此,平衡二叉树就是任意左右子树层次相差不超过1</p><h2 id="六-图"><a href="#六-图" class="headerlink" title="六.图"></a>六.图</h2><p><img src="https://oss.lingkongstudy.com.cn/rjsj/3-18.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-19.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-24.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-25.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-20.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-21.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-22.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/3-23.png" alt="软件设计师教程知识点整理"></p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第4章 计算机操作系统知识</title>
      <link href="/posts/ed6aee7e/"/>
      <url>/posts/ed6aee7e/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-计算机操作系统知识"><a href="#第4章-计算机操作系统知识" class="headerlink" title="第4章 计算机操作系统知识"></a>第4章 计算机操作系统知识</h1><h2 id="一-操作系统知识基础"><a href="#一-操作系统知识基础" class="headerlink" title="一. 操作系统知识基础"></a>一. 操作系统知识基础</h2><ul><li>特征：并发性、共享性、虚拟性、不确定性</li><li>功能：进程管理、存储管理、文件管理、作业管理</li><li>分类：批处理操作系统、分时操作系统、实施操作系统、网络操作体统、分布式操作系统、微机操作系统、嵌入式操作系统<blockquote><p>嵌入式操作系统初始化过程按照自底向上、从硬件到软件次序：芯片级初始化（微处理的初始化）-&gt;板级初始化（板卡和其它硬件设备初始化）-&gt;系统初始化（软件及操作系统）</p></blockquote></li></ul><h2 id="二-进程管理"><a href="#二-进程管理" class="headerlink" title="二.  进程管理"></a>二.  进程管理</h2><h3 id="1-进程的组成和状态"><a href="#1-进程的组成和状态" class="headerlink" title="1. 进程的组成和状态"></a>1. 进程的组成和状态</h3><ul><li><p>进程的组成：进程控制快PCB(唯一标志)、程序(描述进程要做什么)、数据(存放进程执行时所需数据)</p></li><li><p>进程的三态图和五态图<br><img src="https://oss.lingkongstudy.com.cn/rjsj/4-8.png" alt="软件设计师教程知识点整理"></p></li><li><p>进程前趋图和进程资源图<br><img src="https://oss.lingkongstudy.com.cn/rjsj/4-9.png" alt="软件设计师教程知识点整理"></p><ul><li>进程阻塞：资源已全部分配完，进程请求资源无法获取，如上图P2</li><li>非阻塞节点：资源还有剩余，进程请求资源可以分配，进程能够执行，如上图P1、p3</li><li>死锁：当一个资源图中所有进程都是阻塞节点时，进入死锁状态</li></ul></li></ul><h3 id="2-进程间的同步和互斥"><a href="#2-进程间的同步和互斥" class="headerlink" title="2. 进程间的同步和互斥"></a>2. 进程间的同步和互斥</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/4-10.png" alt="软件设计师教程知识点整理"></p><h3 id="3-死锁问题"><a href="#3-死锁问题" class="headerlink" title="3. 死锁问题"></a>3. 死锁问题</h3><ul><li>死锁产生的四个必要条件：资源互斥、每个进程占有资源并等待其他资源、系统不能剥夺进程资源、进程资源图是一个环路</li><li>死锁资源计算<ul><li>有n个进程，每个进程需要R个资源，其发生死锁的最大资源数为 <code>n * (R-1)</code></li><li>不发生死锁的最小资源数为 <code>n * (R-1) + 1</code></li></ul></li></ul><h2 id="三-存储管理"><a href="#三-存储管理" class="headerlink" title="三.  存储管理"></a>三.  存储管理</h2><ul><li>主要是 主存 和 外存之间的管理（就是内存和硬盘之间的数据置换）</li><li>地址重定位：将逻辑地址转为实际物理地址的过程，分为静态重定位（程序运行前已经装入主存）、动态重定位（边运行边转换）</li></ul><h3 id="1-分区存储"><a href="#1-分区存储" class="headerlink" title="1.  分区存储"></a>1.  分区存储</h3><ul><li>静态分区，动态分区，重定位分区</li><li>将某进程运行需要的内存整体一起分配给它</li><li>缺点：进程需要的内存比较大时无法满足，进程无法运行</li></ul><h3 id="2-页式存储"><a href="#2-页式存储" class="headerlink" title="2.  页式存储"></a>2.  页式存储</h3><ul><li><p>页式存储是： 逻辑页号 对应 物理块号（页帧号）</p></li><li><p>页号：对应物理块号，位数表示了有多少页（16-31；16位 2的16方个页面）</p></li><li><p>页内地址：物理偏移地址，位数表示了每个页的大小（0-15；16位 2的16方&#x3D;64KB）每个页的大小是固定一样的<br><img src="https://oss.lingkongstudy.com.cn/rjsj/4-1.png" alt="软件设计师教程知识点整理"></p></li><li><p>快表：是一种很快的页面</p><ul><li>是一种小容量的相联存储器，有快速存储器组成，按内容访问，速度快，快且可以从硬件上保证内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号</li><li>快表是将页面存储于cache中；慢表将页面存储于内存上</li><li>快表是访问一次cache和一次内存，因此更快（chche取页号组成物理地址，内存取页内地址数据）；慢表需要访问两次内存才能取出页（内存取页号组成物理地址，内存取页内地址数据）</li></ul></li></ul><h3 id="3-段式存储"><a href="#3-段式存储" class="headerlink" title="3.  段式存储"></a>3.  段式存储</h3><ul><li>页式存储是： 逻辑页号 对应 物理块号（页帧号）</li><li>段号：对应物理块号，位数表示了有多少页（16-31；16位 2的16方个页面）</li><li>段内地址：表示这个段的大小，位数表示了每个段的大小（0-15；16位 2的16方&#x3D;64KB）每个段的大小是不一样的</li><li>真实内存地址是：段号 &#x3D;》 (基址：段内开始的地址)40K + 30K(段长：表示这个段的大小（段长&lt;段内地址）)<br><img src="https://oss.lingkongstudy.com.cn/rjsj/4-2.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="4-段页式存储"><a href="#4-段页式存储" class="headerlink" title="4.  段页式存储"></a>4.  段页式存储</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/4-3.png" alt="软件设计师教程知识点整理"></p><h2 id="四-设备管理"><a href="#四-设备管理" class="headerlink" title="四.  设备管理"></a>四.  设备管理</h2><h3 id="1-设备分类"><a href="#1-设备分类" class="headerlink" title="1. 设备分类"></a>1. 设备分类</h3><ul><li>数据组织分类：块设备、字符设备</li><li>资源分配角度分类：独占设备、共享设备、虚拟设备</li><li>数据传输速率分类：低速设备、中速设备、高速设备</li></ul><h3 id="2-I-O-软件层次结构"><a href="#2-I-O-软件层次结构" class="headerlink" title="2. I&#x2F;O 软件层次结构"></a>2. I&#x2F;O 软件层次结构</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/4-6.png" alt="软件设计师教程知识点整理"></p><h3 id="3-输入输出技术"><a href="#3-输入输出技术" class="headerlink" title="3. 输入输出技术"></a>3. 输入输出技术</h3><ul><li>程序控制方式（查询）：CPU主动查询外设是否完成数据传输，效率极低</li><li>程序终端方式：外设完成数据传输后，向CPU发送终端，等待CPU传输数据，效率先对较高，适用于键盘等实时性较高的场景</li><li>DMA方式（直接主存存取）：CPU只完成必要的初始化等操作吗，数据传输整个过程都有DMA控制器来完成，在主存与外设之间建立直接的数据通路，效率高。适用于硬盘等高速设备。</li></ul><h3 id="4-虚设备和Spooling技术"><a href="#4-虚设备和Spooling技术" class="headerlink" title="4. 虚设备和Spooling技术"></a>4. 虚设备和Spooling技术</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/4-7.png" alt="软件设计师教程知识点整理"></p><h2 id="五-文件管理"><a href="#五-文件管理" class="headerlink" title="五.  文件管理"></a>五.  文件管理</h2><h3 id="1-文件索引"><a href="#1-文件索引" class="headerlink" title="1.  文件索引"></a>1.  文件索引</h3><ul><li>每个物理块大小为 1kb，每个物理块地址为 4B</li><li>直接索引：存放物理块数据 1kb</li><li>一级间接索引：存放物理块地址，每个物理块可以存放 1kb &#x2F; 4B &#x3D; 1024 &#x2F; 4 &#x3D; 256 个物理块地址，每个物理块 1kb， 就是一共 256 * 1 kb</li><li>二级间接索引：存放一级索引地址，每个物理块可以存储 256 个一级地址索引，每个一级地址可以存储256个物理块地址，就是 256 * 256 个物理块，每个物理块 1kb，大小是 256 * 256 * 1 kb<br><img src="https://oss.lingkongstudy.com.cn/rjsj/4-4.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-文件目录树形结构"><a href="#2-文件目录树形结构" class="headerlink" title="2.  文件目录树形结构"></a>2.  文件目录树形结构</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/4-5.png" alt="软件设计师教程知识点整理"></p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第5章 软件工程基础知识</title>
      <link href="/posts/36616ae/"/>
      <url>/posts/36616ae/</url>
      
        <content type="html"><![CDATA[<h1 id="第5章-软件工程基础知识"><a href="#第5章-软件工程基础知识" class="headerlink" title="第5章 软件工程基础知识"></a>第5章 软件工程基础知识</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.  概述"></a>一.  概述</h2><h4 id="1-软件工程基本原理"><a href="#1-软件工程基本原理" class="headerlink" title="1.软件工程基本原理:"></a>1.软件工程基本原理:</h4><p>用分阶段的生命周期计划严格管理&#x2F;坚持进行阶段评审&#x2F;实现严格的产品控制&#x2F;采用现代程序设计技术&#x2F;结果应能清楚的审查&#x2F;开发小组的人员应少而精&#x2F;承认不断改进软件工程实践的必要性.</p><h4 id="2-软件工程的基本要素"><a href="#2-软件工程的基本要素" class="headerlink" title="2.软件工程的基本要素"></a>2.软件工程的基本要素</h4><p>方法 工具 过程</p><h4 id="3-软件生存周期"><a href="#3-软件生存周期" class="headerlink" title="3.软件生存周期"></a>3.软件生存周期</h4><p>可行性分析与项目开发计划&#x2F;需求分析&#x2F;概要设计(选择系统解决方案,规划子系统)&#x2F;详细设计(设计子系统内部具体实现)&#x2F;编码&#x2F;测试&#x2F;维护</p><h4 id="4-软件过程"><a href="#4-软件过程" class="headerlink" title="4.软件过程"></a>4.软件过程</h4><ul><li><p>4.1能力成熟度CMM模型<br>对软件组织化阶段的描述，随着软件组织定义、实施、测量、控制和改进软件过程，软件组织的能力经过这些节点逐步提高。</p><ul><li>初始级 Initial：杂乱无章、混乱、无明确定义步骤，依靠个人努力和英雄式人物的作用</li><li>可重复级 Repeatable：建立例基本的项目管理过程和实践来跟踪项目费用、速度和功能特性。有必要的过程准则来重复以前在同类项目的成功</li><li>已定义级 Defined：过程已经文档化、标准化，依靠标准软件过程来开发和维护软件</li><li>已管理级 Managed：制定了软件过程和产品质量的详细度量标准，并且被开发组织的成员所熟悉</li><li>优化级 Optimized：加强了定量分析，产品反馈、新观念、新技术等是过程能够不断持续改进<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-1.png" alt="软件设计师教程知识点整理"></li></ul></li><li><p>4.2能力成熟度CMMI模型</p><ul><li>4.2.1 阶段型模型，关注组织的成熟度，五个成熟度模型如下<ul><li>初始的：过程不可预测且缺乏控制</li><li>已管理的：过程为项目服务</li><li>已定义的：过程为组织服务</li><li>定量管理的：过程已度量和控制</li><li>优化的： 集中于过程改进</li></ul></li><li>4.2.2 连续型模型，关注每个过程域的能力，一个组织对不同的过程域可以达到不同的过程域能力等级<ul><li>CL0-未完成的：过程域未执行或未得到CL1中定义的所有目标</li><li>CL1-未执行的：过程将可表示的输入工作产品转换成可标识的输出工作产品，以实现支持过程域的特定目标</li><li>CL2-已管理的：以管理的过程的制度化</li><li>CL3-已定义的：已定义的过程的制度化</li><li>CL4-定量管理的：可定量管理的过程的制度化</li><li>CL5-优化的：使用量化手段改变和优化过程域，以满足客户要求的改变和持续改进计划中的过程域</li></ul></li></ul></li></ul><h2 id="二-软件过程模型"><a href="#二-软件过程模型" class="headerlink" title="二.  软件过程模型"></a>二.  软件过程模型</h2><blockquote><p>即软件开发模型,是软件开发全部过程、活动和任务的结构框架</p></blockquote><h4 id="1-瀑布模型-Waterfall-Model"><a href="#1-瀑布模型-Waterfall-Model" class="headerlink" title="1. 瀑布模型 Waterfall Model"></a>1. 瀑布模型 Waterfall Model</h4><ul><li>1.1 瀑布模型SDLC<ul><li>结构化方法中的模型，是结构化的开发。</li><li>开发流程如同瀑布一般，一步一步的走下去，知道最后完成项目开发</li><li><strong>适用于需求明确或者二次开发（需求稳定），当需求不明确时，最终开发的项目会错误，有很大的缺陷。</strong><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-2.png" alt="软件设计师教程知识点整理"></li></ul></li><li>1.2 瀑布模型V模型<ul><li>时瀑布模型的一个变体</li><li>特点是增加了很多轮测试，并且这些测试贯穿于开发的各个阶段，不想其他模型都是软件开发完再测试。</li><li>很大程度上确保了项目的准确性<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-3.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h4 id="2-增量模型-Incremental-Model"><a href="#2-增量模型-Incremental-Model" class="headerlink" title="2. 增量模型 Incremental Model"></a>2. 增量模型 Incremental Model</h4><ul><li>增量模型：适用于需求不明确的项目，首先开发核心模块功能，然后与用户确认，之后再开发次核心模块的功能。即每一次开发一部分功能，并与用户需求确认，最终完成项目开发，优先级最高的服务最先交付。</li><li>特点：不是从系统整体的角度划分整个模块，因此不利于模块划分。<strong>难点在于如何将客户需求划分为多个增量</strong>。与原型不同的是：增量模型的<strong>每一次增量版本都是可独立操作的作品</strong>，而<strong>原型的构造一般是为了演示</strong>。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-4.png" alt="软件设计师教程知识点整理"></li></ul><h4 id="3-演化模型"><a href="#3-演化模型" class="headerlink" title="3. 演化模型"></a>3. 演化模型</h4><ul><li><p>3.1 原型 Prototype Model</p><ul><li>即快速原型开发，与瀑布模型相反，原型针对的就是<strong>需求不明确的情况</strong></li><li>首选快速构造一个功能模型，演示给用户看，病案用户要求进行更改，中间再通过不断的演示和用户沟通，最终设计出项目，就不会出现于客户需求不符合的情况，采用的是<code>迭代的思想</code>。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-5.png" alt="软件设计师教程知识点整理"></li></ul></li><li><p>3.2 螺旋模型 Spiral Model</p><ul><li>是多种模型的混合，<strong>针对需求不明确的项目</strong>，与原型类似，但是<strong>增加了风险分析</strong></li><li>四步：制定计划-&gt;风险分析-&gt;实施工程-&gt;用户评估<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-6.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h4 id="4-喷泉模型"><a href="#4-喷泉模型" class="headerlink" title="4. 喷泉模型"></a>4. 喷泉模型</h4><ul><li>是一种以用户需求为动力，以对象作为驱动的模型，适合于<strong>面向对象的开发方法</strong>。是开发过程具有迭代性和无间隙性。</li></ul><h4 id="5-基于构件的开发模型-Componment-based-Development-Model"><a href="#5-基于构件的开发模型-Componment-based-Development-Model" class="headerlink" title="5. 基于构件的开发模型 Componment-based Development Model"></a>5. 基于构件的开发模型 Componment-based Development Model</h4><ul><li>利用预先包装的<strong>构件</strong>来构造应用系统。构件可以是组织内部开发的构件，也可以是商品化成产品软件的构件</li><li>特点是<strong>增强了复用性</strong>，在系统开发的过程中会<strong>构建一个构件库</strong>，供其他系统复用，因此可以提高可靠性，节省时间和成本</li></ul><h4 id="6-形式化开发模型"><a href="#6-形式化开发模型" class="headerlink" title="6. 形式化开发模型"></a>6. 形式化开发模型</h4><ul><li>建立在<strong>严格数学基础上的</strong>一种软件开发方法，主要活动是生成计算机软件形式化的数学规格说明</li></ul><h4 id="7-统一过程模型UP"><a href="#7-统一过程模型UP" class="headerlink" title="7. 统一过程模型UP"></a>7. 统一过程模型UP</h4><ul><li>初始阶段： 需求和风险评估</li><li>精华阶段： 需求分析和架构设计</li><li>构建阶段： 实现过程</li><li>移交阶段： 测试,增量,交付</li></ul><h4 id="8-敏捷开发"><a href="#8-敏捷开发" class="headerlink" title="8. 敏捷开发"></a>8. 敏捷开发</h4><blockquote><p>针对小型项目，<br>主要是为了给程序员减负，<br>去掉了一些不必要的会议和文档。<br>开发宣言：个体和沟通胜过过程和工具，可以工作的软件胜过面面俱到的文档，客户胜过合同谈判，响应变化胜过遵循计划。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-7.png" alt="软件设计师教程知识点整理"></p></blockquote><ul><li>8.1 结对编程：一个程序员开发，另一个审查代码，共同负责</li><li>8.2 自适应开发：强调开发的适应性。</li><li>8.3 水晶方法：针对每一个项目需要一套不同的策略、约定和方法论</li><li>8.4 极限编程XP：强调简化、沟通、反馈、勇气。计划赶不上变化，无需做出很多文档，测试优先</li><li>8.5 并列争球法：一种迭代的增量化过程，每隔一段时间30天一次的迭代称为一个冲刺，按需求优先级，多个组织和小组并行递增实现产品</li><li>8.6 敏捷统一过程AUP:大型上连续，小型上迭代构建软件系统。</li></ul><h2 id="三-软件需求分析"><a href="#三-软件需求分析" class="headerlink" title="三 软件需求分析"></a>三 软件需求分析</h2><h4 id="1-需求分类"><a href="#1-需求分类" class="headerlink" title="1. 需求分类"></a>1. 需求分类</h4><ul><li><p>1.1 按需求内容分类<br>业务需求：有客户提出的宏观的一个功能需求<br>用户需求：设计员去调查需求中设计到的每个用户的具体需求。<br>系统需求：经过整合，形成最终的系统需求，包括功能、性能、设计约束三个方面的需求。</p></li><li><p>1.2 从客户角度分类<br>基本需求：需求明确规定的功能<br>期望需求：除了基本需求外，客户认为利索应当包含在内的其它功能。<br>兴奋需求：未要求的需求和其它功能，会兰妃项目开发时间和成本</p></li><li><p>1.3 软件需求分类<br>功能需求：软件必须完成的基本需求<br>性能需求：软件和人与软件交互的静态或动态数值需求，如西戎响应速度、处理速度等。<br>设计约束：受其他标准硬件限制等方面的影响<br>属性：可用性、安全性、可维护性、可转移性<br>外部结构需求：用户接口、硬件接口、软件接口、通信接口</p></li></ul><h4 id="2-需求工程"><a href="#2-需求工程" class="headerlink" title="2. 需求工程"></a>2. 需求工程</h4><ul><li>2.1 需求获取：收集资料、讨论会JRP、用户访谈、书面调查、现场观摩、参加业务实践、阅读历史文档、抽样调查</li><li>2.2 需求分析与协商：分析不同人提出的所有需求之间的关系并判断</li><li>2.3 需求规约：即需求定义，目的是为了编写需求文档，在双方间达成一个共识</li><li>2.4 需求验证：需求开发节点的复查手段，需求验证通过后，要请用户签字确认，作为验收标准之一，此时，这个需求规格说明书就是需求基线</li><li>2.5 需求管理：对需求工程设计的所有过程进行规划和控制</li></ul><h4 id="3-需求管理"><a href="#3-需求管理" class="headerlink" title="3. 需求管理"></a>3. 需求管理</h4><ul><li>3.1 定义需求基线：通过了评审的需求说明书就是需求基线，下次如果需要变更需求，就需要按照流程来一步步进行</li><li>3.2 处理需求变更：主要关系需求变更过程中的需求风险管理，带有风险的做法有：无足够用户参与、忽略了用户分类、用户需求的不断增减、模棱两可的需求、不必要的特性、过于精简的srs,不准确的估算。</li><li>3.3 需求跟踪：双向跟踪，两个层次，正向跟踪表示用户原始需求是否都实现了，反向跟踪表示软件实现的是否都是用户要求的，不多不少。<br>  <img src="https://oss.lingkongstudy.com.cn/rjsj/d6-3.png" alt="软件设计师教程知识点整理"></li></ul><h2 id="四-软件系统设计"><a href="#四-软件系统设计" class="headerlink" title="四 软件系统设计"></a>四 软件系统设计</h2><ul><li><p>1 系统设计阶段</p><blockquote><p>系统分析阶段，我们弄清楚了“做什么”的问题，并把这些需求通过规格说明书描述了出来，这也是目标系统的逻辑模型。进入设计阶段，要把软件“做什么”的逻辑模型转换成“怎么做”的物理模型</p></blockquote></li><li><p>2 系统设计的主要目的</p><blockquote><p>为系统制定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理地使用各种资源，得出新系统的详细设计方案</p></blockquote></li><li><p>3 系统设计方法</p><ul><li>面向数据流的结构化设计方法</li><li>面向对象的分析方法</li></ul></li><li><p>4 系统设计步骤</p><blockquote><p>概要设计 和 详细设计</p></blockquote><ul><li>概要设计基本任务：设计软件系统总体结构、数据结构和数据库设计、编写概要设计文档、评审。</li><li>详细设计的基本任务：模块内详细算法设计、模块内数据结构设计、数据库的物理设计、其它设计（代码、输入&#x2F;输出格式、用户界面）、详细设计说明书、评审。</li></ul></li></ul><h2 id="五-软件系统测试"><a href="#五-软件系统测试" class="headerlink" title="五 软件系统测试"></a>五 软件系统测试</h2><h4 id="1-测试目的"><a href="#1-测试目的" class="headerlink" title="1. 测试目的"></a>1. 测试目的</h4><ul><li>系统测试时为了发现错误而执行程序的过程，成功的测试时发现了至今尚未发现的错误</li></ul><h4 id="2-测试原则"><a href="#2-测试原则" class="headerlink" title="2. 测试原则"></a>2. 测试原则</h4><ul><li>应尽早并不断的进行测试</li><li>测试工作应该避免有开发软件的人或小组承担</li><li>在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期的输出结果</li><li>即包含有效、合理的测试用例，也包含不合理、失效的用例</li><li>检验程序是否做了该做的事，且是否做了不该做的事</li><li>严格按照测试计划进行</li><li>妥善保存测试计划和测试用例</li><li>测试用例可以重复使用和追加测试</li></ul><h4 id="3-测试阶段"><a href="#3-测试阶段" class="headerlink" title="3. 测试阶段"></a>3. 测试阶段</h4><ul><li><p>单元测试<br>  对单个模块进行测试，有程序员自己测试模块内部的接口、信息、功能，测试依据是软件详细说明说。在单元测试中，驱动模块用来调用被测试模块，自顶向下的单元测试中不需要另外编写驱动模块。桩模块（底层）用来模拟被测试模块多调用的子模块</p></li><li><p>集成测试</p><ul><li>将模块组合起来进行测试，分为一词性组装（简单、节约时间、发现错误少、只适合小项目）</li><li>增量式组装（能够发现更多错误，耗时长，可分为：自顶向下、自底向上、混合式）</li></ul></li><li><p>确认测试</p><ul><li>对已完成的软件进行功能上的测试</li><li>内部确认测试：无用户情况</li><li>Alpha测试：用户在开发环境下进行测试</li><li>Beta测试：用户在实际使用时进行的测试</li><li>验收测试：用户根据SRS对项目进行验收</li></ul></li><li><p>系统测试</p><ul><li>对软件进行性能测试</li><li>负载测试：极限情况下，系统各项性能指标</li><li>强度测试：系统资源特别低的情况下</li><li>容量测试：并发测试，系统可以同时处理的最大用户数量。</li><li>其它还有可靠性等性能测试，系统测试采用的是黑盒测试方法</li></ul></li><li><p>回归测试<br>  软件修改错误或变更后，进行回归测试以验证之前正确的代码是否引入了错误</p></li></ul><h4 id="4-测试方法"><a href="#4-测试方法" class="headerlink" title="4. 测试方法"></a>4. 测试方法</h4><ul><li><p>4.1 动态测试方法：程序运行时测试</p><ul><li>黑盒测试法：功能性测试，不了解软件代码结构，根据功能设计用例，测试软件功能</li><li>白盒测试： 结构性测试，明确代码流程，根据代码逻辑设计用例，进行用例覆盖</li><li>灰盒测试： 既有白盒也有黑盒</li></ul></li><li><p>4.2 静态测试：程序静止时，对代码进行人工审查</p><ul><li>桌签审查：程序员自己检查编写的程序，在程序编译后，单元测试前</li><li>代码审查：若干个程序员和测试人员组成评审小组，通过召开评审会议来进行审查</li><li>代码走查：开会来进行审查，由测试人员提供测试用例，让程序员扮演计算机的角色，手动运行测试用例，检查代码逻辑</li></ul></li></ul><h4 id="5-测试策略"><a href="#5-测试策略" class="headerlink" title="5. 测试策略"></a>5. 测试策略</h4><ul><li>自顶向下：先测试整个系统，需要编写桩程序，而后逐步向下直至最后测试最底层模块。有点事较早的验证例系统的主要控制和判断点</li><li>自底向上：从底层开始模块测试，需要编写驱动程序，而后开始逐一合并模块，最终完成整个系统的测试。优点是较早的验证了底层模块。</li><li>三明治：既有自底向上也有自顶向下，兼有二者的优点，但是工作量大</li></ul><h4 id="6-测试用例设计"><a href="#6-测试用例设计" class="headerlink" title="6. 测试用例设计"></a>6. 测试用例设计</h4><ul><li><p>6.1 黑盒测试<br>  黑盒测试用例：将程序看做一个黑盒子，只知道输入输出，不知道内部代码，由此设计出测试用例，分为下面几类：</p><ul><li>等价类划分：把所有的书按照某种特性进行归类，而后在没类的数据里选取一个即可。等价类测试用例的设计原则：1）设计一个新的测试用例，使其尽可能多的覆盖尚未被覆盖的有效等价类，重复这一步，知道所有的有效等价类都被覆盖为止。2）设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，知道所有的无效等价类都被覆盖为止。</li><li>边界值划分：将每类的边界值作为测试用例，边界值一般为范围的两端值以及在此范围之外的与此范围间隔最小的两个值，如年龄范围为0-150，边界值是0,150 - 1,151四个</li><li>错误推测： 没有固定的方法，凭经验而言，来推测有可能产生问题的地方，作为测试用例进行测试</li><li>因果图： 由一个结果来反推原因的方法，具体结果具体分析，没有固定方法。</li></ul></li><li><p>6.2 白盒测试<br>  白盒测试用例：知道程序的逻辑代码，按照程序的代码语句来设计覆盖代码分支的测试用例，覆盖级别从第到高分为下面6种：</p><ul><li>语句覆盖：逻辑代码中的所有语句都要被执行一遍，覆盖级别最低，因为执行了所有的语句，不代表执行了所有的条件判断</li><li>判定覆盖：判断语句的条件的真假都要覆盖一次</li><li>条件覆盖：代码中的一个条件，可能是组合的，如 <code>a&gt;0 &amp;&amp; b&lt;0</code>判断覆盖只针对此组合条件的真假分支做两个测试用例，而条件覆盖是对每个独立的条件都要做真假分支的测试用例，共可有4个测试用例。层级更高，注意区别，条件覆盖，针对每个条件都要真假覆盖，判定覆盖，只针对一个条件判断语句。</li><li>判定&#x2F;条件 覆盖：是判定中每个条件的所有可能取值（真&#x2F;假）至少出现一次，并且每个判定本身的判定结果（真、假）也至少出现一次，即两种覆盖的综合</li><li>条件组合覆盖：每个判定条件中条件的各种可能值得组合都至少出现一次</li><li>路劲覆盖：逻辑代码中所有可行路径都覆盖了，覆盖层级最高</li></ul></li></ul><h4 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a>7. 调试</h4><ul><li>测试时发现错误，调试是找出错误的代码和原因</li><li>调试需要确定错误的准确位置：确定问题的原因并设法改正；改正后要进行回归测试。</li><li>调试的方法有：蛮力法、回溯法（从出错的地方开始向回找）、原因排错法（找出所有可能的原因，逐一进行排除，具体包括演绎法、归纳法、二分法）</li></ul><h2 id="六-软件系统转换、维护、评价"><a href="#六-软件系统转换、维护、评价" class="headerlink" title="六 软件系统转换、维护、评价"></a>六 软件系统转换、维护、评价</h2><h4 id="1-系统转换"><a href="#1-系统转换" class="headerlink" title="1. 系统转换"></a>1. 系统转换</h4><p>系统转换是指：新系统开发完毕，投入运行，取代现有系统的过程，需要考虑多方面的问题，以实现与老系统的交接，有以下三种转换计划</p><ul><li>直接转换：信息同直接替换旧系统，风险大，适合于不复杂的新系统或旧系统无法使用。有点事节省成本</li><li>并行转换：新系统和旧系统并行工作一段时间，新系统经过测试运行后再取代，风险小。缺点是耗费人力和时间，难以控制两个系统并存间的数据转换</li><li>分段转换：分期分批逐步转换，是直接和并行转换的集合。将大型系统分为多个子系统，一次试运行每个子系统。适用于大型项目，耗时长，旧的系统需要和新系统混合使用，需要协调好接口等问题。</li></ul><h4 id="2-系统维护"><a href="#2-系统维护" class="headerlink" title="2. 系统维护"></a>2. 系统维护</h4><ul><li><p>软件维护是软件生命周期的租后一个阶段，不属于系统开发过程。是在软件已经交付使用之后为了改正错误或满足新的需求而修改软件的过程，即软件在交付后对软件所做的一切改动</p></li><li><p>系统可维护性可以定义为维护人员理解、改正、改动和改进这个软件的难以程度，期评价指标如下：</p><ul><li>易测试性：指为确认经修改软件所需努力有关的软件属性</li><li>易分析性：指为诊断缺陷或失效原因，或为判定待修改的部分所需努力有关的软件属性</li><li>易改变性：指与进行修改、排错或适应环境变换所需努力有关的软件属性</li><li>稳定性：指与修改造成未预料效果的风险有关的软件属性</li></ul></li><li><p>系统维护包括硬件维护、软件维护、数据维护，其中软件维护如下：</p><ul><li>正确性维护：发现了bug而进行的修改</li><li>适应性维护：由于外部环境发生了改变，被动进行的对软件的修改和升级</li><li>完善性维护：基于用户主动对软件提出更多需求，修改软件，正价更多的功能，性能更好，更完善</li><li>预防性维护：对未来可能发生的bug进行预防性的修改</li></ul></li></ul><h4 id="3-系统评价"><a href="#3-系统评价" class="headerlink" title="3. 系统评价"></a>3. 系统评价</h4><ul><li><p>立项评价：系统开发前的预评价，分析是否立项开发，做可行性评价</p></li><li><p>中期评价：项目开发过程中期每个阶段的阶段评审。或者项目在开发中途遇到重大变故，评价是否还要继续</p></li><li><p>结项评价：系统投入正式运行后，了解系统是否达到预期的目的和要求而对西宫进行的综合评价</p></li><li><p>评价指标</p><ul><li>1）从信息系统的组成部分出发：可以按照运行效果和用户需求，系统质量和技术条件这两条线索构造指标</li><li>2）从信息系统的评价对象出发：对开发者来说关心的是系统质量和技术水平；对用户而言，关心的是用户需求和裕兴质量；系统外部环境则主要通过社会效益指标来反映</li><li>3）从经济学角度出发，分别按系统成本，系统效益和财务指标3条线建立指标</li></ul></li></ul><h2 id="七-软件项目管理"><a href="#七-软件项目管理" class="headerlink" title="七.  软件项目管理"></a>七.  软件项目管理</h2><h4 id="1-软件项目估算"><a href="#1-软件项目估算" class="headerlink" title="1. 软件项目估算"></a>1. 软件项目估算</h4><ul><li><p>1.1 项目估算方法</p><ul><li>成本估算方法</li><li>自顶向下估算方法：又称类比估算方法，确定一个总金额，再向下分摊到每一个功能点</li><li>自底向上复算：从底层功能点估算成本，向上累计</li><li>差别估算：与以前项目比较，找出不同点重新估算，相同点直接估算</li><li>专家估算：聘请专家一起经验对项目整体费用估算</li></ul></li><li><p>1.2 项目估算模型</p><ul><li><p>1.2.1 COCOMO 模型<br>  常见的软件规模估算方法。代码分析作为其中一种度量估计单位，已代码函数福算出每隔程序员工作量，累加得软件成本。</p><ul><li>基本COCOMO模型：用一个已估算出来的代码行树为自变量的经验函数计算软件开发工作量。</li><li>中间COCOMO模型：在基本模型的基础上再用设计产品硬件、人员、项目等方面的影响因素调整工作量的估算。</li><li>详细COCOMO模型：在中间模型的基础上再进一步考虑软件工程中分析、设计、过程等每一步的影响</li></ul></li><li><p>1.2.2 COCOMO II 模型<br>  COCOMO 模型的升级。考虑多个成本驱动因子。该方法包括三个阶段型模型。即应用组装模型（软件工程前期阶段使用），早期设计模型（需求已确定并且未建立软件体系结构时使用），体系结构模型（软件构造过程中使用）</p></li><li><p>1.2.3 Putnam 估算模型<br>  一种动态多变量模型，假设在软件开发的整个生存周期中工作量有特定的分布。</p></li></ul></li></ul><h4 id="2-软件项目进度管理"><a href="#2-软件项目进度管理" class="headerlink" title="2. 软件项目进度管理"></a>2. 软件项目进度管理</h4><blockquote><p>基本原则：划分、相互依赖、时间分配、工作量确认、确认职责、明确输出结果、确定里程碑</p></blockquote><ul><li>2.1 Grantt 图<ul><li>甘特图，又称为横道图。横轴表示时间，纵轴表示活动，以时间顺序表示活动。</li><li>能够反映活动间的并行关系，单无法反映活动之间的依赖关系。因此也能以清晰的确认关键任务和关键路径。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-9.png" alt="软件设计师教程知识点整理"></li></ul></li><li>2.2 Pert 图<ul><li>类似于前趋图，是又想吐。反映活动之间的依赖关系，有向边上标注活动的运行时间，但无法反映活动之间的并行关系。</li><li>图中的节点：称为事件。<code>-&gt; 节点</code>表示上一个节点的任务结束，<code>节点-&gt;</code>表示改节点开始任务，箭头上的事件表示从该节点开始到结束需要的时间。流入该节点所有任务都结束，该节点才开始运行。</li><li>特点：不仅给出了每隔任务的开始时间、结束时间和完成所需要的时间，还给出了任务时间的关系。</li><li>关键路径：项目总耗时醉成的一条线路<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-10.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-11.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h4 id="3-软件项目的组织"><a href="#3-软件项目的组织" class="headerlink" title="3. 软件项目的组织"></a>3. 软件项目的组织</h4><ul><li><p>组织结构模式：项目型（项目经理绝对领导）、职能型（部门领导为主）、矩阵型（二者都有，但是权力分割不同）</p></li><li><p>程序设计小组的组织方式：</p><ul><li>主程序员小组：主程序员全权负责，后援工程师必要时能替代主程序员，适合大规模项目</li><li>民主制小组：即无主程序员，决策全是成员参与投票，适合于项目规模小，开发人员少，采用新技术和确定性小的项目</li><li>层次式小组：两个层次，一名组长领导若干个高级程序员；每个高级程序要领导若干个程序员。</li></ul></li></ul><h4 id="4-软件配置管理"><a href="#4-软件配置管理" class="headerlink" title="4. 软件配置管理"></a>4. 软件配置管理</h4><ul><li><p>4.1 基线：软件过程中生存期各开发阶段末尾的特定点。又称为里程碑，反映阶段性成果。</p></li><li><p>4.2 软件配置项<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-17.png" alt="软件设计师教程知识点整理"></p></li><li><p>4.3 版本控制<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-18.png" alt="软件设计师教程知识点整理"></p></li></ul><h4 id="5-软件风险管理"><a href="#5-软件风险管理" class="headerlink" title="5. 软件风险管理"></a>5. 软件风险管理</h4><ul><li><p>5.1 软件风险特性</p><ul><li>不确定性：可能发生也可能不发生</li><li>损失：发生会产生恶性后果</li></ul></li><li><p>5.2 软件风险</p><ul><li><p>5.2.1。 项目风险</p><blockquote><p>项目风险威胁到项目计划。如果发生，有可能推迟项目的进度和增加项目的成本</p></blockquote><ul><li>风险因素：项目预算、进度、人员、资源、利益相关者、需求等方面的潜在问题以及他们对软件项目的影响。</li><li>项目复杂度、规模及结构不确定性也属于风险因素</li></ul></li><li><p>5.2.2 技术风险</p><blockquote><p>技术风险威胁到开发软件质量的交付时间。如果发生，开发工作会变的很困难或不可能</p></blockquote><ul><li>风险因素：设计、实现、接口、验证、维护等方面的潜在问题</li><li>此外：规格说明的歧义性、技术的不确定性、技术陈旧以及 前沿技术的风险 等因素</li></ul></li><li><p>5.2.3 商业风险</p><blockquote><p>威胁到开发软件的生存能力</p></blockquote><ul><li>市场风险：开发了无人需要的优良系统</li><li>策略风险：不在符合公司商业策略</li><li>销售风险：销售部门不知道如何销售</li><li>管理风险：重点转移或人员变动等带来的缺少高级管理层的支持</li><li>预算风险：没有得到预算等</li></ul></li></ul></li><li><p>5.3 风险管理过程</p><ul><li>风险识别：识别项目中的已知和可预测的风险，确定来源、产生条件、描述风险的特征。形成一个风险列表</li><li>风险预测：预测风险发生的概率和风险发生的后果</li><li>风险评估：定义风险参照水准，将识别出风险评估分类</li><li>风险控制：辅助项目组建立处理风险的策略，包括风险避免，风险监控、RMMM计划（风险环节、监控和管理计划）</li></ul></li></ul><h2 id="八-软件质量"><a href="#八-软件质量" class="headerlink" title="八. 软件质量"></a>八. 软件质量</h2><h4 id="1-质量模型"><a href="#1-质量模型" class="headerlink" title="1. 质量模型"></a>1. 质量模型</h4><ul><li><p>ISO&#x2F;IEC9126 质量模型<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-12.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-13.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-14.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-15.png" alt="软件设计师教程知识点整理"></p></li><li><p>McCall II 质量模型<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-16.png" alt="软件设计师教程知识点整理"></p></li></ul><h4 id="2-软件质量保证"><a href="#2-软件质量保证" class="headerlink" title="2. 软件质量保证"></a>2. 软件质量保证</h4><ul><li>3个要点：<ul><li>软件必须满足用户需求，与用户需求不一致的软件无质量可言。</li><li>软件影尊徐规定的一些列开发标准，不遵循这些这则的软件质量无法保证</li><li>软件还应满足某些隐含的需求：可理解性，可维护性等</li></ul></li><li>7个任务：<ul><li>应用技术方法</li><li>正式的技术评审</li><li>测试软件</li><li>标准的实施</li><li>控制变更</li><li>度量</li><li>记录保存和报告</li></ul></li></ul><h4 id="3-软件质量评审"><a href="#3-软件质量评审" class="headerlink" title="3. 软件质量评审"></a>3. 软件质量评审</h4><ul><li>设计的规格说明书符合用户标准，称为设计质量</li><li>程序按照设计规格说明书所规定的情况正确执行，称为程序质量</li></ul><h4 id="4-容错技术"><a href="#4-容错技术" class="headerlink" title="4. 容错技术"></a>4. 容错技术</h4><blockquote><p>容错就是软件遇到错误的处理能力。主要手段是冗余</p></blockquote><ul><li>结构冗余：静态（表决，比较，少数服从多数），动态（多重模块待机备份，故障时切换备份机），混合（两者结合）</li><li>信息冗余：为检错和纠错再数据中加上一段额外的信息，如校验码原理</li><li>时间冗余：遇到错误是重复执行，例如回滚，重复执行还有错则转入错误处理逻辑</li><li>冗余附加技术：为实现：结构、信息、时间的冗余技术所需的资源和技术。包括程序、指令、数据、存放和调动他们的空间和通道等。<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">在屏蔽硬件错误的容错技术中，冗余附加技术包括：关键程序和数据的冗余及调用；检测、表决、切换、重构和复算的实现。</span><br><span class="line">在屏蔽软件错误的容错技术中，冗余附加技术包括：冗余备份程序的存储及调用；实现错误检测和错误恢复的程序；实现容错软件所需的固化程序。</span><br></pre></td></tr></table></figure></li></ul><h2 id="九-软件度量"><a href="#九-软件度量" class="headerlink" title="九. 软件度量"></a>九. 软件度量</h2><ul><li>软件的两种属性：外部属性指面向管理的属性，可直接测量，一般为性能指标。内部属性指软件产品本身的属性，如可靠性等，只能间接测量</li><li>McCabe 度量法：又称为环路复杂度，假设有向图中有向边为m，节点数为n，则此有向图的环路复杂度为<strong>m-n+2</strong><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-19.png" alt="软件设计师教程知识点整理"><blockquote><p>m、n 代表的含义不能混淆。对于程序流程图：每一个条分支边就是一条有向边，每一个语句就是一个顶点</p></blockquote></li></ul><h2 id="十-软件工具与软件开发环境"><a href="#十-软件工具与软件开发环境" class="headerlink" title="十.  软件工具与软件开发环境"></a>十.  软件工具与软件开发环境</h2><h4 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1. 开发工具"></a>1. 开发工具</h4><ul><li><p>1.1 软件开发工具：软件开发过程的各种活动使用的工具</p><ul><li>需求分析工具</li><li>设计工具</li><li>编码和排错工具</li><li>测试工具</li></ul></li><li><p>1.2 软件维护工具：维护过程中的活动的软件，对软件代码何其文档进行各种维护活动</p><ul><li>版本控制工具</li><li>文档分析工具</li><li>开发信息库工具</li><li>逆向工程工具</li><li>再工程工具</li></ul></li><li><p>1.3 管理和软件支持工具：管理活动和支持活动，确保软件高质量的完成</p><ul><li>项目管理工具</li><li>配置管理工具</li><li>软件评测工具</li></ul></li></ul><h4 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2. 开发环境"></a>2. 开发环境</h4><ul><li>由工具集合环境集构成。工具集用于软甲开发的过程、活动、任务。环境集用于提供环境统一的支持。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d5-8.png" alt="软件设计师教程知识点整理"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第6章 结构化开发方法</title>
      <link href="/posts/64ea21e9/"/>
      <url>/posts/64ea21e9/</url>
      
        <content type="html"><![CDATA[<h1 id="第6章-结构化开发方法"><a href="#第6章-结构化开发方法" class="headerlink" title="第6章 结构化开发方法"></a>第6章 结构化开发方法</h1><h2 id="一-系统分析"><a href="#一-系统分析" class="headerlink" title="一 系统分析"></a>一 系统分析</h2><ul><li><p>系统分析是一种问题求解技术，它将一个系统分解成各个组成部分，目的是研究各个部分如何工作、交互，以实现其系统目标。</p></li><li><p>目的和任务：系统分析的主要任务是对线性系统更进一步详细调查，将调查中所得到的文档资料集中，对组织内部整体管理状况和信息处理过程进行分析，为系统开发提供所需的资料，并提交系统方案说明书。</p></li><li><p>系统分析的主要步骤</p><ul><li>1） 认识、理解当前的现实环境，获得当前系统的”物理模型”</li><li>2） 从当前系统的”物理模型”抽象出当前系统的”逻辑模型”</li><li><ol start="3"><li>对当前系统的”逻辑模型”进行分析和优化，建立目标系统的”逻辑模型”</li></ol></li><li><ol start="4"><li>对目标系统的逻辑模型具体化，建立目标系统的物理模型。</li></ol></li></ul></li><li><p>系统开发的目的是将现有系统的物理模型转换为目标系统的物理模型。</p></li></ul><h4 id="1-系统结构设计基本原理"><a href="#1-系统结构设计基本原理" class="headerlink" title="1. 系统结构设计基本原理"></a>1. 系统结构设计基本原理</h4><ul><li>抽象（重点说明一个实体的本质方面，忽略非本质方面）</li><li>模块化 （可组合、分解和更换的单元）</li><li>信息隐蔽 （将每个程序的成分隐藏或封装在一个单一的设计模块中）</li><li>模块独立 （每个模块完成一个相对独立的特定子功能，且与其他模块之间的联系简单）</li></ul><h4 id="2-模块之间的联系-耦合-和-内聚"><a href="#2-模块之间的联系-耦合-和-内聚" class="headerlink" title="2. 模块之间的联系 耦合 和 内聚"></a>2. 模块之间的联系 <strong>耦合</strong> 和 <strong>内聚</strong></h4><ul><li><p>2.1 <strong>耦合</strong>：是模块之间的相对独立性的度量<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d6-2.png" alt="软件设计师教程知识点整理"></p></li><li><p>2.2 <strong>内聚</strong>：是一个模块内部各个元素彼此结合的紧密程度的度量<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d6-1.png" alt="软件设计师教程知识点整理"></p></li></ul><h3 id="3-系统结构化方法设计过程"><a href="#3-系统结构化方法设计过程" class="headerlink" title="3. 系统结构化方法设计过程"></a>3. 系统结构化方法设计过程</h3><ul><li><p>3.1 系统结构设计原则</p><ul><li>分解–协助原则</li><li>自顶向下原则</li><li>信息隐蔽和抽象原则</li><li>一致性原则明确性原则</li><li>模块间高内聚低耦合</li><li>模块的扇入系数和扇出系数合理</li><li>模块规模适当</li></ul></li><li><p>3.2 子系统划分的原则</p><ul><li>子系统要具有相对独立性</li><li>子系统之间数据的依赖性尽量小</li><li>子系统划分的结果应使数据冗余较小</li><li>子系统的设置应考虑今后管理发展的需要</li><li>子系统的划分应便于系统分阶段实现</li><li>子系统的划分应考虑到各类资源的充分利用</li></ul></li></ul><h2 id="二-结构化分析方法"><a href="#二-结构化分析方法" class="headerlink" title="二 结构化分析方法"></a>二 结构化分析方法</h2><h4 id="1-结构化分析方法"><a href="#1-结构化分析方法" class="headerlink" title="1. 结构化分析方法"></a>1. 结构化分析方法</h4><ul><li>结构化的分析方法SA：自顶向下，逐步分解，是面向数据的，强调分析对象的数据流；</li><li>需要建立：<ul><li>功能模型（DFD数据流图）</li><li>行为模型（状态转换图）</li><li>数据模型（E-R图）</li><li>数据字典（数据元素，数据结构，数据流，数据存储，加工逻辑，外部实体）</li></ul></li></ul><h4 id="2-DFD数据流图"><a href="#2-DFD数据流图" class="headerlink" title="2. DFD数据流图"></a>2. DFD数据流图</h4><ul><li><p>2.1 数据流图描述数据在系统中如何被传送或变换，以及如何对数据流进行变换的功能或子功能，用于对功能建模，数据流图相关概念如下图：<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d4-11.png" alt="软件设计师教程知识点整理"></p></li><li><p>2.2 数据流图是可以分层的，从顶层（即上下文无关数据流）到0层、1层等，顶层数据流图只含有一个加工处理表示整个管理信息系统，描述了系统的输入输出，以及和外部实体的数据交互。如下：<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d4-12.png" alt="软件设计师教程知识点整理"></p></li><li><p>2.3 数据流图的基本设计原则</p><ul><li>1） 数据守恒原则：对任何一个加工来说，其所有输出数据流中的数据必须能从该加工的数据数据流中直接获得，或者说是通过该加工能产生的数据</li><li>2） 守恒加工原则：对同一个加工来说，输入和输出的名字必须不相同，即使他们的组成成分相同。</li><li>3） 对于每个加工，必须既有输入数据流，又有输出数据流</li><li>4） 外部实体与外部实体之间不存在数据流</li><li>5） 外部实体与数据存储之间不存在数据流</li><li>6） 数据存储于数据存储之间不存在数据流</li><li>7） 父图和子图的平衡原则：子图的输入输出数据流同父图相应加工的输入输出数据流必须一致，此即父图和子图的平衡。此平衡原则不存在与单张图。</li><li>8） 数据流与加工相关，且必须经过加工</li></ul></li></ul><h4 id="3-数据字典"><a href="#3-数据字典" class="headerlink" title="3. 数据字典"></a>3. 数据字典</h4><ul><li>数据字典是用来定义在数据流图中出现的符号或者名称的含义，在数据流图中，每个存储、加工、实体的含义都必须定义在数据字典中。并且父图和子图之间这些名称要相同。如下<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d4-13.png" alt="软件设计师教程知识点整理"></li></ul><h2 id="三-WEBAPP分析和设计"><a href="#三-WEBAPP分析和设计" class="headerlink" title="三 WEBAPP分析和设计"></a>三 WEBAPP分析和设计</h2><h4 id="1-WEBAPP特性"><a href="#1-WEBAPP特性" class="headerlink" title="1. WEBAPP特性"></a>1. WEBAPP特性</h4><ul><li>是基于web的系统和应用，大多数应用采用敏捷开发过程模型进行开发。</li><li>网络密集性（服务于不同客户全体的需求）、并发性（大量用户同时访问）、无法预知的负载量（用户数量）、性能（响应时间过长导致用户流失）、可用性、数据驱动（和用户的数据交互）</li></ul><h4 id="2-WEBAPP需求模型"><a href="#2-WEBAPP需求模型" class="headerlink" title="2. WEBAPP需求模型"></a>2. WEBAPP需求模型</h4><ul><li><p>2.1 内容模型<br>给出由WEBAPP提供的全部系列内容，包括了文字、图形、图像、视频和视频。</p></li><li><p>2.2 交互模型<br>描述了用户与WEBAPP采用了那种交互方式。由一种或多种元素构成，包括用例、顺序图、状态图、用户界面原型等。</p></li><li><p>2.3 功能模型<br>许多WEBAPP提供了大量的计算和操作功能，这些功能与内容直接相关（既能使用又能生成内容，如统计报表）。这些功能常常以用户的交互活动为主要目标。<br>功能模型定义了将用户WEBAPP内容并描述其它处理功能的操作，这些功能不依赖于内容却是最终用户所必需的。</p></li><li><p>2.4 导航模型<br>为WEBAPP定义所有导航策略，考虑了每一类用户如何从一个WEBAPP元素（如内容对象）导航到另一个元素</p></li><li><p>2.5 配置模型<br>描述WEBAPP所在环境和基础设施。在必需考虑配置体系结构的情况下，可以使用UML部署图。</p></li></ul><h4 id="3-WEBAPP设计"><a href="#3-WEBAPP设计" class="headerlink" title="3. WEBAPP设计"></a>3. WEBAPP设计</h4><ul><li><p>3.1 架构设计<br>使用多层架构来构造，包括用户界面或展示层、基于一组业务规则来知道与用户端浏览器进行信息交互的控制器，以及可以包含WEBAPP的业务规则的内容或模型层，描述将以什么方式来管理用户交互、操作内容处理任务、实现导航及展示内容。</p></li><li><p>3.2 构件设计<br>构件：定义良好的聚合功能，为最终用户处理内容或提供计算或处理数据<br>构件内容：关注内容对象，以及包装后展示给最终用户的方式，应该适合创建的WEBAPP特性<br>构件功能：将WEBAPP作为一些列构件加以交付，这些构件与信息提携结构并行开发，以确保一致性。</p></li><li><p>3.3 内容设计<br>着重于内容对象的表现和导航的组织，通常采用线性结构、网格机构、层次结构、网络结构四中结构及其组合。</p></li><li><p>3.4 导航设计<br>定义导航路径，使用户可以访问WEBAPP的内容和功能</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第7章 面向对象技术(UML建模+设计模式)</title>
      <link href="/posts/7e6354e/"/>
      <url>/posts/7e6354e/</url>
      
        <content type="html"><![CDATA[<h1 id="第7章-面向对象技术-UML建模-设计模式"><a href="#第7章-面向对象技术-UML建模-设计模式" class="headerlink" title="第7章 面向对象技术(UML建模+设计模式)"></a>第7章 面向对象技术(UML建模+设计模式)</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li>对象：基本的裕兴实体，为类的实例</li><li>消息：对象间通信一种构造称为消息</li><li>类：对象的抽象</li><li>继承：父类与子类</li><li>多态：不通的对象收到同一个消息产生不同反应。参数多态，包含多态，过载多态，强制多态</li><li>覆盖：子类覆盖父类同名同参的方法</li><li>函数重载：函数同名不同参数</li><li>封装：</li><li>静态类型：编译时确定，静态绑定：程序执行前已经被绑定</li><li>动态类型：运行时确定，动态绑定：运行时实际引用的对象类型决定调用那个方法<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-6.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="1-2-分析设计"><a href="#1-2-分析设计" class="headerlink" title="1.2 分析设计"></a>1.2 分析设计</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-6-2.png" alt="软件设计师教程知识点整理"></p><h2 id="2-UML-建模"><a href="#2-UML-建模" class="headerlink" title="2. UML 建模"></a>2. UML 建模</h2><h3 id="2-1-UML建模概念"><a href="#2-1-UML建模概念" class="headerlink" title="2.1 UML建模概念"></a>2.1 UML建模概念</h3><ul><li>UML是统一建模语言，与程序设计语言并无关系</li><li>UML构造块包括：<strong>事物，关系，图</strong></li></ul><h3 id="2-2-UML建模中的事物"><a href="#2-2-UML建模中的事物" class="headerlink" title="2.2 UML建模中的事物"></a>2.2 UML建模中的事物</h3><h5 id="2-2-1-结构事物"><a href="#2-2-1-结构事物" class="headerlink" title="2.2.1 结构事物"></a>2.2.1 结构事物</h5><ul><li>模型的静态部分名称<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-9.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-2-2-行为事物"><a href="#2-2-2-行为事物" class="headerlink" title="2.2.2 行为事物"></a>2.2.2 行为事物</h5><ul><li>模型的动态部分：交互，活动，状态机<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-8.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-2-3-分组事物-和-注释事物"><a href="#2-2-3-分组事物-和-注释事物" class="headerlink" title="2.2.3 分组事物 和 注释事物"></a>2.2.3 分组事物 和 注释事物</h5><ul><li>分组事物 模型的组织部分，例如：包</li><li>注释事物 模型的解释部分<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-7.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-3-UML建模中的关系"><a href="#2-3-UML建模中的关系" class="headerlink" title="2.3 UML建模中的关系"></a>2.3 UML建模中的关系</h3><ul><li>依赖：一个事物依赖于另一个事物的变化而变化</li><li>关联：结构关系，描述了一组链，分为组合和聚合（聚集）。是部分和整体的关系。组合关系更强。</li><li>泛化：一般&#x2F;特殊 父子关系</li><li>实现：一个类保证了另一个类执行的契约<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-10.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-4-UML建模中的图"><a href="#2-4-UML建模中的图" class="headerlink" title="2.4 UML建模中的图"></a>2.4 UML建模中的图</h3><h5 id="2-4-1-类图-Class-Diagram"><a href="#2-4-1-类图-Class-Diagram" class="headerlink" title="2.4.1 类图 Class Diagram"></a>2.4.1 类图 Class Diagram</h5><ul><li>静态图，系统的静态设计视图。展现一组对象、接口、协作和他们之间的关系。</li><li>UML类图包括：多重度、属性、操作、关系<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-11.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-2-对象图-Object-Diagram"><a href="#2-4-2-对象图-Object-Diagram" class="headerlink" title="2.4.2 对象图 Object Diagram"></a>2.4.2 对象图 Object Diagram</h5><ul><li>静态图。展现某一时刻一组对象及他们之间的关系，为类图的某一快照。</li><li>在没有类图的状态下，对象图就是静态设计视图<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-12.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-3-用例图-Use-Case-Diagram"><a href="#2-4-3-用例图-Use-Case-Diagram" class="headerlink" title="2.4.3 用例图 Use Case Diagram"></a>2.4.3 用例图 Use Case Diagram</h5><ul><li>静态图，展现了一组用例、参与者以及它们之间的关系</li><li>用例图中的参与者是人、硬件、系统可以扮演的角色。用例是参与者完成的一系列操作</li><li>用例之间的关系是：扩展、包含、泛化<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-13.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-4-序列图-Sequence-Diagram"><a href="#2-4-4-序列图-Sequence-Diagram" class="headerlink" title="2.4.4 序列图 Sequence Diagram"></a>2.4.4 序列图 Sequence Diagram</h5><ul><li>动态图，顺序图。是场景的图形化表示，描述了一时间顺序组织的对象间的交互活动</li><li>同步消息 左到右 实心箭头，表示阻塞调用，需要等待控制权返回后继续执行</li><li>异步消息 左到右 空心箭头，表示继续执行，不需要等待控制权返回可以继续执行下一个消息</li><li>返回消息 右到左 空心箭头<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-14.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-5-通信图-Communication-Diagram"><a href="#2-4-5-通信图-Communication-Diagram" class="headerlink" title="2.4.5 通信图 Communication Diagram"></a>2.4.5 通信图 Communication Diagram</h5><ul><li>动态图，即协作图。是顺序图的另一种表示方法。</li><li>对象和消息组成的图，不强调时间顺序，只强调事件之间的通信</li><li>而且也没有固定的画法规则，和顺序图统称为交互图。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-15.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-6-状态图-State-Diagram"><a href="#2-4-6-状态图-State-Diagram" class="headerlink" title="2.4.6 状态图 State Diagram"></a>2.4.6 状态图 State Diagram</h5><ul><li>动态图，展现了一个状态机，描述单个对象在多个用例中的行为。包括简单状态和组合状态</li><li>转换可以通过事件触发器触发，事件出发后响应的监护条件会进行检查</li><li>状态图中转换和状态是两个独立的概念</li><li>方框：表示状态 箭头：触发事件 实心圆点：起点和终点<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-16.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-7-活动图-Activity-Diagram"><a href="#2-4-7-活动图-Activity-Diagram" class="headerlink" title="2.4.7 活动图 Activity Diagram"></a>2.4.7 活动图 Activity Diagram</h5><ul><li>动态图，是一种特殊的状态图，展现了系统内从一个活动到另一个活动的流程</li><li>活动的分岔和汇合线是一条水平粗线</li><li>并发分岔、并发汇合、监护表达式、分支、流</li><li>每个分岔的分支数代表了可同时运行的线程数。</li><li>活动中能够并行执行的是在一个分岔粗线下的分支活动<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-17.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-8-组件图（构件图）Component-Diagram"><a href="#2-4-8-组件图（构件图）Component-Diagram" class="headerlink" title="2.4.8 组件图（构件图）Component Diagram"></a>2.4.8 组件图（构件图）Component Diagram</h5><ul><li>静态图，为系统静态实现视图。展现了一组组件（或构件）之间的组织和依赖<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-18.png" alt="软件设计师教程知识点整理"></li></ul><h5 id="2-4-9-部署图-Deployment-Diagram"><a href="#2-4-9-部署图-Deployment-Diagram" class="headerlink" title="2.4.9 部署图 Deployment Diagram"></a>2.4.9 部署图 Deployment Diagram</h5><ul><li>静态图，系统的静态部署图，部署物理模块的节点分布。</li><li>与组件图相关，通常是一个几点包含一个或多个组件。依赖关系类似于包依赖，因此部署组件之间的依赖是单向的类似于包含关系</li></ul><p><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-19.png" alt="软件设计师教程知识点整理"></p><h2 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3. 设计模式"></a>3. 设计模式</h2><p><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-20.png" alt="软件设计师教程知识点整理"></p><h3 id="3-1-设计模式概念"><a href="#3-1-设计模式概念" class="headerlink" title="3.1 设计模式概念"></a>3.1 设计模式概念</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-5.png" alt="软件设计师教程知识点整理"></p><h3 id="3-2-设计模式分类"><a href="#3-2-设计模式分类" class="headerlink" title="3.2 设计模式分类"></a>3.2 设计模式分类</h3><ul><li>创建型设计模式<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-4.png" alt="软件设计师教程知识点整理"></li><li>结构型型设计模式<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-3.png" alt="软件设计师教程知识点整理"></li><li>行为型设计模式<br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-2.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/d8-1.png" alt="软件设计师教程知识点整理"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第8章 算法设计与分析</title>
      <link href="/posts/11164ea/"/>
      <url>/posts/11164ea/</url>
      
        <content type="html"><![CDATA[<h1 id="第8章-算法设计与分析"><a href="#第8章-算法设计与分析" class="headerlink" title="第8章 算法设计与分析"></a>第8章 算法设计与分析</h1><h2 id="一-算法基础知识"><a href="#一-算法基础知识" class="headerlink" title="一 算法基础知识"></a>一 算法基础知识</h2><h3 id="1-算法的特性"><a href="#1-算法的特性" class="headerlink" title="1.  算法的特性"></a>1.  算法的特性</h3><ul><li>算法是对特定问题求解步骤的一种描述,他是指令的有限序列,其中每一条指令表示一个或多个操作.</li><li>1.有穷性.一个算法总是在执行有穷步骤之后结束,且每一步都可在有穷时间内完成.</li><li>2.确定性.算法中的每一条指令必须有确切的含义,理解时不会产生二义性.并且在任何条件下,算法只有唯一的一条路径,即对于相同的输入只能得出相同的输出.</li><li>3.可行性.一个算法是可行的,即算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现.</li><li>4.输入.一个算法有零个或多个输入,这些输入取决于某个特定的对象的集合.</li><li>5.输出.一个算法有一个或多个输出,这些输出是同输入有着某些特定关系的量.</li></ul><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2.  算法分析"></a>2.  算法分析</h3><ul><li><p>时间复杂度<br><img src="https://oss.lingkongstudy.com.cn/rjsj/8-10.png" alt="软件设计师教程知识点整理"></p><blockquote><p>时间复杂度是一个大概的规模表示，一遍以循环次数表示，O（n）说明时间是n的正比，log对数的时间复杂度一般在查找二叉树的算法中出现。渐进符号O表示一个渐进变化程度，实际变化必须小于等于O括号内的渐进变化度。</p></blockquote></li><li><p>空间复杂度<br><img src="https://oss.lingkongstudy.com.cn/rjsj/8-11.png" alt="软件设计师教程知识点整理"></p></li></ul><h2 id="二-算法分析基础：查找算法"><a href="#二-算法分析基础：查找算法" class="headerlink" title="二 算法分析基础：查找算法"></a>二 算法分析基础：查找算法</h2><h3 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h3><ul><li>顺序查找: 将查找的关键字key从头到尾与表中的元素进行比较,存在则返回成功,否则失败</li><li>时间复杂度为O(n),按照顺序依次超找一遍</li></ul><h3 id="2-拆半（二分）查找"><a href="#2-拆半（二分）查找" class="headerlink" title="2.  拆半（二分）查找"></a>2.  拆半（二分）查找</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-12.png" alt="软件设计师教程知识点整理"></p><h3 id="3-Hash-哈希超找"><a href="#3-Hash-哈希超找" class="headerlink" title="3.  Hash 哈希超找"></a>3.  Hash 哈希超找</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-13.png" alt="软件设计师教程知识点整理"></p><blockquote><p>哈希查找冲突处理方法：<br>1)线性探测，存储到下一个空闲物理空间；<br>2)伪随机数法，存储到任意空闲存储位置；<br>3)再次hash散列计算，使用新计算的位置存储</p></blockquote><h2 id="三-排序算法"><a href="#三-排序算法" class="headerlink" title="三 排序算法"></a>三 排序算法</h2><ul><li><p>稳定排序与不稳定排序：依据是两个相同的值在排序后的相对位置是否发生了变化。如果发生了变化为不稳定，不发生变化为稳定</p></li><li><p>内排序和外排序：依据是排序在内存中进行还是在外部进行</p></li><li><p>排序算法分类：</p><ul><li>插入类排序：直接插入排序，shell希尔排序</li><li>选择类排序：直接选择排序，堆排序</li><li>交换类排序：冒泡排序，快速排序</li><li>其它：归并排序，基数排序</li></ul></li><li><p>排序算法：时间复杂度总结<br><img src="https://oss.lingkongstudy.com.cn/rjsj/8-9.png" alt="软件设计师教程知识点整理"></p></li></ul><h3 id="1-直接插入排序"><a href="#1-直接插入排序" class="headerlink" title="1. 直接插入排序"></a>1. 直接插入排序</h3><ul><li>是一种简单的排序算法。具体做法是在插入第i个元素时，前面的已经排好序，然后将i与前面的元素依次比较，插入到比i大的值前面，i的插入位置后面的元素依次后移<br><img src="https://oss.lingkongstudy.com.cn/rjsj/8-1.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-SHELL-希尔排序"><a href="#2-SHELL-希尔排序" class="headerlink" title="2.  SHELL 希尔排序"></a>2.  SHELL 希尔排序</h3><ul><li>将待排序的元素分割成若干个子序列，然后分别进行直接插入排序  <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">分组方法示例：</span><br><span class="line">待排序元素为n=10个，取一个小于 n 的整数 d （依次减小d，d按照一定的规律增量排列，例如 5,3,1）</span><br><span class="line">元素按照 5 为间距进行分组，对每个分好组的元素使用直接插入排序</span><br><span class="line">元素按照 3 为间距再次分组，每个分好组的元素使用直接插入排序</span><br><span class="line">元素按照 1 为间距再次分组，每个分好组的元素使用直接插入排序</span><br></pre></td></tr></table></figure><img src="https://oss.lingkongstudy.com.cn/rjsj/8-2.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="3-直接选择排序"><a href="#3-直接选择排序" class="headerlink" title="3.  直接选择排序"></a>3.  直接选择排序</h3><ul><li>n 个待排序元素：i 与 i后的元素进行比较，从n-i+1个元素中找出最小的，并和第 i 个元素交换，当i等于n时记录有序排列</li><li>本质就是选择出最小的元素进行交换，主要是选择过程，交换过程只有一次<br><img src="https://oss.lingkongstudy.com.cn/rjsj/8-3.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="4-堆排序"><a href="#4-堆排序" class="headerlink" title="4.  堆排序"></a>4.  堆排序</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-4.png" alt="软件设计师教程知识点整理"></p><h3 id="5-冒泡排序"><a href="#5-冒泡排序" class="headerlink" title="5.  冒泡排序"></a>5.  冒泡排序</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-5.png" alt="软件设计师教程知识点整理"></p><h3 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6.  快速排序"></a>6.  快速排序</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-6.png" alt="软件设计师教程知识点整理"></p><h3 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.  归并排序"></a>7.  归并排序</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-7.png" alt="软件设计师教程知识点整理"></p><h3 id="6-基数排序"><a href="#6-基数排序" class="headerlink" title="6.  基数排序"></a>6.  基数排序</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-8.png" alt="软件设计师教程知识点整理"></p><h2 id="四-常用算法策略"><a href="#四-常用算法策略" class="headerlink" title="四 常用算法策略"></a>四 常用算法策略</h2><h3 id="1-分治法"><a href="#1-分治法" class="headerlink" title="1.  分治法"></a>1.  分治法</h3><p>1.1 递归概念</p><ul><li><p>是指程序（函数）直接调用自己或通过一些列调用语句简介调用自己，是一种描述问题和解决问题的常用方法</p></li><li><p>基本要素：边界条件（确定递归合适终止，即递归出口）；递归模式（即递归体）</p></li></ul><p>1.2 分治法的思想概念</p><ul><li>对于一个规模为n的问题，若该问题可以容易的解决则直接解决；否则将其分解为k个规模更小的子问题，这些子问题互相独立且与原问题形式相同，递归的解决这些问题，然后将各个子问题的解合并得到原问题的解。</li></ul><p>1.3 分治法的步骤</p><ul><li>分解问题–&gt;求解（递归地求解各子问题，若子问题足够小，则直接求解）–&gt;合并（将各子问题合并成原问题的解）</li></ul><p>1.4 凡是涉及到分组解决的都是分治法（二分查找，归并排序等）</p><h3 id="2-回溯法"><a href="#2-回溯法" class="headerlink" title="2.  回溯法"></a>2.  回溯法</h3><ul><li>有通用的解题方法之称，可以系统地搜索一个问题的所有解或任意解。</li><li>在包含问题的所有解的空间树中，按照深度优先的策略，从根节点触发搜索解空间树。搜索到任一结点时，总是先判断该节点是否肯定不包含问题的解，如果不包含则跳过对该节点的子树的搜索，逐层向祖先节点回溯；否则进入该子树，继续按深度优先的策略进行搜索。</li><li>可以理解为深度优先搜索，一直向下探测，当此路不通时，返回上一层探索另外的分支，重复此步骤，这就是回溯，意为先一直探测，当不成功时再返回上一层。</li><li>一般用于解决迷宫类的问题。</li></ul><h3 id="3-动态规划法"><a href="#3-动态规划法" class="headerlink" title="3.  动态规划法"></a>3.  动态规划法</h3><ul><li><p>在求解问题中，对于每一步决策列出各种可能的局部解，再依据某种判定条件，舍弃哪些肯定不能得到最优解的局部解，在每一步都经过筛选，以每一步都是最优解来保证全局是最优解</p></li><li><p>本质也是将复杂的问题划分为一个个子问题，与分治法不同的是每一个子问题间不是相互独立的，并且不全都相同。</p></li><li><p>常用于求解具有某种最优性质的问题。</p></li><li><p>此算法将大量精力放在前期构造表格上面，其会对每一步，列出各种可能的答案，这些答案会存储起来，最终要得出某个结果时，是通过查询这张表来得到的，动态规划法不但每一步最优，全局也最优。</p></li></ul><h3 id="4-贪心法"><a href="#4-贪心法" class="headerlink" title="4.  贪心法"></a>4.  贪心法</h3><ul><li><p>总是做出在当前来说最好的选择，而并不从整体上加以考虑，它2所做的每部选择只是当前步骤的局部最优选择，但从整体来说不一定是最优的选择。由于它不必为了寻找最优解而穷尽所有可能解，因此耗费时间少，一般可以快速得到满意的解，但得不到最优解。</p></li><li><p>局部贪心，只针对当前的步骤取最优，而非整体考虑。</p></li><li><p>判断此类算法，就看算法是否是每一步都取最优，并且整体题意没有透露出最终结果是最优的。</p></li></ul><h3 id="5-分支限界法"><a href="#5-分支限界法" class="headerlink" title="5.  分支限界法"></a>5.  分支限界法</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-14.png" alt="软件设计师教程知识点整理"></p><h3 id="6-概率算法"><a href="#6-概率算法" class="headerlink" title="6.  概率算法"></a>6.  概率算法</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-15.png" alt="软件设计师教程知识点整理"></p><h3 id="7-近似算法"><a href="#7-近似算法" class="headerlink" title="7.  近似算法"></a>7.  近似算法</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-16.png" alt="软件设计师教程知识点整理"></p><h3 id="8-数据挖掘算法"><a href="#8-数据挖掘算法" class="headerlink" title="8.  数据挖掘算法"></a>8.  数据挖掘算法</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-17.png" alt="软件设计师教程知识点整理"></p><h3 id="9-智能优化算法"><a href="#9-智能优化算法" class="headerlink" title="9.  智能优化算法"></a>9.  智能优化算法</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/8-18.png" alt="软件设计师教程知识点整理"></p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第9章 数据库技术基础</title>
      <link href="/posts/100e6616/"/>
      <url>/posts/100e6616/</url>
      
        <content type="html"><![CDATA[<h1 id="第9章-数据库技术基础"><a href="#第9章-数据库技术基础" class="headerlink" title="第9章 数据库技术基础"></a>第9章 数据库技术基础</h1><h2 id="一-数据库基本概念"><a href="#一-数据库基本概念" class="headerlink" title="一 数据库基本概念"></a>一 数据库基本概念</h2><h3 id="1-数据库系统DBS"><a href="#1-数据库系统DBS" class="headerlink" title="1. 数据库系统DBS"></a>1. 数据库系统DBS</h3><ul><li>组成：数据库（数据集合）、硬件、软件、人员</li><li>分类：<ul><li>关系型数据库（oracle&#x2F;sybase&#x2F;sql server&#x2F;mysql）</li><li>面向对象型数据库（OODBS）</li><li>对象关系型数据库（ORDBS）</li></ul></li></ul><h3 id="2-数据库系统体系结构"><a href="#2-数据库系统体系结构" class="headerlink" title="2. 数据库系统体系结构"></a>2. 数据库系统体系结构</h3><ul><li>集中式数据库系统</li><li>客户端&#x2F;服务器结构</li><li>并行数据库系统</li><li>分布式数据库系统<ul><li>局部数据库位于不同的物理位置，使用一个全局DBMS将所有局部数据库联网管理，就是分布式数据库</li></ul></li></ul><h3 id="3-数据库的三级模式和两级映像"><a href="#3-数据库的三级模式和两级映像" class="headerlink" title="3. 数据库的三级模式和两级映像"></a>3. 数据库的三级模式和两级映像</h3><ul><li><p>外模式：对应数据库中的<strong>视图</strong>这个级别,将表进行一定的处理后再提供给用户使用。</p></li><li><p>模式： 称为概念模式，就是通常使用的<strong>表</strong>这个级别，根据应用、需求将物理数据划分成一张张表。</p></li><li><p>内模式：管理如何存储物理的数据，对数据的存储方式、优化、存放等。</p></li><li><p>外模式–模式 映像：是视图和表之间的映射，存在于概念级和外部级之间，若表中数据发生了修改，只需要修改此映射，而无需修改引用程序。</p></li><li><p>模式–内模式 映像：是表和数据的物理存储之间的映射，存在于概念级和内部级之间，若修改了数据存储方式，只需要修改此映射，而不需要去修改应用程序。<br><img src="https://oss.lingkongstudy.com.cn/rjsj/9-1.png" alt="软件设计师教程知识点整理"></p></li></ul><h2 id="二-数据模型"><a href="#二-数据模型" class="headerlink" title="二 数据模型"></a>二 数据模型</h2><blockquote><p>数据模型的三要素：数据结构、数据操作、数据的约束条件</p></blockquote><h3 id="E-R模型图"><a href="#E-R模型图" class="headerlink" title="E-R模型图"></a>E-R模型图</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-2.png" alt="软件设计师教程知识点整理"></p><ul><li>联系分为三种<ul><li>1:1 联系，联系可以放到任意的两端实体中，作为一个属性</li><li>1:N 联系，联系可以单独作为一个关系模型，也可以在N端中加入1端实体的主键</li><li>M:N 联系，联系必须作为一个单独的关系模型，其主键是M和N端的联合主键</li></ul></li><li>每个实体都对应一个关系模型</li></ul><h2 id="三-关系代数运算"><a href="#三-关系代数运算" class="headerlink" title="三 关系代数运算"></a>三 关系代数运算</h2><ul><li>数据库中代数运算概念 <ul><li>并：结果是两张表中所有记录数合并，相同记录只显示一次</li><li>交：结果是两张表中相同的记录</li><li>差：S1-S2,结果是S1表中有而S2中没有的那些记录<br><img src="https://oss.lingkongstudy.com.cn/rjsj/9-3.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h3 id="1-笛卡尔积："><a href="#1-笛卡尔积：" class="headerlink" title="1. 笛卡尔积："></a>1. 笛卡尔积：</h3><ul><li><code>s1*s2，产生的结果如下图，包括s1和s2所有的属性列，并且s1中每条记录依次和s2中每条记录组合成一条记录，最终属性列为s1+s2属性列，记录数为s1*s2</code><br><img src="https://oss.lingkongstudy.com.cn/rjsj/9-4.png" alt="软件设计师教程知识点整理"></li></ul><h3 id="2-投影：实际是按条件选择某关系模式中的某列，列也可以用数字表示"><a href="#2-投影：实际是按条件选择某关系模式中的某列，列也可以用数字表示" class="headerlink" title="2. 投影：实际是按条件选择某关系模式中的某列，列也可以用数字表示"></a>2. 投影：实际是按条件选择某关系模式中的某列，列也可以用数字表示</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-5.png" alt="软件设计师教程知识点整理"></p><h3 id="3-选择：实际是按照条件选择某关系模式中的某条记录"><a href="#3-选择：实际是按照条件选择某关系模式中的某条记录" class="headerlink" title="3. 选择：实际是按照条件选择某关系模式中的某条记录"></a>3. 选择：实际是按照条件选择某关系模式中的某条记录</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-6.png" alt="软件设计师教程知识点整理"></p><h3 id="4-连接：结果与笛卡尔积类似，但是相同名称的属性列只显示一次"><a href="#4-连接：结果与笛卡尔积类似，但是相同名称的属性列只显示一次" class="headerlink" title="4. 连接：结果与笛卡尔积类似，但是相同名称的属性列只显示一次"></a>4. 连接：结果与笛卡尔积类似，但是相同名称的属性列只显示一次</h3><h3 id="5-自然连接：结果是显示全部的属性列，但是相同属性列只显示一次，显示两个关系模式中属性相同且值相同的记录"><a href="#5-自然连接：结果是显示全部的属性列，但是相同属性列只显示一次，显示两个关系模式中属性相同且值相同的记录" class="headerlink" title="5. 自然连接：结果是显示全部的属性列，但是相同属性列只显示一次，显示两个关系模式中属性相同且值相同的记录"></a>5. 自然连接：结果是显示全部的属性列，但是相同属性列只显示一次，显示两个关系模式中属性相同且值相同的记录</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-7.png" alt="软件设计师教程知识点整理"></p><h2 id="四-SQL语句"><a href="#四-SQL语句" class="headerlink" title="四 SQL语句"></a>四 SQL语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>;</span><br><span class="line">#指定主键</span><br><span class="line"><span class="keyword">primary</span> key();</span><br><span class="line">#指定外键</span><br><span class="line"><span class="keyword">foreign</span> key();</span><br><span class="line">#修改表</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>;</span><br><span class="line">#删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span>;</span><br><span class="line">#索引index，视图<span class="keyword">view</span></span><br><span class="line">#数据库查询</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ... <span class="keyword">where</span>;</span><br><span class="line">#分组查询,<span class="keyword">select</span> 后的列名要使用分组，条件选择使用 <span class="keyword">having</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> .... <span class="keyword">having</span> .....</span><br><span class="line">#更名运算 <span class="keyword">as</span></span><br><span class="line">#字符皮牌</span><br><span class="line"><span class="keyword">like</span> ,<span class="operator">%</span>匹配多个字符 , _ 匹配一个字符</span><br><span class="line">#数据库插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ... <span class="keyword">values</span>();</span><br><span class="line">#数据库删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ... <span class="keyword">where</span> ...;</span><br><span class="line">#数据库修改</span><br><span class="line"><span class="keyword">update</span> ... <span class="keyword">set</span> ... <span class="keyword">where</span> ...;</span><br><span class="line">#排序 </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">asc</span> <span class="operator">|</span> <span class="keyword">desc</span> ;</span><br><span class="line"># 授权</span><br><span class="line"><span class="keyword">grant</span> .... <span class="keyword">on</span> ... <span class="keyword">to</span> </span><br><span class="line">#收回权限</span><br><span class="line"><span class="keyword">revoke</span> ... <span class="keyword">on</span> ... <span class="keyword">from</span>;</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option #检查<span class="keyword">where</span>后的谓语条件</span><br><span class="line"><span class="keyword">DISTINCT</span> # 过滤重复选项，指保留一条记录</span><br><span class="line"><span class="keyword">UNION</span> #出现在连个<span class="keyword">sql</span>语句之间，将两个结果取或运算，即存在于第一句或第二句的都会被选出</span><br><span class="line"><span class="keyword">INTERSECT</span> #出现在连个<span class="keyword">sql</span>语句之间，对两个语句的查询结果与运算，同时存在于两个语句之间才被选出</span><br></pre></td></tr></table></figure><h2 id="五-关系数据库的规范化"><a href="#五-关系数据库的规范化" class="headerlink" title="五 关系数据库的规范化"></a>五 关系数据库的规范化</h2><h3 id="1-函数依赖"><a href="#1-函数依赖" class="headerlink" title="1. 函数依赖"></a>1. 函数依赖</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-8.png" alt="软件设计师教程知识点整理"></p><h3 id="2-规范化"><a href="#2-规范化" class="headerlink" title="2. 规范化"></a>2. 规范化</h3><ul><li>用途： 解决数据冗余、更新异常、插入异常、删除异常</li><li>键和约束<ul><li>超键：能唯一标识此表的属性的组合</li><li>候选键：超键中去掉冗余的属性，剩余的属性就是候选键</li><li>主键：候选键任选一个可以作为主键</li><li>外键：其他表中的主键<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">候选键求法：根据依赖集画出有向图，从入度为0的节点开始，找出图中一个节点或者一个节点组合，能够遍历完整个图，就是候选键</span><br><span class="line">实体完整性约束：即主键约束，主键不能为空，也不能重复</span><br><span class="line">参照完整性约束：即外键约束，外键必须是其他表中已经存在的主键的值，或者为空</span><br></pre></td></tr></table></figure><img src="https://oss.lingkongstudy.com.cn/rjsj/9-9.png" alt="软件设计师教程知识点整理"></li></ul></li></ul><h5 id="2-1-第一范式：1NF-所有属性都不可以在分割为两个或多个分量"><a href="#2-1-第一范式：1NF-所有属性都不可以在分割为两个或多个分量" class="headerlink" title="2.1 第一范式：1NF 所有属性都不可以在分割为两个或多个分量"></a>2.1 第一范式：1NF 所有属性都不可以在分割为两个或多个分量</h5><h5 id="2-2-第二方式：2NF-在1DF基础上，每一个非主属性完全依赖主键-（不存在部分依赖）"><a href="#2-2-第二方式：2NF-在1DF基础上，每一个非主属性完全依赖主键-（不存在部分依赖）" class="headerlink" title="2.2 第二方式：2NF 在1DF基础上，每一个非主属性完全依赖主键 （不存在部分依赖）"></a>2.2 第二方式：2NF 在1DF基础上，每一个非主属性完全依赖主键 <strong>（不存在部分依赖）</strong></h5><h5 id="2-3-第三范式：3NF-在2NF基础上-非主属性不传递依赖于候选键（主键组合），主键直接决定非主属性"><a href="#2-3-第三范式：3NF-在2NF基础上-非主属性不传递依赖于候选键（主键组合），主键直接决定非主属性" class="headerlink" title="2.3 第三范式：3NF 在2NF基础上,非主属性不传递依赖于候选键（主键组合），主键直接决定非主属性"></a>2.3 第三范式：3NF 在2NF基础上,非主属性不传递依赖于候选键（主键组合），主键直接决定非主属性</h5><h5 id="2-4-BCNF范式：BCNF-在2NF基础上-所有属性都不传递依赖于候选键"><a href="#2-4-BCNF范式：BCNF-在2NF基础上-所有属性都不传递依赖于候选键" class="headerlink" title="2.4 BCNF范式：BCNF 在2NF基础上,所有属性都不传递依赖于候选键"></a>2.4 BCNF范式：BCNF 在2NF基础上,所有属性都不传递依赖于候选键</h5><h5 id="2-5-第四范式：4NF-在3NF基础上-删除所有多对多关系"><a href="#2-5-第四范式：4NF-在3NF基础上-删除所有多对多关系" class="headerlink" title="2.5 第四范式：4NF 在3NF基础上,删除所有多对多关系"></a>2.5 第四范式：4NF 在3NF基础上,删除所有多对多关系</h5><h3 id="3-模式分解"><a href="#3-模式分解" class="headerlink" title="3. 模式分解"></a>3. 模式分解</h3><ul><li><p>模式之间的转黄一般都是通过拆分属性，即模式分解，将具有部分函数依赖和传递依赖的属性分离出来，来达到一步步优化，一般分为两种</p></li><li><p>3.1 保持函数依赖分解</p><ul><li>对于关系模型R，有依赖集F,若对R进行分解，分解出阿里的多个关系模型保持原来的依赖集不变，则为保持函数依赖的分解。分解后通过产地依赖实现属性的跨表函数依赖也是可以的。</li></ul></li><li><p>3.2 无损分解</p><ul><li>将关系R分解成多个关系莫时候，还能还原成原来的关系模式R,这就是无损分解<br><img src="https://oss.lingkongstudy.com.cn/rjsj/9-10.png" alt="软件设计师教程知识点整理"></li><li>无损分解定理：R 分解为{R1,R2},F为满足R所满足的函数依赖集合，分解p具有无损连接性的充分必要条件是R1∩R2-&gt;(R1-R2) R2∩R2-&gt;(R2-R1)</li></ul></li></ul><h2 id="六-数据库的控制和功能"><a href="#六-数据库的控制和功能" class="headerlink" title="六 数据库的控制和功能"></a>六 数据库的控制和功能</h2><h3 id="1-事物管理"><a href="#1-事物管理" class="headerlink" title="1. 事物管理"></a>1. 事物管理</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-11.png" alt="软件设计师教程知识点整理"></p><ul><li>X锁，排它锁：若事务T对数据对象A将X锁，则只允许T读取和修改A，其它事物都不能在对A加任何类型的锁，直到T释放A上的锁</li><li>S锁，共享锁：若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其它事物只能再对A加S锁，直到T释放A上的S锁</li><li>解锁的时间不同，会造成预防问题的个数不同，即为不同的封锁协议。</li></ul><h3 id="2-数据库故障和备份"><a href="#2-数据库故障和备份" class="headerlink" title="2. 数据库故障和备份"></a>2. 数据库故障和备份</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-12.png" alt="软件设计师教程知识点整理"><br><img src="https://oss.lingkongstudy.com.cn/rjsj/9-13.png" alt="软件设计师教程知识点整理"></p><h3 id="3-并发控制"><a href="#3-并发控制" class="headerlink" title="3. 并发控制"></a>3. 并发控制</h3><p><img src="https://oss.lingkongstudy.com.cn/rjsj/9-14.png" alt="软件设计师教程知识点整理"></p>]]></content>
      
      
      <categories>
          
          <category> 中级软件设计师 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一.Go安装</title>
      <link href="/posts/81588d1c/"/>
      <url>/posts/81588d1c/</url>
      
        <content type="html"><![CDATA[<h2 id="在-Windows-上安装-Go"><a href="#在-Windows-上安装-Go" class="headerlink" title="在 Windows 上安装 Go"></a>在 Windows 上安装 Go</h2><p>若要在 Windows 上安装 Go，请从 <a href="https://golang.org/dl/">Go 下载页面</a>下载 Go 安装程序。</p><p><strong>步骤 1：下载 Go 安装程序</strong></p><p>在 <a href="https://golang.org/dl/">Go 下载页面</a>的“精选下载”部分中，选择“Microsoft Windows”选项。</p><p>可能会显示一个对话框，提示你允许从 golang.org 下载文件。如果是这样，请选择“允许”。</p><p><strong>步骤 2：运行 MSI Go 安装程序</strong></p><p>在本地下载 Go 安装程序后，就可以开始安装 Go 了。 为此，请双击 .msi 文件，然后按照说明进行操作。</p><p>默认情况下，.msi 文件在 C:\Program Files\Go 安装 Go，文件夹位置 C:\Program Files\Go\bin 现在应是 $PATH 系统环境变量的一部分。</p><p><strong>步骤 3：确认是否已正确安装 Go</strong></p><p>配置 Go 分发后，请确认 Go 正常工作。 打开新的命令或 PowerShell 提示符，然后运行以下命令：</p><p>控制台复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>应显示在工作站上安装的 Go 版本的详细信息。</p><h2 id="配置-Go-工作区"><a href="#配置-Go-工作区" class="headerlink" title="配置 Go 工作区"></a>配置 Go 工作区</h2><p>继续之前，请务必仔细阅读此部分。</p><p>Go 在组织项目文件方面与其他编程语言不同。 首先，Go 是在工作区的概念下工作的。 工作区就是应用程序源代码所在的位置。 所有 Go 项目共享同一个工作区。 不过，从版本 1.11 开始，Go 已开始更改此方法。 你尚且不必担心，因为我们将在下一个模块中介绍工作区。 现在，Go 工作区位于 $HOME&#x2F;go，但如果需要，可以为所有项目设置其他位置。</p><p>若要将工作区设置为其他位置，可以使用 $GOPATH 环境变量。 在处理更复杂的项目时，此环境变量有助于避免将来出现问题。</p><p>若要配置工作区，请在本地 Go 环境变量中指定 Go 项目文件夹的位置。</p><ol><li><p>为所有 Go 项目创建一个顶级文件夹。 例如，C:\Projects\Go。</p></li><li><p>打开 PowerShell 提示符，然后运行以下 cmdlet 来设置 $GOPATH 环境变量。</p><p> 将 <code>&lt;project-folder&gt;</code> 替换为上一步中创建的顶级项目文件夹。</p> <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;GOPATH&quot;</span>, <span class="string">&quot;&lt;project-folder&gt;&quot;</span>, <span class="string">&quot;User&quot;</span>)</span><br></pre></td></tr></table></figure><p> 对于此步骤，我们使用 PowerShell，因此可以调用预构建的 cmdlet 来设置环境变量。</p><p> 设置 $GOPATH 值后，关闭 PowerShell 提示符。</p></li><li><p>确认 $GOPATH 变量显示正确的工作区位置。 在新的提示符窗口中，运行以下命令：</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env GOPATH</span><br></pre></td></tr></table></figure><p> 输出显示当前工作区位置为顶级项目文件夹：</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Projects\Go</span><br></pre></td></tr></table></figure><p>  备注</p><p> 如果 $GOPATH 变量没有显示顶级项目文件夹，请确保在运行该命令之前打开了一个新的提示符窗口。 更改环境变量的值之后，需要关闭并重新打开该窗口，或打开一个新窗口，使值更改生效。</p><p> 可以使用一个简短的命令来查看 Go 使用的所有环境变量：</p> <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure></li></ol><h2 id="添加-Go-工作区文件夹"><a href="#添加-Go-工作区文件夹" class="headerlink" title="添加 Go 工作区文件夹"></a>添加 Go 工作区文件夹</h2><p>每个 Go 工作区都包含三个基本文件夹：</p><ul><li>_bin_：包含应用程序中的可执行文件。</li><li>_src_：包括位于工作站中的所有应用程序源代码。</li><li>_pkg_：包含可用库的已编译版本。 编译器可以链接这些库，而无需重新编译它们。</li></ul><p>例如，工作站文件夹结构树可能与下面的示例类似：</p><blockquote><p>bin&#x2F;<br>    hello<br>    coolapp<br>pkg&#x2F;<br>    github.com&#x2F;gorilla&#x2F;<br>        mux.a<br>src&#x2F;<br>    github.com&#x2F;golang&#x2F;example&#x2F;<br>        .git&#x2F;<br>    hello&#x2F;<br>        hello.go</p></blockquote><p>运行以下命令,为工作区创建三个子文件夹：</p><p>控制台复制</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> %GOPATH%</span><br><span class="line">mkdir bin</span><br><span class="line">mkdir src</span><br><span class="line">mkdir pkg</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>我们将在下一个模块中进一步讨论工作区概念。 你还将了解如何在 $GOPATH 环境外部维护项目。</p><p>你可以访问官方文档网站<a href="https://golang.org/doc/gopath_code.html">如何编写 Go 代码</a>，进一步了解 Go。</p>]]></content>
      
      
      <categories>
          
          <category> GO语言基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三.Go变量声明</title>
      <link href="/posts/8c57f1ee/"/>
      <url>/posts/8c57f1ee/</url>
      
        <content type="html"><![CDATA[<h1 id="声明和使用变量"><a href="#声明和使用变量" class="headerlink" title="声明和使用变量"></a>声明和使用变量</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>若要声明变量，需要使用 <code>var</code> 关键字：</p><p>Go复制</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName <span class="type">string</span></span><br></pre></td></tr></table></figure><p>前一个语句声明 <code>string</code> 类型中的一个名为<code>firstName</code> 的变量。 （我们将在后续章节中讨论数据类型。）此示例演示声明变量的最基本方法。 如要声明其他变量，只需将类似的语句添加到上一个语句中。 如果两个变量的类型相同，则可以在一行中声明多个变量：</p><p>Go复制</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName, lastName <span class="type">string</span></span><br></pre></td></tr></table></figure><p>通过在变量名称后面添加逗号 (<code>,</code>)，就表示你将要声明其他变量。 在这种情况下，前一个语句就声明了 <code>string</code> 类型中的两个变量：<code>firstName</code>和<code>lastName</code>。 如要添加 <code>int</code> 类型的第三个变量，请按如下所示编写代码：</p><p>Go复制</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName, lastName <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br></pre></td></tr></table></figure><p>另一种编写前一个语句的方法是在 <code>var</code> 关键字后面使用括号，就像通过一个专用块来声明变量一样，如下所示：</p><p>Go复制</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName, lastName <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><p>此时，你只可声明了变量，但有时候，你需要为它们赋予初始值。 在 Go 中，你可以通过多种方式初始化变量。 例如，沿用前面提及的同一个示例，你可以使用此代码初始化每个变量：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName <span class="type">string</span> = <span class="string">&quot;John&quot;</span></span><br><span class="line">    lastName  <span class="type">string</span> = <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age       <span class="type">int</span>    = <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果你决定初始化某个变量，则不需要指定其类型，因为当你使用具体值初始化该变量时，Go 会推断出其类型。 例如，你可以用此方式声明并初始化变量</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName = <span class="string">&quot;John&quot;</span></span><br><span class="line">    lastName  = <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age       = <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go 将推断出变量 <code>firstName</code> 和 <code>lastName</code> 的类型为 <code>string</code>，并且变量 <code>age</code> 属于 <code>int</code> 类型。</p><h2 id="通过多种方式初始化变量"><a href="#通过多种方式初始化变量" class="headerlink" title="通过多种方式初始化变量"></a>通过多种方式初始化变量</h2><p>在 Go 中，你可以在单行中声明和初始化变量。 使用逗号将每个变量名称隔开，并对每个值执行相同的操作（按同一顺序），如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    firstName, lastName, age = <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span>, <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还可以通过另一种方式来声明和初始化变量。 此方法是在 Go 中执行此操作的最常见方法。 以下是我们使用的同一个示例说明：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName, lastName := <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age := <span class="number">32</span></span><br><span class="line">    fmt.Println(firstName, lastName, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>备注</strong></p><p>请注意 <code>import &quot;fmt&quot;</code> 语句。 我们使用 <code>import</code> 关键字将包的内容引入范围中。 我们要导入“fmt”包，因此可以在代码中使用 <code>Println</code> 方法。 我们将在后面的单元中详细了解此关键字。</p><p>运行上述代码，确认此方法能否声明和初始化变量。</p><p>请注意，在定义变量名称后，需要在此处加入一个冒号等于号 (<code>:=</code>) 和相应的值。 使用冒号等于号时，<em>要声明的变量必须是新变量</em>。 如果使用冒号等于号并已经声明该变量，将不会对程序进行编译。 添加 age 作为常量（参阅下一节），但使用冒号等号 (<code>:=</code>) 并进行尝试。</p><p>最终，<em>你能在函数内使用冒号等于号</em>。 在声明函数外的变量时，必须使用 <code>var</code> 关键字执行此操作。 如果你不熟悉函数，请不要担心。 我们会在后续单元中介绍函数。</p><h2 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h2><p>有时，你需要在代码中加入静态值，这称为<em>常量</em>。 Go 支持使用常量。 用于声明常量的关键字是 <code>const</code>。</p><p>例如，你可以按如下所示声明常量：</p><p>Go复制</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HTTPStatusOK = <span class="number">200</span></span><br></pre></td></tr></table></figure><p>与变量一样，Go 可以通过分配给常量的值推断出类型。 在 Go 中，常量名称通常以混合大小写字母或全部大写字母书写。</p><p>如果需要在一个块中声明多个常量，可以按如下所示执行：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    StatusOK              = <span class="number">0</span></span><br><span class="line">    StatusConnectionReset = <span class="number">1</span></span><br><span class="line">    StatusOtherError      = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> 备注</p><p>Go 为常量定义了一个有趣的概念，即 <em>iota</em>，本模块未对此概念作进一步解释。 但你可以查看 GitHub 上的 <a href="https://github.com/golang/go/wiki/Iota">Go wiki</a> 了解更多信息。 请记住，<code>iota</code> 是一个关键字；如果这些值存在先后顺序，Go 可使用此关键字简化常量定义。</p><p>常量和变量之间既有相似之处，也有一些重要差异。 例如，可以在不使用常量的情况下声明常量，并且不会收到错误消息。 不能使用冒号等于号来声明常量。 如果采用这种方式，Go 会发出警告。</p><h2 id="如果声明了变量但未使用，Go-会抛出错误"><a href="#如果声明了变量但未使用，Go-会抛出错误" class="headerlink" title="如果声明了变量但未使用，Go 会抛出错误"></a>如果声明了变量但未使用，Go 会抛出错误</h2><p>需要记住的重要一点是，在 Go 中， 当你声明一个变量但不使用它时，Go 会抛出错误，而不是像某些其他编程语言一样抛出警告。</p><p>例如，让我们回到前面提及的某个示例，然后删除 <code>fmt.Println</code> 调用：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName, lastName := <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    age := <span class="number">32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你在 Visual Studio Code 或 Go Playground 中运行此代码时，你将看到在要声明变量的多个行中存在错误。 你将看到以下错误消息：</p><p>输出复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./main.go:4:2: firstName declared but not used</span><br><span class="line">./main.go:4:13: lastName declared but not used</span><br><span class="line">./main.go:5:2: age declared but not used</span><br></pre></td></tr></table></figure><p>请记住，对于在 Go 中声明的每个变量，你必须将其用于某处。</p>]]></content>
      
      
      <categories>
          
          <category> GO语言基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二.什么是Go</title>
      <link href="/posts/c81e6580/"/>
      <url>/posts/c81e6580/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Go？"><a href="#什么是-Go？" class="headerlink" title="什么是 Go？"></a>什么是 Go？</h1><p>Go 是 Google 开发的一种编程语言。 它于 2009 年由 Robert Griesemer、Rob Pike 和 Ken Thompson 作为开源项目发布。 从那时起，Go 语言就被用于开发其他众所周知的技术，如 <a href="https://www.docker.com/">Docker</a>、<a href="https://kubernetes.io/">Kubernetes</a> 和 <a href="https://www.terraform.io/">Terraform</a>。 尽管 Go 语言在服务器端和云软件中广泛使用，但它是一种常规用途语言，具有丰富的不同用例。</p><p>Go 语言表现力强，且简单明了。 它在设计时考虑了惯用语言，这使程序员能够高效地编写高效且可靠的代码。 以 Go 语言编写的程序可以在 Unix 系统上运行，例如 Linux 和 macOS，也可以在 Windows 系统上运行。 Go 语言之所以值得注意，部分原因在于它独特的并发机制，使得编写可同时利用多个内核的程序非常容易。 它主要是一种强化静态类型的语言，这意味着变量类型在编译时是已知的。 不过，它确实具有一些动态类型化功能。</p><p>根据 <a href="https://www.tiobe.com/tiobe-index/">TIOBE 索引</a>，<a href="https://insights.dice.com/2017/01/10/go-tiobe-programming-language-2016/">Go 是 2009 和 2016 年的年度编程语言</a>。 尽管 Go 在 2016 年达到了顶点，但它<a href="https://www.tiobe.com/tiobe-index/go/">仍保持着很好的口碑</a>。 根据<a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted?azure-portal=true">年度 Stack Overflow 开发人员调查</a>，Go 仍然是最受欢迎的语言之一。</p><p>Go 语言与 C 语言有很多相似之处，它继承了 C 语言语法的许多方面，如控制流语句、基本数据类型、指针和其他元素等。 不过，该语言的语法和语义均超出 C 语言。 它还与 Java、C#、Python 等有相似之处。 一般情况下，Go 语言往往从其他编程语言中借用并调整功能，同时去掉了大部分复杂性。 例如，你可以在 Go 语言中使用一些面向对象的 (OO) 编程功能和设计模式，但并不完全实现整个 OO 范例。 你将在此学习路径的后面部分了解其中的原因。</p><h2 id="Go-原则"><a href="#Go-原则" class="headerlink" title="Go 原则"></a>Go 原则</h2><p>下面是 Go 编程语言的基本原理优势：</p><ul><li>Go 许可证是完全开放源代码的。</li><li>Go 程序编译为单独的二进制文件，这样更易于共享和分发。</li><li>Go 支持交叉编译到各种平台和操作系统。</li><li>Go 语言致力于使语言变得简单，并用更少的代码行执行更多操作。</li><li>并发是头等概念，使任何函数可以作为轻量级线程运行，而程序员只需少量工作。</li><li>Go 语言提供自动内存管理，包括垃圾回收。</li><li>编译和执行速度很快。</li><li>Go 语言需要使用所有代码，否则会引发错误。</li><li>有一种官方格式设置可帮助保持项目之间的一致性。</li><li>Go 语言具有大量全面标准库，并且可以在不使用第三方依赖项的情况下生成多个应用程序。</li><li>Go 保证语言与以前版本的后向兼容性。</li></ul><h2 id="Go-语言用例"><a href="#Go-语言用例" class="headerlink" title="Go 语言用例"></a>Go 语言用例</h2><ul><li>系统级应用程序</li><li>Web 应用程序</li><li>云原生应用程序</li><li>实用工具和命令行工具</li><li>分布式系统</li><li>数据库实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> GO语言基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>五.Go创建函数</title>
      <link href="/posts/9e3be42/"/>
      <url>/posts/9e3be42/</url>
      
        <content type="html"><![CDATA[<h1 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h1><p>在 Go 中，函数允许你将一组可以从应用程序的其他部分调用的语句组合在一起。 你可以使用函数来组织代码并使其更易于阅读，而不是创建包含许多语句的程序。 更具可读性的代码也更易于维护。</p><p>到目前为止，我们一直在调用 <code>fmt.Println()</code> 函数，并且在 <code>main()</code> 函数中编写代码。 在本节中，我们将探讨如何创建自定义函数。 我们还将介绍一些可用于 Go 函数的其他技巧。</p><h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h2><p>与之交互的函数是 <code>main()</code> 函数。 Go 中的所有可执行程序都具有此函数，因为它是程序的起点。 你的程序中只能有一个 <code>main()</code> 函数。 如果创建的是 Go 包，则无需编写 <code>main()</code> 函数。 我们将在后续模块中介绍如何创建包。</p><p>在深入了解如何创建自定义函数的基本知识之前，让我们看看 <code>main()</code> 函数的一个重要特性。 你可能留意到，<code>main()</code> 函数没有任何参数，并且不返回任何内容。 但这并不意味着其不能从用户读取值，如命令行参数。 如要访问 Go 中的命令行参数，可以使用用于保存传递到程序的所有参数的 <a href="https://golang.org/pkg/os/">os 包</a> 和 <code>os.Args</code> 变量来执行操作。</p><p>下面的代码从命令行读取两个数字，并为其求和：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    number1, _ := strconv.Atoi(os.Args[<span class="number">1</span>])</span><br><span class="line">    number2, _ := strconv.Atoi(os.Args[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sum:&quot;</span>, number1+number2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>os.Args</code> 变量包含传递给程序的每个命令行参数。 由于这些值的类型为 <code>string</code>，因此需要将它们转换为 <code>int</code> 以进行求和。</p><p>若要运行程序，请使用以下命令：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sum: 8</span><br></pre></td></tr></table></figure><p>让我们看看如何重构上述代码，并创建第一个自定义函数。</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>下面是用于创建函数的语法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameters)</span></span> (results) &#123;</span><br><span class="line">    body-content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，使用 <code>func</code> 关键字来定义函数，然后为其指定名称。 在命名后，指定函数的参数列表。 你可以指定零个或多个参数。 你还可以定义函数的返回类型，该函数也可以是零个或多个。 （我们将在下一节中讨论如何返回多个值）。在定义所有这些值之后，你可以编写函数的正文内容。</p><p>若要练习此技巧，我们将重构上一节的代码，为自定义函数中的数字求和。 我们将使用以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := sum(os.Args[<span class="number">1</span>], os.Args[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sum:&quot;</span>, sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(number1 <span class="type">string</span>, number2 <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    int1, _ := strconv.Atoi(number1)</span><br><span class="line">    int2, _ := strconv.Atoi(number2)</span><br><span class="line">    <span class="keyword">return</span> int1 + int2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码创建一个名为 <code>sum</code> 的函数，该函数采用两个 <code>string</code> 参数，并将它们强制转换为 <code>int</code>，然后返回求和所得的结果。 定义返回类型时，函数需要返回该类型的值。</p><p>在 Go 中，你还可以为函数的返回值设置名称，将其当作一个变量。 例如，你可以重构如下 <code>sum</code> 函数：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(number1 <span class="type">string</span>, number2 <span class="type">string</span>)</span></span> (result <span class="type">int</span>) &#123;</span><br><span class="line">    int1, _ := strconv.Atoi(number1)</span><br><span class="line">    int2, _ := strconv.Atoi(number2)</span><br><span class="line">    result = int1 + int2</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，你现在需要将函数的结果值括在括号中。 你还可以在函数中使用该变量，并且只需在末尾添加 <code>return</code> 行。 Go 将返回这些返回变量的当前值。 在函数末尾编写 <code>return</code> 关键字非常简单方便，尤其是在有多个返回值时。 我们不建议使用此方法。 可能不确定函数将返回什么。</p><h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p>在 Go 中，函数可以返回多个值。 你可以采用类似于定义函数参数的方式来定义这些值。 换句话说，你可以指定一个类型和名称，但该名称是可选的。</p><p>例如，假设你想要创建一个函数，以将两个数字求和，又让它们相乘。 函数代码将如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(number1 <span class="type">string</span>, number2 <span class="type">string</span>)</span></span> (sum <span class="type">int</span>, mul <span class="type">int</span>) &#123;</span><br><span class="line">    int1, _ := strconv.Atoi(number1)</span><br><span class="line">    int2, _ := strconv.Atoi(number2)</span><br><span class="line">    sum = int1 + int2</span><br><span class="line">    mul = int1 * int2</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你现在需要两个变量来存储函数的结果。 （否则就不会进行编译。）它的外观如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum, mul := calc(os.Args[<span class="number">1</span>], os.Args[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sum:&quot;</span>, sum)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Mul:&quot;</span>, mul)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 的另一个有趣功能是，如果不需要函数的某个返回值，可以通过将返回值分配给 <code>_</code> 变量来放弃该函数。 <code>_</code> 变量是 Go 忽略返回值的惯用方式。 它允许程序进行编译。 因此，如果只需要求和，则可以使用以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum, _ := calc(os.Args[<span class="number">1</span>], os.Args[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sum:&quot;</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后续模块中探讨错误处理时，我们将详细介绍如何忽略函数的返回值。</p><h2 id="更改函数参数值（指针）"><a href="#更改函数参数值（指针）" class="headerlink" title="更改函数参数值（指针）"></a>更改函数参数值（指针）</h2><p>将值传递给函数时，该函数中的每个更改都不会影响调用方。 Go 是“按值传递”编程语言。 每次向函数传递值时，Go 都会使用该值并创建本地副本（内存中的新变量）。 在函数中对该变量所做的更改都不会影响你向函数发送的更改。</p><p>例如，假设你创建了一个用于更新人员姓名的函数。 请注意，运行此代码时会发生的变化：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName := <span class="string">&quot;John&quot;</span></span><br><span class="line">    updateName(firstName)</span><br><span class="line">    fmt.Println(firstName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateName</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    name = <span class="string">&quot;David&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使你在函数中将该名称更改为 David，输出仍为 John。由于 <code>updateName</code> 函数中的更改仅会修改本地副本，因此输出不会发生变化。 Go 传递变量的值，而不是变量本身。</p><p>如果你希望在 <code>updateName</code> 函数中进行的更改会影响 <code>main</code> 函数中的 <code>firstName</code> 变量，则需要使用指针。 <em>指针</em>是包含另一个变量的内存地址的变量。 向函数发送指针时，不是传递值，而是传递内存地址。 因此，对该变量所做的每个更改都会影响调用方。</p><p>在 Go 中，有两个运算符可用于处理指针：</p><ul><li><code>&amp;</code> 运算符使用其后对象的地址。</li><li><code>*</code> 运算符取消引用指针。 你可以前往指针中包含的地址访问其中的对象。</li></ul><p>让我们修改前面的示例，以阐明指针的工作方式：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName := <span class="string">&quot;John&quot;</span></span><br><span class="line">    updateName(&amp;firstName)</span><br><span class="line">    fmt.Println(firstName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateName</span><span class="params">(name *<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    *name = <span class="string">&quot;David&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行前面的代码。 请注意，输出现在显示的是 <code>David</code>，而不是 <code>John</code>。</p><p>首先要做的就是修改函数的签名，以指明你要接收指针。 为此，请将参数类型从 <code>string</code> 更改为 <code>*string</code>。 （后者仍是字符串，但现在它是指向字符串 的 指针。）然后，将新值分配给该变量时，需要在该变量的左侧添加星号 (<code>*</code>) 以暂停该变量的值。 调用 <code>updateName</code> 函数时，系统不会发送值，而是发送变量的内存地址。 变量左侧的 <code>&amp;</code> 符号指示变量的地址。</p>]]></content>
      
      
      <categories>
          
          <category> GO语言基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>四.Go语言基本数据类型</title>
      <link href="/posts/a57e3aaf/"/>
      <url>/posts/a57e3aaf/</url>
      
        <content type="html"><![CDATA[<h1 id="了解基本数据类型"><a href="#了解基本数据类型" class="headerlink" title="了解基本数据类型"></a>了解基本数据类型</h1><p>Go 是一种强类型语言。 你声明的每个变量都绑定到特定的数据类型，并且只接受与此类型匹配的值。</p><p>Go 有四类数据类型：</p><ul><li>基本类型：数字、字符串和布尔值</li><li>聚合类型：数组和结构</li><li>引用类型：指针、切片、映射、函数和通道</li><li>接口类型：接口</li></ul><p>在此模块中，我们仅介绍基本类型。 如果你不知道其他类型是什么，请不要担心。 我们将在后续模块中进行介绍。</p><p>首先，我们一起浏览数值的数据类型。</p><h2 id="整数数字"><a href="#整数数字" class="headerlink" title="整数数字"></a>整数数字</h2><p>一般来说，定义整数类型的关键字是 <code>int</code>。 但 Go 还提供了 <code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code> 类型，其大小分别为 8、16、32 或 64 位的整数。 使用 32 位操作系统时，如果只是使用 <code>int</code>，则大小通常为 32 位。 在 64 位系统上，<code>int</code> 大小通常为 64 位。 但是，此行为可能因计算机而不同。 可以使用 <code>uint</code>。 但是，只有在出于某种原因需要将值表示为无符号数字的情况下，才使用此类型。 此外，Go 还提供 <code>uint8</code>、<code>uint16</code>、<code>uint32</code> 和 <code>uint64</code> 类型。</p><p>下面的示例演示如何在 Go 中使用各种整数类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integer8 <span class="type">int8</span> = <span class="number">127</span></span><br><span class="line"><span class="keyword">var</span> integer16 <span class="type">int16</span> = <span class="number">32767</span></span><br><span class="line"><span class="keyword">var</span> integer32 <span class="type">int32</span> = <span class="number">2147483647</span></span><br><span class="line"><span class="keyword">var</span> integer64 <span class="type">int64</span> = <span class="number">9223372036854775807</span></span><br><span class="line">fmt.Println(integer8, integer16, integer32, integer64)</span><br></pre></td></tr></table></figure><p>大多数情况下，你将使用 <code>int</code>，但需要了解其他整数类型，因为在 Go 中，<code>int</code> 与 <code>int32</code> 不同，即使整数的自然大小为 32 位也是如此。 换句话说，需要强制转换时，你需要进行显式转换。 如果尝试在不同类型之间执行数学运算，将会出现错误。 例如，假定你具有下面的代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integer16 <span class="type">int16</span> = <span class="number">127</span></span><br><span class="line"><span class="keyword">var</span> integer32 <span class="type">int32</span> = <span class="number">32767</span></span><br><span class="line">fmt.Println(integer16 + integer32)</span><br></pre></td></tr></table></figure><p>运行该程序时，你会收到以下错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">invalid operation: integer16 + integer32 (mismatched types int16 and int32)</span><br></pre></td></tr></table></figure><p>如你所见，在 Go 中将值从一种类型转换为另一种类型时，需要显式声明新类型。 我们将在本模块结束时讨论如何正确地强制转换类型。</p><p>在学习 Go 过程中，你可能会收到有关 <a href="https://www.geeksforgeeks.org/rune-in-golang/">runes</a> 的信息。 <code>rune</code> 只是 <code>int32</code> 数据类型的别名。 它用于表示 Unicode 字符（或 Unicode 码位）。 例如，假设有以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">rune</span> := <span class="string">&#x27;G&#x27;</span></span><br><span class="line">fmt.Println(<span class="type">rune</span>)</span><br></pre></td></tr></table></figure><p>运行前面的代码片段时，你可能会在命令提示符下看到程序打印符 <code>G</code>。 不过，你还会看到数字 <code>71</code>，它表示 <code>G</code> 的 Unicode 字符。 我们将在后续模块中详细介绍 runes。</p><p>你可以通过查看 <a href="https://golang.org/src/builtin/builtin.go">Go 源代码</a>来了解每种类型的范围。 了解每种类型的范围可帮助你选择正确的数据类型，并且还可避免占用内存中的位。</p><h3 id="挑战-1"><a href="#挑战-1" class="headerlink" title="挑战 1"></a>挑战 1</h3><p>设置 <code>int</code> 类型的另一个变量，并使用 <code>integer32</code> 或 <code>integer64</code> 变量中的值来确认系统上变量的自然大小。 如果你使用的是 32 位系统并使用大于 2,147,483,647 的值，则会出现如下的溢出错误：<code>constant 9223372036854775807 overflows int</code>。</p><blockquote><p><strong>质询解决方案</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> integer32 <span class="type">int</span> = <span class="number">2147483648</span></span><br><span class="line">   fmt.Println(integer32)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="挑战-2"><a href="#挑战-2" class="headerlink" title="挑战 2"></a>挑战 2</h3><p>声明一个无符号变量（如 <code>uint</code>），并用一个负值（如 <code>-10</code>）对其进行初始化。 尝试运行程序时，应会出现如下错误：<code>constant -10 overflows uint</code>。</p><blockquote><p><strong>质询解决方案</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> integer <span class="type">uint</span> = <span class="number">-10</span></span><br><span class="line">   fmt.Println(integer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="浮点数字"><a href="#浮点数字" class="headerlink" title="浮点数字"></a>浮点数字</h2><p>Go 提供两种浮点数大小的数据类型：<code>float32</code> 和 <code>float64</code>。 如果需要存储较大的数字，则可以使用这些类型，这些类型无法适应前面提到的任何一个整数类型。 这两种类型的区别是它们可以容纳的最大位数。 查看以下行，了解如何使用这两种类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">float32</span> <span class="type">float32</span> = <span class="number">2147483647</span></span><br><span class="line"><span class="keyword">var</span> <span class="type">float64</span> <span class="type">float64</span> = <span class="number">9223372036854775807</span></span><br><span class="line">fmt.Println(<span class="type">float32</span>, <span class="type">float64</span>)</span><br></pre></td></tr></table></figure><p>你可以使用 <code>math</code> 包中提供的 <code>math.MaxFloat32</code> 和 <code>math.MaxFloat64</code> 常量来查找这两种类型的限制。 使用以下代码打印命令提示符中的最大浮点值：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(math.MaxFloat32, math.MaxFloat64)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要使用十进制数时，浮点类型也很有用。 例如，你可以编写类似于以下代码的内容：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="number">2.71828</span></span><br><span class="line"><span class="keyword">const</span> Avogadro = <span class="number">6.02214129e23</span></span><br><span class="line"><span class="keyword">const</span> Planck = <span class="number">6.62606957e-34</span></span><br></pre></td></tr></table></figure><p>请注意，与前面的代码一样，Go 会从使用的值推断其数据类型。</p><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔类型仅可能有两个值：<code>true</code> 和 <code>false</code>。 你可以使用关键字 <code>bool</code> 声明布尔类型。 Go 与其他编程语言不同。 在 Go 中，不能将布尔类型隐式转换为 0 或 1。 你必须显式执行此操作。</p><p>因此，你可以按如下方式声明布尔变量：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> featureFlag <span class="type">bool</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当我们讨论 Go 中的控制流语句时，我们将在后续模块中使用布尔数据类型。 我们还将在以后的模块中使用这些类型。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>最后，让我们看一下编程语言中最常见的数据类型：string。 在 Go 中，关键字 <code>string</code> 用于表示字符串数据类型。 若要初始化字符串变量，你需要在双引号（<code>&quot;</code>）中定义值。 单引号（<code>&#39;</code>）用于单个字符（以及 runes，正如我们在上一节所述）。</p><p>例如，下面的代码演示了声明和初始化字符串变量的两种方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName <span class="type">string</span> = <span class="string">&quot;John&quot;</span></span><br><span class="line">lastName := <span class="string">&quot;Doe&quot;</span></span><br><span class="line">fmt.Println(firstName, lastName)</span><br></pre></td></tr></table></figure><p>有时，你需要对字符进行转义。 为此，在 Go 中，请在字符之前使用反斜杠 (<code>\</code>)。 例如，下面是使用转义字符的最常见示例：</p><ul><li><code>\n</code>：新行</li><li><code>\r</code>：回车符</li><li><code>\t</code>：制表符</li><li><code>\&#39;</code>：单引号</li><li><code>\&quot;</code>：双引号</li><li><code>\\</code>：反斜杠</li></ul><p>使用以下代码片段来测试转义字符：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fullName := <span class="string">&quot;John Doe \t(alias \&quot;Foo\&quot;)\n&quot;</span></span><br><span class="line">fmt.Println(fullName)</span><br></pre></td></tr></table></figure><p>你应会看到以下输出（包括新行）：</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">John Doe        (alias &quot;Foo&quot;)</span><br></pre></td></tr></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>到目前为止，几乎每次声明变量时，都使用值对其进行了初始化。 但与在其他编程语言中不同的是，在 Go 中，如果你不对变量初始化，所有数据类型都有默认值。 此功能非常方便，因为在使用之前，你无需检查变量是否已初始化。</p><p>下面列出了我们目前浏览过类型的几个默认值：</p><ul><li><code>int</code> 类型的 <code>0</code>（及其所有子类型，如 <code>int64</code>）</li><li><code>float32</code> 和 <code>float64</code> 类型的 <code>+0.000000e+000</code></li><li><code>bool</code> 类型的 <code>false</code></li><li><code>string</code> 类型的空值</li></ul><p>运行以下代码片段以确认前面列出的默认值：</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var defaultInt int</span><br><span class="line">var defaultFloat32 float32</span><br><span class="line">var defaultFloat64 float64</span><br><span class="line">var defaultBool bool</span><br><span class="line">var defaultString string</span><br><span class="line">fmt.Println(defaultInt, defaultFloat32, defaultFloat64, defaultBool, defaultString)</span><br></pre></td></tr></table></figure><p>你可以使用类似于此代码的代码来确定我们没有浏览到的数据类型默认值。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>在上一节中，我们确认在 Go 中隐式强制转换不起作用。 接下来，需要显式强制转换。 Go 提供了将一种数据类型转换为另一种数据类型的一些本机方法。 例如，一种方法是对每个类型使用内置函数，如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> integer16 <span class="type">int16</span> = <span class="number">127</span></span><br><span class="line"><span class="keyword">var</span> integer32 <span class="type">int32</span> = <span class="number">32767</span></span><br><span class="line">fmt.Println(<span class="type">int32</span>(integer16) + integer32)</span><br></pre></td></tr></table></figure><p>Go 的另一种转换方法是使用 <a href="https://golang.org/pkg/strconv/">strconv 包</a>。 例如，若要将 <code>string</code> 转换为 <code>int</code>，可以使用以下代码，反之亦然：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i, _ := strconv.Atoi(<span class="string">&quot;-42&quot;</span>)</span><br><span class="line">    s := strconv.Itoa(<span class="number">-42</span>)</span><br><span class="line">    fmt.Println(i, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行前面的代码，并确认它运行并打印 <code>-42</code> 两次。</p><p>请注意，在前面的代码中，有一个下划线 (<code>_</code>) 用作变量的名称。 在 Go 中，<code>_</code> 意味着我们不会使用该变量的值，而是要将其忽略。 否则，程序将不会进行编译，因为我们需要使用声明的所有变量。 我们将返回到本主题，届时你将在后续模块中了解 <code>_</code> 通常表示的内容。</p>]]></content>
      
      
      <categories>
          
          <category> GO语言基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
